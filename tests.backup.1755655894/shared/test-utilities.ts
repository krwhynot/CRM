/**
 * Shared Test Utilities
 * Framework-agnostic utilities that can be used by both Vitest and Playwright tests
 * IMPORTANT: This file must NOT import any test framework specific modules
 */

/**
 * Test data generators
 */
export const TestData = {
  organizations: {
    valid: () => ({
      name: `Test Organization ${Date.now()}`,
      segment: 'restaurant' as const,
      status: 'active' as const,
      phone: '555-0123',
      email: `test-${Date.now()}@example.com`,
      address: '123 Test Street, Test City, TC 12345',
      notes: 'Generated by automated tests',
    }),
    
    invalid: {
      emptyName: () => ({
        name: '',
        segment: 'restaurant' as const,
        status: 'active' as const,
      }),
      
      invalidEmail: () => ({
        name: 'Test Org',
        segment: 'restaurant' as const,
        status: 'active' as const,
        email: 'invalid-email',
      }),
    },
  },

  contacts: {
    valid: () => ({
      firstName: 'John',
      lastName: `Doe-${Date.now()}`,
      email: `john.doe-${Date.now()}@example.com`,
      phone: '555-0456',
      title: 'Test Manager',
      notes: 'Generated contact for testing',
    }),
    
    invalid: {
      emptyFirstName: () => ({
        firstName: '',
        lastName: 'Doe',
        email: 'john@example.com',
      }),
    },
  },

  products: {
    valid: () => ({
      name: `Test Product ${Date.now()}`,
      category: 'food' as const,
      brand: 'Test Brand',
      sku: `TEST-${Date.now()}`,
      description: 'Test product for automated testing',
      status: 'active' as const,
    }),
  },

  opportunities: {
    valid: () => ({
      title: `Test Opportunity ${Date.now()}`,
      stage: 'prospecting' as const,
      value: 10000,
      probability: 0.25,
      expectedCloseDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
      description: 'Generated opportunity for testing',
    }),
  },

  interactions: {
    valid: () => ({
      type: 'email' as const,
      subject: `Test Interaction ${Date.now()}`,
      notes: 'Automated test interaction',
      date: new Date().toISOString(),
    }),
  },
};

/**
 * String utilities
 */
export const StringUtils = {
  randomString: (length: number = 8): string => {
    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    let result = '';
    for (let i = 0; i < length; i++) {
      result += chars.charAt(Math.floor(Math.random() * chars.length));
    }
    return result;
  },

  randomEmail: (): string => {
    return `test-${StringUtils.randomString(8)}@example.com`.toLowerCase();
  },

  randomPhone: (): string => {
    const digits = '0123456789';
    let phone = '555-';
    for (let i = 0; i < 4; i++) {
      phone += digits.charAt(Math.floor(Math.random() * digits.length));
    }
    return phone;
  },

  slugify: (text: string): string => {
    return text
      .toLowerCase()
      .replace(/[^\w\s-]/g, '')
      .replace(/[\s_-]+/g, '-')
      .replace(/^-+|-+$/g, '');
  },
};

/**
 * Date utilities
 */
export const DateUtils = {
  formatForInput: (date: Date): string => {
    return date.toISOString().split('T')[0];
  },

  addDays: (date: Date, days: number): Date => {
    const result = new Date(date);
    result.setDate(result.getDate() + days);
    return result;
  },

  isSameDay: (date1: Date, date2: Date): boolean => {
    return date1.toDateString() === date2.toDateString();
  },

  futureDate: (daysFromNow: number = 30): string => {
    return DateUtils.formatForInput(DateUtils.addDays(new Date(), daysFromNow));
  },

  pastDate: (daysAgo: number = 30): string => {
    return DateUtils.formatForInput(DateUtils.addDays(new Date(), -daysAgo));
  },
};

/**
 * Validation utilities
 */
export const ValidationUtils = {
  isValidEmail: (email: string): boolean => {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
  },

  isValidPhone: (phone: string): boolean => {
    const phoneRegex = /^\(?([0-9]{3})\)?[-. ]?([0-9]{3})[-. ]?([0-9]{4})$/;
    return phoneRegex.test(phone);
  },

  isValidUrl: (url: string): boolean => {
    try {
      new URL(url);
      return true;
    } catch {
      return false;
    }
  },

  isNumeric: (value: string): boolean => {
    return !isNaN(Number(value)) && !isNaN(parseFloat(value));
  },

  isEmpty: (value: any): boolean => {
    if (value === null || value === undefined) return true;
    if (typeof value === 'string') return value.trim().length === 0;
    if (Array.isArray(value)) return value.length === 0;
    if (typeof value === 'object') return Object.keys(value).length === 0;
    return false;
  },
};

/**
 * Array utilities
 */
export const ArrayUtils = {
  randomItem: <T>(array: T[]): T => {
    return array[Math.floor(Math.random() * array.length)];
  },

  shuffleArray: <T>(array: T[]): T[] => {
    const shuffled = [...array];
    for (let i = shuffled.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
    }
    return shuffled;
  },

  groupBy: <T, K extends keyof T>(array: T[], key: K): Record<string, T[]> => {
    return array.reduce((groups, item) => {
      const group = String(item[key]);
      groups[group] = groups[group] || [];
      groups[group].push(item);
      return groups;
    }, {} as Record<string, T[]>);
  },
};

/**
 * Environment utilities
 */
export const EnvUtils = {
  isTest: (): boolean => {
    return process.env.NODE_ENV === 'test';
  },

  isCI: (): boolean => {
    return !!process.env.CI;
  },

  getBaseUrl: (): string => {
    return process.env.PLAYWRIGHT_BASE_URL || 
           process.env.VITE_BASE_URL || 
           'http://localhost:5173';
  },

  getTestTimeout: (): number => {
    return parseInt(process.env.TEST_TIMEOUT || '30000', 10);
  },
};

/**
 * Async utilities
 */
export const AsyncUtils = {
  sleep: (ms: number): Promise<void> => {
    return new Promise(resolve => setTimeout(resolve, ms));
  },

  retry: async <T>(
    operation: () => Promise<T>,
    maxAttempts: number = 3,
    delay: number = 1000
  ): Promise<T> => {
    let lastError: Error;
    
    for (let attempt = 1; attempt <= maxAttempts; attempt++) {
      try {
        return await operation();
      } catch (error) {
        lastError = error as Error;
        
        if (attempt === maxAttempts) {
          break;
        }
        
        await AsyncUtils.sleep(delay * attempt); // Exponential backoff
      }
    }
    
    throw lastError;
  },

  timeout: <T>(promise: Promise<T>, ms: number): Promise<T> => {
    return Promise.race([
      promise,
      new Promise<never>((_, reject) =>
        setTimeout(() => reject(new Error(`Operation timed out after ${ms}ms`)), ms)
      ),
    ]);
  },
};

/**
 * File utilities
 */
export const FileUtils = {
  generateFileName: (prefix: string = 'test', extension: string = 'csv'): string => {
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    return `${prefix}-${timestamp}.${extension}`;
  },

  generateCsvContent: (headers: string[], rows: string[][]): string => {
    const csvLines = [headers.join(',')];
    rows.forEach(row => {
      csvLines.push(row.map(cell => `"${cell}"`).join(','));
    });
    return csvLines.join('\n');
  },

  getMimeType: (extension: string): string => {
    const mimeTypes: Record<string, string> = {
      'csv': 'text/csv',
      'xlsx': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
      'json': 'application/json',
      'pdf': 'application/pdf',
      'txt': 'text/plain',
    };
    return mimeTypes[extension.toLowerCase()] || 'application/octet-stream';
  },
};

/**
 * CRM-specific test constants
 */
export const CRM_CONSTANTS = {
  SEGMENTS: ['restaurant', 'retail', 'institutional', 'other'] as const,
  ORGANIZATION_STATUSES: ['active', 'inactive', 'prospect'] as const,
  OPPORTUNITY_STAGES: ['prospecting', 'qualification', 'proposal', 'negotiation', 'closed_won', 'closed_lost'] as const,
  INTERACTION_TYPES: ['email', 'phone', 'meeting', 'demo', 'follow_up', 'other'] as const,
  PRODUCT_CATEGORIES: ['food', 'beverage', 'equipment', 'service', 'other'] as const,
  
  DEFAULT_TIMEOUTS: {
    SHORT: 5000,
    MEDIUM: 15000,
    LONG: 30000,
    EXTRA_LONG: 60000,
  },
  
  TEST_SELECTORS: {
    // Common data-testid selectors used across the application
    LOGIN_FORM: '[data-testid="login-form"]',
    NAVIGATION_MENU: '[data-testid="navigation-menu"]',
    ORGANIZATION_FORM: '[data-testid="organization-form"]',
    CONTACT_FORM: '[data-testid="contact-form"]',
    PRODUCT_FORM: '[data-testid="product-form"]',
    OPPORTUNITY_FORM: '[data-testid="opportunity-form"]',
    INTERACTION_FORM: '[data-testid="interaction-form"]',
    DATA_TABLE: '[data-testid="data-table"]',
    LOADING_SPINNER: '[data-testid="loading-spinner"]',
    ERROR_MESSAGE: '[data-testid="error-message"]',
    SUCCESS_MESSAGE: '[data-testid="success-message"]',
  },
} as const;