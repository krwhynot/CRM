name: Design Tokens Governance

on:
  push:
    branches: [ main, develop, feature/architecture-simplification ]
    paths:
      - 'src/styles/tokens/primitives.css'
      - 'src/styles/tokens/semantic.css'
      - 'src/lib/design-token-types.ts'
      - 'src/lib/design-token-utils.ts'
      - 'tailwind.config.js'
      - 'scripts/validate-design-tokens.sh'
      - 'scripts/simplified-token-analysis.js'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/styles/tokens/primitives.css'
      - 'src/styles/tokens/semantic.css'
      - 'src/lib/design-token-types.ts'
      - 'src/lib/design-token-utils.ts'
      - 'tailwind.config.js'
      - 'scripts/validate-design-tokens.sh'
      - 'scripts/simplified-token-analysis.js'

env:
  # Feature flags for progressive validation
  VALIDATION_LEVEL: ${{ github.event_name == 'pull_request' && 'strict' || 'full' }}
  ENABLE_BUNDLE_ANALYSIS: ${{ github.event_name == 'pull_request' && 'true' || 'false' }}
  TOKEN_ARCHITECTURE_VERSION: '2-layer'

jobs:
  design-token-governance:
    name: Design Token Validation & Governance
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      validation-level: ${{ env.VALIDATION_LEVEL }}
      bundle-impact: ${{ steps.bundle-analysis.outputs.impact-score }}
      architecture-compliance: ${{ steps.architecture-validation.outputs.compliance-score }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2  # Need previous commit for change tracking

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Make scripts executable
        run: |
          chmod +x scripts/validate-design-tokens.sh
          chmod +x scripts/token-changelog.js

      - name: 2-Layer Architecture Validation
        id: architecture-validation
        run: |
          echo "üèóÔ∏è Validating 2-layer design token architecture..."
          echo "Architecture: ${TOKEN_ARCHITECTURE_VERSION}"
          echo "Validation Level: ${VALIDATION_LEVEL}"

          # Run architecture-specific validation
          VALIDATION_OUTPUT=$(./scripts/validate-design-tokens.sh --architecture 2-layer --level "${VALIDATION_LEVEL}")
          echo "$VALIDATION_OUTPUT"

          # Extract compliance score
          COMPLIANCE_SCORE=$(echo "$VALIDATION_OUTPUT" | grep -o "Score: [0-9]*/[0-9]*" | grep -o "[0-9]*" | head -1)
          echo "compliance-score=${COMPLIANCE_SCORE:-0}" >> $GITHUB_OUTPUT

          # Check minimum thresholds based on validation level
          MIN_SCORE=85
          if [ "$VALIDATION_LEVEL" = "strict" ]; then
            MIN_SCORE=120
          elif [ "$VALIDATION_LEVEL" = "full" ]; then
            MIN_SCORE=100
          fi

          if [ "${COMPLIANCE_SCORE:-0}" -ge "$MIN_SCORE" ]; then
            echo "‚úÖ Architecture validation passed: ${COMPLIANCE_SCORE}/165 (>= ${MIN_SCORE})"
          else
            echo "‚ùå Architecture validation failed: ${COMPLIANCE_SCORE}/165 (< ${MIN_SCORE})"
            exit 1
          fi

      - name: Bundle Impact Analysis
        id: bundle-analysis
        if: env.ENABLE_BUNDLE_ANALYSIS == 'true'
        run: |
          echo "üìä Analyzing bundle impact of design token changes..."

          # Create baseline build (current HEAD~1)
          git stash push -m "temp-stash-for-baseline"
          git checkout HEAD~1 -- src/styles/tokens/ tailwind.config.js || echo "No previous version found"

          # Build baseline
          npm run build > baseline-build.log 2>&1 || echo "Baseline build failed"
          BASELINE_SIZE=0
          if [ -d "dist" ]; then
            BASELINE_SIZE=$(du -sb dist/ | cut -f1)
            mv dist baseline-dist
          fi

          # Restore current changes
          git stash pop || echo "No stash to pop"

          # Build with changes
          npm run build > current-build.log 2>&1
          CURRENT_SIZE=0
          if [ -d "dist" ]; then
            CURRENT_SIZE=$(du -sb dist/ | cut -f1)
          fi

          # Calculate impact
          SIZE_DIFF=$((CURRENT_SIZE - BASELINE_SIZE))
          if [ "$BASELINE_SIZE" -gt 0 ]; then
            PERCENT_CHANGE=$(echo "scale=2; ($SIZE_DIFF * 100) / $BASELINE_SIZE" | bc -l)
          else
            PERCENT_CHANGE="0"
          fi

          # Generate bundle analysis report
          node scripts/simplified-token-analysis.js > bundle-analysis.log 2>&1

          echo "impact-score=${PERCENT_CHANGE}" >> $GITHUB_OUTPUT
          echo "üìä Bundle Impact Analysis:"
          echo "   Baseline Size: $(numfmt --to=iec $BASELINE_SIZE)"
          echo "   Current Size: $(numfmt --to=iec $CURRENT_SIZE)"
          echo "   Size Change: $(numfmt --to=iec $SIZE_DIFF) (${PERCENT_CHANGE}%)"

          # Check if impact exceeds threshold (5% for warnings, 15% for failure)
          if (( $(echo "$PERCENT_CHANGE > 15" | bc -l) )); then
            echo "‚ùå Bundle size increased by ${PERCENT_CHANGE}% (>15% threshold)"
            exit 1
          elif (( $(echo "$PERCENT_CHANGE > 5" | bc -l) )); then
            echo "‚ö†Ô∏è Bundle size increased by ${PERCENT_CHANGE}% (>5% warning threshold)"
          else
            echo "‚úÖ Bundle impact acceptable: ${PERCENT_CHANGE}%"
          fi

      - name: Progressive Performance Analysis
        id: performance
        run: |
          echo "üöÄ Running progressive performance analysis..."
          echo "Level: ${VALIDATION_LEVEL}"

          # Run simplified token analysis for all levels
          node scripts/simplified-token-analysis.js > token-performance.log 2>&1

          # Enhanced analysis for full and strict levels
          if [ "$VALIDATION_LEVEL" = "full" ] || [ "$VALIDATION_LEVEL" = "strict" ]; then
            echo "üìà Running enhanced performance analysis..."

            # CSS token optimization check
            CSS_VARS_DEFINED=$(grep -r "^[[:space:]]*--" src/styles/tokens/ | wc -l)
            CSS_VARS_USED=$(grep -r "var(--" src/ --include="*.tsx" --include="*.ts" | wc -l)

            if [ "$CSS_VARS_DEFINED" -gt 0 ]; then
              USAGE_RATE=$(echo "scale=1; ($CSS_VARS_USED * 100) / $CSS_VARS_DEFINED" | bc -l)
              echo "üìä Token Usage Rate: ${USAGE_RATE}% (${CSS_VARS_USED}/${CSS_VARS_DEFINED})"

              # Strict mode requires higher usage efficiency
              MIN_USAGE_RATE=20
              if [ "$VALIDATION_LEVEL" = "strict" ]; then
                MIN_USAGE_RATE=30
              fi

              if (( $(echo "$USAGE_RATE < $MIN_USAGE_RATE" | bc -l) )); then
                echo "‚ö†Ô∏è Token usage rate below ${MIN_USAGE_RATE}% threshold"
                if [ "$VALIDATION_LEVEL" = "strict" ]; then
                  echo "‚ùå Strict mode: Token efficiency requirement not met"
                  exit 1
                fi
              else
                echo "‚úÖ Token usage efficiency acceptable"
              fi
            fi
          fi

          # Basic performance validation for all levels
          if [ -f "token-performance.log" ]; then
            echo "üìã Token Analysis Summary:"
            tail -10 token-performance.log | head -5
          fi

      - name: Check for governance violations
        if: failure()
        run: |
          echo "‚ùå Design token governance checks failed!"
          echo "Please review the output above for specific violations."
          echo ""
          echo "Common issues and fixes:"
          echo "1. Primitive tokens defined outside src/index.css"
          echo "   ‚Üí Move primitive definitions to src/index.css"
          echo ""
          echo "2. Circular token references detected"
          echo "   ‚Üí Remove self-referencing token definitions"
          echo ""
          echo "3. Components bypassing semantic layer"
          echo "   ‚Üí Use semantic tokens (--primary) instead of primitives (--primary-500)"
          echo ""
          echo "4. Duplicate token definitions"
          echo "   ‚Üí Consolidate duplicate definitions following hierarchy rules"
          echo ""
          echo "5. WCAG contrast violations"
          echo "   ‚Üí Ensure minimum 4.5:1 contrast ratio (AA) or 7:1 (AAA)"
          echo ""
          exit 1

      - name: Upload 2-Layer Token Analysis
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: design-tokens-analysis-${{ github.sha }}
          path: |
            token-performance.log
            bundle-analysis.log
            baseline-build.log
            current-build.log
          retention-days: 30

      - name: Upload bundle impact reports
        if: env.ENABLE_BUNDLE_ANALYSIS == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: bundle-impact-reports-${{ github.sha }}
          path: |
            baseline-dist/
            dist/
            baseline-build.log
            current-build.log
          retention-days: 30

      - name: Comment PR with governance results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            // Check if changelog was updated
            let changelogContent = '';
            try {
              if (fs.existsSync('DESIGN_TOKENS_CHANGELOG.md')) {
                changelogContent = fs.readFileSync('DESIGN_TOKENS_CHANGELOG.md', 'utf8');
              }
            } catch (error) {
              console.log('No changelog found');
            }

            // Check if documentation was updated
            let docContent = '';
            try {
              if (fs.existsSync('DESIGN_TOKENS.md')) {
                docContent = fs.readFileSync('DESIGN_TOKENS.md', 'utf8');
              }
            } catch (error) {
              console.log('No documentation found');
            }

            // Read performance report if available
            let performanceData = '';
            try {
              if (fs.existsSync('dist/optimization-report.json')) {
                const perfReport = JSON.parse(fs.readFileSync('dist/optimization-report.json', 'utf8'));
                performanceData = `
            ### üöÄ Performance Analysis
            - **Bundle Size Reduction**: ${perfReport.stats.reductionPercent}% (Target: 20%+)
            - **Unused Tokens Removed**: ${perfReport.stats.removedTokens}
            - **Duplicates Eliminated**: ${perfReport.stats.duplicatesRemoved}
            - **Critical Tokens Inlined**: ${perfReport.stats.inlinedTokens}
            - **Optimization Status**: ${perfReport.performance.targetAchieved ? '‚úÖ Target Achieved' : '‚ö†Ô∏è Below Target'}`;
              }
            } catch (error) {
              performanceData = '\n            ### üöÄ Performance Analysis\n            - ‚ö†Ô∏è Performance report not available';
            }

            const body = `## üé® Design Token Governance Report

            ### ‚úÖ 2-Layer Architecture Validation (${process.env.VALIDATION_LEVEL || 'full'})
            - ‚úÖ Primitives layer validation passed
            - ‚úÖ Semantic layer validation passed
            - ‚úÖ WCAG contrast compliance verified
            - ‚úÖ No circular references detected
            - ‚úÖ Architecture compliance: ${{ steps.architecture-validation.outputs.compliance-score }}/165

            ### üìä Bundle Impact Analysis
            ${process.env.ENABLE_BUNDLE_ANALYSIS === 'true' ? '- üìà Bundle impact: ${{ steps.bundle-analysis.outputs.impact-score }}%' : '- ‚ÑπÔ∏è Bundle analysis skipped (not PR)'}
            - üèóÔ∏è Architecture: 2-layer system validated
            - üéØ Validation Level: ${process.env.VALIDATION_LEVEL || 'full'}
            ${performanceData}

            ### üéØ Design Tool Exports
            - ‚úÖ JSON export generated for Figma/Sketch integration
            - ‚úÖ CSS custom properties exported
            - ‚úÖ SCSS variables generated

            ### üèõÔ∏è 2-Layer Architecture Compliance
            All design tokens follow the validated 2-layer hierarchy:
            1. **Primitives** (src/styles/tokens/primitives.css) - MFB brand colors in OKLCH with HSL fallbacks
            2. **Semantic** (src/styles/tokens/semantic.css) - shadcn/ui mappings and contextual tokens

            The simplified architecture eliminates circular dependencies and maintains OKLCH‚ÜíHSL conversion pipeline.

            ---
            *This report was generated automatically by the Design Token Governance system.*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });

  wcag-accessibility-audit:
    name: WCAG Accessibility Audit
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: design-token-governance
    if: success()

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run WCAG Contrast Validation
        run: |
          echo "üîç Running comprehensive WCAG accessibility audit..."

          # Extract token validation score from script
          VALIDATION_OUTPUT=$(./scripts/validate-design-tokens.sh)
          echo "$VALIDATION_OUTPUT"

          # Check if score meets threshold (‚â•85/140 for good compliance)
          SCORE=$(echo "$VALIDATION_OUTPUT" | grep -o "Score: [0-9]*/140" | grep -o "[0-9]*" | head -1)

          if [ -n "$SCORE" ] && [ "$SCORE" -ge 85 ]; then
            echo "‚úÖ WCAG compliance score: $SCORE/140 (GOOD or better)"
          else
            echo "‚ùå WCAG compliance score: ${SCORE:-0}/140 (Below threshold)"
            echo "Minimum required score: 85/140"
            exit 1
          fi

      - name: Generate accessibility report
        if: always()
        run: |
          echo "üìä Generating accessibility compliance report..."

          cat > accessibility-report.md << EOF
          # WCAG Accessibility Compliance Report

          Generated: $(date -u +"%Y-%m-%d %H:%M:%S UTC")

          ## Overview
          This report validates design token contrast ratios against WCAG 2.1 AA/AAA standards.

          ## Validation Results
          - **MFB Brand Colors**: Validated against light/dark backgrounds
          - **Priority System Colors**: Critical accessibility validation
          - **Semantic Colors**: Success, warning, destructive, info tokens
          - **Text Contrast**: Primary, body, muted, disabled text validation

          ## Standards Applied
          - **WCAG AA**: Minimum 4.5:1 contrast ratio (normal text)
          - **WCAG AAA**: Minimum 7:1 contrast ratio (enhanced)
          - **Large Text**: Minimum 3:1 (AA) / 4.5:1 (AAA)

          ## Automated Validation
          All design tokens are automatically validated for:
          1. Color contrast ratios
          2. Hierarchy compliance
          3. Duplicate prevention
          4. Circular reference detection

          For detailed validation results, see the Design Token Governance job output.
          EOF

      - name: Upload accessibility report
        uses: actions/upload-artifact@v4
        with:
          name: wcag-accessibility-report-${{ github.sha }}
          path: accessibility-report.md
          retention-days: 30

  design-tool-integration:
    name: Design Tool Integration
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: design-token-governance
    if: success() && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate design tool exports
        run: |
          echo "üé® Generating exports for design tools..."
          node scripts/token-changelog.js

      - name: Validate export files
        run: |
          echo "‚úÖ Validating generated export files..."

          if [ ! -f "design-tokens-export/design-tokens.json" ]; then
            echo "‚ùå JSON export missing"
            exit 1
          fi

          if [ ! -f "design-tokens-export/design-tokens.css" ]; then
            echo "‚ùå CSS export missing"
            exit 1
          fi

          if [ ! -f "design-tokens-export/design-tokens.scss" ]; then
            echo "‚ùå SCSS export missing"
            exit 1
          fi

          echo "‚úÖ All design tool exports generated successfully"

      - name: Upload design tool exports
        uses: actions/upload-artifact@v4
        with:
          name: design-tool-exports-main-${{ github.sha }}
          path: design-tokens-export/
          retention-days: 90  # Keep main branch exports longer

      - name: Create release assets (on tag)
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          echo "üì¶ Preparing release assets..."
          tar -czf design-tokens-${{ github.ref_name }}.tar.gz design-tokens-export/
          echo "‚úÖ Release assets prepared"

      - name: Upload to release (on tag)
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-artifact@v4
        with:
          name: design-tokens-release-${{ github.ref_name }}
          path: design-tokens-${{ github.ref_name }}.tar.gz
          retention-days: 365