
> kitchenpantry-crm@1.0.0 lint
> eslint . --ext ts,tsx --report-unused-disable-directives --max-warnings 20 --max-warnings 200 --format json

[{"filePath":"/home/krwhynot/Projects/CRM/baseline-types-pre-migration.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/playwright.temp.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/App.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/components/app-sidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/components/auth/AuthCallbackHandler.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/components/auth/AuthPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/components/auth/ForgotPasswordForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/components/auth/LoginForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/components/auth/ProtectedRoute.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/components/auth/ResetPasswordPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/components/auth/SignUpForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/components/auth/UserMenu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/components/chart-card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/components/command-palette.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/components/contacts/ContactForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/components/contacts/ContactFormRefactored.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/components/contacts/ContactsTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/components/contacts/PreferredPrincipalsSelect.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/components/contacts/PreferredPrincipalsSelectDemo.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/components/dashboard-header.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/components/dashboard-with-activity-feed.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/components/dashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/components/dashboard/ActivityFeed.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/components/dashboard/PrincipalCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/components/dashboard/PrincipalCardsGrid.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/components/dashboard/PrincipalsDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/components/dashboard/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/components/dashboard/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/components/forms/BusinessForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/components/forms/CoreFormLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/components/forms/EntitySelect.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/components/forms/ExampleUsage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/components/forms/FormCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/components/forms/FormInput.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/components/forms/FormSubmitButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/components/forms/ProgressiveDetails.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":189,"column":10,"nodeType":"Identifier","messageId":"namedExport","endLine":189,"endColumn":31}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react'\nimport { Button } from '@/components/ui/button'\nimport { Card, CardContent } from '@/components/ui/card'\nimport { cn } from '@/lib/utils'\n\nexport interface ProgressiveDetailsProps {\n  isOpen?: boolean\n  onToggle?: (open: boolean) => void\n  buttonText?: string\n  children: React.ReactNode\n  className?: string\n  variant?: 'default' | 'subtle' | 'card'\n  disabled?: boolean\n}\n\nexport function ProgressiveDetails({\n  isOpen: controlledIsOpen,\n  onToggle,\n  buttonText = \"Show Details\",\n  children,\n  className,\n  variant = 'default',\n  disabled = false\n}: ProgressiveDetailsProps) {\n  const [internalIsOpen, setInternalIsOpen] = useState(false)\n  \n  // Use controlled state if provided, otherwise use internal state\n  const isOpen = controlledIsOpen !== undefined ? controlledIsOpen : internalIsOpen\n  const setIsOpen = onToggle || setInternalIsOpen\n\n  const handleToggle = () => {\n    if (!disabled) {\n      setIsOpen(!isOpen)\n    }\n  }\n\n  const getButtonText = () => {\n    if (typeof buttonText === 'string') {\n      return isOpen ? `Hide ${buttonText.replace('Show ', '')}` : buttonText\n    }\n    return buttonText\n  }\n\n  const renderContent = () => {\n    if (!isOpen) return null\n\n    switch (variant) {\n      case 'card':\n        return (\n          <Card className=\"mt-4\">\n            <CardContent className=\"p-4\">\n              {children}\n            </CardContent>\n          </Card>\n        )\n      \n      case 'subtle':\n        return (\n          <div className=\"mt-4 p-4 bg-gray-50 rounded-lg border border-gray-100\">\n            {children}\n          </div>\n        )\n      \n      default:\n        return (\n          <div className=\"mt-4 space-y-4\">\n            {children}\n          </div>\n        )\n    }\n  }\n\n  return (\n    <div className={cn(\"w-full\", className)}>\n      <Button\n        type=\"button\"\n        variant=\"outline\"\n        onClick={handleToggle}\n        disabled={disabled}\n        className={cn(\n          \"h-12 w-full text-base font-medium transition-all duration-200\",\n          \"hover:bg-gray-50 focus:ring-2 focus:ring-blue-200\",\n          disabled && \"opacity-50 cursor-not-allowed\"\n        )}\n        aria-expanded={isOpen}\n        aria-controls=\"progressive-details-content\"\n      >\n        {getButtonText()}\n      </Button>\n      \n      <div\n        id=\"progressive-details-content\"\n        className={cn(\n          \"transition-all duration-300 ease-in-out overflow-hidden\",\n          isOpen ? \"opacity-100 max-h-screen\" : \"opacity-0 max-h-0\"\n        )}\n        aria-hidden={!isOpen}\n      >\n        {renderContent()}\n      </div>\n    </div>\n  )\n}\n\n// Specialized versions for common use cases\nexport interface FormSectionDetailsProps extends Omit<ProgressiveDetailsProps, 'buttonText'> {\n  sectionTitle: string\n}\n\nexport function FormSectionDetails({ sectionTitle, ...props }: FormSectionDetailsProps) {\n  return (\n    <ProgressiveDetails\n      buttonText={`Show ${sectionTitle}`}\n      variant=\"subtle\"\n      {...props}\n    />\n  )\n}\n\nexport interface OptionalFieldsProps extends Omit<ProgressiveDetailsProps, 'buttonText' | 'variant'> {\n  fieldCount?: number\n}\n\nexport function OptionalFields({ fieldCount, ...props }: OptionalFieldsProps) {\n  const buttonText = fieldCount \n    ? `Show ${fieldCount} Additional Fields`\n    : \"Show Additional Fields\"\n\n  return (\n    <ProgressiveDetails\n      buttonText={buttonText}\n      variant=\"subtle\"\n      {...props}\n    />\n  )\n}\n\nexport interface AdvancedOptionsProps extends Omit<ProgressiveDetailsProps, 'buttonText' | 'variant'> {\n}\n\nexport function AdvancedOptions(props: AdvancedOptionsProps) {\n  return (\n    <ProgressiveDetails\n      buttonText=\"Show Advanced Options\"\n      variant=\"card\"\n      {...props}\n    />\n  )\n}\n\n// Context-specific progressive details\nexport interface ContactDetailsProps extends FormSectionDetailsProps {\n}\n\nexport function ContactDetails(props: ContactDetailsProps) {\n  return (\n    <FormSectionDetails\n      {...props}\n      sectionTitle=\"Contact Details\"\n    />\n  )\n}\n\nexport interface OrganizationDetailsProps extends FormSectionDetailsProps {\n}\n\nexport function OrganizationDetails(props: OrganizationDetailsProps) {\n  return (\n    <FormSectionDetails\n      {...props}\n      sectionTitle=\"Organization Details\"\n    />\n  )\n}\n\nexport interface AddressDetailsProps extends FormSectionDetailsProps {\n}\n\nexport function AddressDetails(props: AddressDetailsProps) {\n  return (\n    <FormSectionDetails\n      {...props}\n      sectionTitle=\"Address Information\"\n    />\n  )\n}\n\n// Export the hook from the separate hooks file for React Fast Refresh compatibility\nexport { useProgressiveDetails } from '@/hooks/useProgressiveDetails'","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/components/forms/SimpleForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/components/forms/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/components/import-export/OrganizationImporter.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/components/interactions/InteractionForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/components/interactions/InteractionsTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/components/layout/AppSidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/components/layout/Header.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/components/layout/Layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/components/monitoring/HealthDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/components/opportunities/OpportunitiesTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/components/opportunities/OpportunityForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/components/opportunities/OpportunityWizard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/components/opportunities/SimpleMultiPrincipalForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_principals' is assigned a value but never used.","line":125,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":125,"endColumn":38},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_autoGeneratedName' is assigned a value but never used.","line":125,"column":61,"nodeType":"Identifier","messageId":"unusedVar","endLine":125,"endColumn":79}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from 'react'\nimport { useForm } from 'react-hook-form'\nimport { Loader2, Building2, Users, X } from 'lucide-react'\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form'\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Textarea } from '@/components/ui/textarea'\nimport { Badge } from '@/components/ui/badge'\nimport { Alert, AlertDescription } from '@/components/ui/alert'\nimport { opportunitySchema, type OpportunityFormData } from '@/types/opportunity.types'\nimport type { OpportunityInsert } from '@/types/entities'\nimport type { Database } from '@/types/database.types'\nimport { createTypeSafeResolver } from '@/lib/form-resolver'\nimport { useOrganizations } from '@/hooks/useOrganizations'\nimport { useContacts } from '@/hooks/useContacts'\nimport { useCreateOpportunity } from '@/hooks/useOpportunities'\nimport { toast } from 'sonner'\n\ninterface SimpleMultiPrincipalFormProps {\n  onSuccess?: (opportunityId: string) => void\n  preselectedOrganization?: string\n  className?: string\n}\n\nconst OPPORTUNITY_CONTEXTS = [\n  'Site Visit',\n  'Food Show', \n  'New Product Interest',\n  'Follow-up',\n  'Demo Request',\n  'Sampling',\n  'Custom'\n] as const\n\nconst OPPORTUNITY_STAGES = [\n  { display: 'New Lead', value: 'lead' },\n  { display: 'Qualified', value: 'qualified' },\n  { display: 'Proposal', value: 'proposal' },\n  { display: 'Negotiation', value: 'negotiation' },\n  { display: 'Closed - Won', value: 'closed_won' },\n  { display: 'Closed - Lost', value: 'closed_lost' }\n] as const\n\nexport function SimpleMultiPrincipalForm({\n  onSuccess,\n  preselectedOrganization,\n  className\n}: SimpleMultiPrincipalFormProps) {\n  const [selectedPrincipals, setSelectedPrincipals] = useState<string[]>([])\n  \n  const { data: organizations = [] } = useOrganizations()\n  const { data: contacts = [] } = useContacts()\n  const createOpportunity = useCreateOpportunity()\n  \n  const form = useForm<OpportunityFormData>({\n    resolver: createTypeSafeResolver<OpportunityFormData>(opportunitySchema),\n    defaultValues: {\n      name: '',\n      organization_id: preselectedOrganization || '',\n      estimated_value: 0,\n      stage: 'lead',\n      contact_id: null,\n      estimated_close_date: null,\n      description: null,\n      notes: null,\n      principals: [],\n      product_id: null,\n      opportunity_context: 'New Product Interest',\n      auto_generated_name: true,\n      principal_id: null,\n      probability: null,\n      deal_owner: null\n    }\n  })\n\n  const watchedOrganization = form.watch('organization_id')\n  \n  // Filter contacts by selected organization\n  const filteredContacts = contacts.filter(contact => \n    contact.organization_id === watchedOrganization\n  )\n\n  // Filter organizations to show only principals\n  const principalOrganizations = organizations.filter(org => \n    org.type && (org.type.toLowerCase() === 'principal')\n  )\n\n  const handleAddPrincipal = (principalId: string) => {\n    if (principalId && !selectedPrincipals.includes(principalId)) {\n      const newPrincipals = [...selectedPrincipals, principalId]\n      setSelectedPrincipals(newPrincipals)\n      form.setValue('principals', newPrincipals)\n    }\n  }\n\n  const handleRemovePrincipal = (principalId: string) => {\n    const newPrincipals = selectedPrincipals.filter(id => id !== principalId)\n    setSelectedPrincipals(newPrincipals)\n    form.setValue('principals', newPrincipals)\n  }\n\n  const handleSubmit = async (data: OpportunityFormData) => {\n    try {\n      // Generate opportunity name if auto-generated\n      let opportunityName = 'Multi-Principal Opportunity'\n      if (data.auto_generated_name) {\n        const customerOrg = organizations.find(org => org.id === data.organization_id)\n        const principalNames = selectedPrincipals\n          .map(id => organizations.find(org => org.id === id)?.name)\n          .filter(Boolean)\n          .join(', ')\n        \n        const context = data.opportunity_context || 'Opportunity'\n        \n        const date = new Date()\n        const monthYear = date.toLocaleDateString('en-US', { month: 'short', year: 'numeric' })\n        \n        if (customerOrg && principalNames) {\n          opportunityName = `${customerOrg.name} - ${principalNames} - ${context} - ${monthYear}`\n        }\n      }\n\n      // Remove the principals field and prepare data for OpportunityInsert\n      const { principals: _principals, auto_generated_name: _autoGeneratedName, ...opportunityFormData } = data\n      \n      // Map form stage values to database enum values\n      const stageMapping: Record<string, Database['public']['Enums']['opportunity_stage']> = {\n        'New Lead': 'lead',\n        'Initial Outreach': 'qualified', \n        'Sample/Visit Offered': 'qualified',\n        'Awaiting Response': 'qualified',\n        'Feedback Logged': 'qualified',\n        'Demo Scheduled': 'proposal',\n        'Closed - Won': 'closed_won',\n        'Closed - Lost': 'closed_lost'\n      }\n      \n      // Handle direct enum values that might come from the database\n      const normalizeStage = (stage: string): Database['public']['Enums']['opportunity_stage'] => {\n        // If it's already a database enum value, use it directly\n        const dbEnumValues: Database['public']['Enums']['opportunity_stage'][] = ['lead', 'qualified', 'proposal', 'negotiation', 'closed_won', 'closed_lost']\n        if (dbEnumValues.includes(stage as Database['public']['Enums']['opportunity_stage'])) {\n          return stage as Database['public']['Enums']['opportunity_stage']\n        }\n        // Otherwise, try to map from form values\n        return stageMapping[stage] || 'lead'\n      }\n\n      // Create the opportunity with basic data compatible with OpportunityInsert\n      // Note: The hook will add created_by and updated_by fields automatically\n      const opportunityData: OpportunityInsert = {\n        name: opportunityName,\n        organization_id: opportunityFormData.organization_id,\n        estimated_value: data.estimated_value || 0,\n        stage: normalizeStage(opportunityFormData.stage as string),\n        contact_id: opportunityFormData.contact_id,\n        estimated_close_date: opportunityFormData.estimated_close_date,\n        notes: opportunityFormData.notes,\n        description: `Multi-Principal Opportunity with principals: ${selectedPrincipals.map(id => \n          organizations.find(org => org.id === id)?.name\n        ).filter(Boolean).join(', ')}`\n      }\n\n      const result = await createOpportunity.mutateAsync(opportunityData)\n      \n      // TODO: In a future iteration, we'll use the atomic RPC to create participants\n      // For now, we'll create a basic opportunity and show the principals in the description\n      \n      toast.success('Multi-principal opportunity created successfully!')\n      onSuccess?.(result.id)\n    } catch (error) {\n      console.error('Failed to create opportunity:', error)\n      toast.error('Failed to create opportunity. Please try again.')\n    }\n  }\n\n  const isLoading = createOpportunity.isPending\n  const canSubmit = selectedPrincipals.length > 0 && form.formState.isValid\n\n  return (\n    <Card className={className}>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <Users className=\"h-5 w-5\" />\n          New Multi-Principal Opportunity\n        </CardTitle>\n      </CardHeader>\n\n      <CardContent>\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-6\">\n            {/* Customer Organization */}\n            <FormField control={form.control} name=\"organization_id\" render={({ field }) => (\n              <FormItem>\n                <FormLabel className=\"flex items-center gap-2\">\n                  <Building2 className=\"h-4 w-4\" />\n                  Customer Organization *\n                </FormLabel>\n                <Select onValueChange={field.onChange} value={field.value}>\n                  <FormControl>\n                    <SelectTrigger data-testid=\"customer-organization-select\">\n                      <SelectValue placeholder=\"Select customer organization\" />\n                    </SelectTrigger>\n                  </FormControl>\n                  <SelectContent>\n                    {organizations.map((org) => (\n                      <SelectItem key={org.id} value={org.id}>\n                        <div className=\"flex items-center justify-between w-full\">\n                          <span>{org.name}</span>\n                          {org.type && (\n                            <Badge variant=\"outline\" className=\"ml-2\">\n                              {org.type}\n                            </Badge>\n                          )}\n                        </div>\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                <FormMessage />\n              </FormItem>\n            )} />\n\n            {/* Contact */}\n            <FormField control={form.control} name=\"contact_id\" render={({ field }) => (\n              <FormItem>\n                <FormLabel>Primary Contact</FormLabel>\n                <Select onValueChange={field.onChange} value={field.value || ''}>\n                  <FormControl>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select primary contact\" />\n                    </SelectTrigger>\n                  </FormControl>\n                  <SelectContent>\n                    {filteredContacts.map((contact) => (\n                      <SelectItem key={contact.id} value={contact.id}>\n                        {contact.first_name} {contact.last_name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                <FormMessage />\n              </FormItem>\n            )} />\n\n            {/* Principals Selection */}\n            <div className=\"space-y-4\">\n              <FormLabel>Principals *</FormLabel>\n              \n              {/* Add Principal Dropdown */}\n              <Select onValueChange={handleAddPrincipal}>\n                <SelectTrigger data-testid=\"add-organization-select\">\n                  <SelectValue placeholder=\"Add principal organization\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {principalOrganizations\n                    .filter(org => !selectedPrincipals.includes(org.id))\n                    .map((org) => (\n                      <SelectItem key={org.id} value={org.id}>\n                        {org.name}\n                      </SelectItem>\n                    ))\n                  }\n                </SelectContent>\n              </Select>\n\n              {/* Selected Principals */}\n              {selectedPrincipals.length > 0 && (\n                <div className=\"space-y-2\">\n                  <p className=\"text-sm text-muted-foreground\">Selected Principals:</p>\n                  <div className=\"flex flex-wrap gap-2\">\n                    {selectedPrincipals.map((principalId) => {\n                      const principal = organizations.find(org => org.id === principalId)\n                      return principal ? (\n                        <Badge key={principalId} variant=\"secondary\" className=\"flex items-center gap-1\">\n                          {principal.name}\n                          <button\n                            type=\"button\"\n                            onClick={() => handleRemovePrincipal(principalId)}\n                            className=\"ml-1 hover:bg-gray-200 rounded-full p-0.5\"\n                          >\n                            <X className=\"h-3 w-3\" />\n                          </button>\n                        </Badge>\n                      ) : null\n                    })}\n                  </div>\n                </div>\n              )}\n            </div>\n\n            {/* Opportunity Context */}\n            <FormField control={form.control} name=\"opportunity_context\" render={({ field }) => (\n              <FormItem>\n                <FormLabel>Opportunity Context *</FormLabel>\n                <Select onValueChange={field.onChange} value={field.value || ''}>\n                  <FormControl>\n                    <SelectTrigger data-testid=\"opportunity-context-select\">\n                      <SelectValue />\n                    </SelectTrigger>\n                  </FormControl>\n                  <SelectContent>\n                    {OPPORTUNITY_CONTEXTS.map((context) => (\n                      <SelectItem key={context} value={context}>\n                        {context}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                <FormMessage />\n              </FormItem>\n            )} />\n\n\n            {/* Stage */}\n            <FormField control={form.control} name=\"stage\" render={({ field }) => (\n              <FormItem>\n                <FormLabel>Stage</FormLabel>\n                <Select onValueChange={field.onChange} value={field.value}>\n                  <FormControl>\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                  </FormControl>\n                  <SelectContent>\n                    {OPPORTUNITY_STAGES.map((stage) => (\n                      <SelectItem key={stage.value} value={stage.value}>\n                        {stage.display}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                <FormMessage />\n              </FormItem>\n            )} />\n\n            {/* Notes */}\n            <FormField control={form.control} name=\"notes\" render={({ field }) => (\n              <FormItem>\n                <FormLabel>Notes</FormLabel>\n                <FormControl>\n                  <Textarea\n                    {...field}\n                    value={field.value || ''}\n                    rows={3}\n                    placeholder=\"Additional notes about this opportunity...\"\n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )} />\n\n            {/* Submit Button */}\n            <div className=\"flex flex-col gap-4 pt-4 border-t\">\n              {!canSubmit && (\n                <Alert>\n                  <AlertDescription>\n                    Please select at least one principal and complete all required fields.\n                  </AlertDescription>\n                </Alert>\n              )}\n\n              <Button\n                type=\"submit\"\n                disabled={!canSubmit || isLoading}\n                className=\"w-full\"\n                data-testid=\"create-opportunity-button\"\n              >\n                {isLoading ? (\n                  <>\n                    <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                    Creating...\n                  </>\n                ) : (\n                  'Create Multi-Principal Opportunity'\n                )}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </CardContent>\n    </Card>\n  )\n}","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/components/organizations/OrganizationForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":64,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":64,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2779,2782],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2779,2782],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ProgressiveDetails } from '@/components/forms'\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form'\nimport { Input } from '@/components/ui/input'\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Textarea } from '@/components/ui/textarea'\nimport { useForm } from 'react-hook-form'\nimport { organizationSchema, FOOD_SERVICE_SEGMENTS, type OrganizationFormData } from '@/types/organization.types'\nimport { createTypeSafeResolver } from '@/lib/form-resolver'\nimport { deriveOrganizationFlags } from '@/lib/organization-utils'\n\ninterface OrganizationFormProps {\n  onSubmit: (data: OrganizationFormData) => void\n  initialData?: Partial<OrganizationFormData>\n  loading?: boolean\n  submitLabel?: string\n}\n\nexport function OrganizationForm({ \n  onSubmit, \n  initialData, \n  loading = false,\n  submitLabel = 'Save Organization'\n}: OrganizationFormProps) {\n  const form = useForm<OrganizationFormData>({\n    resolver: createTypeSafeResolver<OrganizationFormData>(organizationSchema),\n    defaultValues: {\n      name: initialData?.name || '',\n      type: initialData?.type || 'customer',\n      priority: initialData?.priority || 'C',\n      segment: initialData?.segment || '',\n      is_principal: initialData?.is_principal || false,\n      is_distributor: initialData?.is_distributor || false,\n      description: initialData?.description || null,\n      email: initialData?.email || null,\n      phone: initialData?.phone || null,\n      website: initialData?.website || null,\n      address_line_1: initialData?.address_line_1 || null,\n      address_line_2: initialData?.address_line_2 || null,\n      city: initialData?.city || null,\n      state_province: initialData?.state_province || null,\n      postal_code: initialData?.postal_code || null,\n      country: initialData?.country || null,\n      industry: initialData?.industry || null,\n      annual_revenue: initialData?.annual_revenue || null,\n      employee_count: initialData?.employee_count || null,\n      notes: initialData?.notes || null\n    }\n  })\n\n  const handleSubmit = (data: OrganizationFormData) => {\n    // Automatically derive boolean flags from the selected type\n    const derivedFlags = deriveOrganizationFlags(data.type)\n    const submitData = { ...data, ...derivedFlags }\n    onSubmit(submitData)\n  }\n\n  return (\n    <Card className=\"w-full max-w-md mx-auto\">\n      <CardHeader><CardTitle>{initialData ? 'Edit Organization' : 'New Organization'}</CardTitle></CardHeader>\n      <CardContent>\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(handleSubmit as any)} className=\"space-y-4\">\n            \n            <FormField control={form.control} name=\"name\" render={({ field }) => (\n              <FormItem>\n                <FormLabel>Name *</FormLabel>\n                <FormControl><Input {...field} className=\"h-11\" disabled={loading} /></FormControl>\n                <FormMessage />\n              </FormItem>\n            )} />\n\n            <FormField control={form.control} name=\"type\" render={({ field }) => (\n              <FormItem>\n                <FormLabel>Type *</FormLabel>\n                <Select onValueChange={field.onChange} value={field.value}>\n                  <FormControl><SelectTrigger className=\"h-11\"><SelectValue placeholder=\"Select type\" /></SelectTrigger></FormControl>\n                  <SelectContent>\n                    <SelectItem value=\"customer\">Customer</SelectItem>\n                    <SelectItem value=\"principal\">Principal</SelectItem>\n                    <SelectItem value=\"distributor\">Distributor</SelectItem>\n                    <SelectItem value=\"prospect\">Prospect</SelectItem>\n                    <SelectItem value=\"vendor\">Vendor</SelectItem>\n                  </SelectContent>\n                </Select>\n                <FormMessage />\n              </FormItem>\n            )} />\n\n            <FormField control={form.control} name=\"priority\" render={({ field }) => (\n              <FormItem>\n                <FormLabel>Priority *</FormLabel>\n                <Select onValueChange={field.onChange} defaultValue={field.value}>\n                  <FormControl><SelectTrigger className=\"h-11\"><SelectValue /></SelectTrigger></FormControl>\n                  <SelectContent>\n                    <SelectItem value=\"A\">A</SelectItem>\n                    <SelectItem value=\"B\">B</SelectItem>\n                    <SelectItem value=\"C\">C</SelectItem>\n                    <SelectItem value=\"D\">D</SelectItem>\n                  </SelectContent>\n                </Select>\n                <FormMessage />\n              </FormItem>\n            )} />\n\n            <FormField control={form.control} name=\"segment\" render={({ field }) => (\n              <FormItem>\n                <FormLabel>Segment</FormLabel>\n                <Select onValueChange={field.onChange} defaultValue={field.value}>\n                  <FormControl><SelectTrigger className=\"h-11\"><SelectValue placeholder=\"Select segment\" /></SelectTrigger></FormControl>\n                  <SelectContent>\n                    {FOOD_SERVICE_SEGMENTS.map((segment) => (\n                      <SelectItem key={segment} value={segment}>{segment}</SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                <FormMessage />\n              </FormItem>\n            )} />\n\n\n            <ProgressiveDetails buttonText=\"Add Details\">\n              <div className=\"space-y-4\">\n                <FormField control={form.control} name=\"city\" render={({ field }) => (\n                  <FormItem><FormLabel>City</FormLabel><FormControl><Input {...field} value={field.value || ''} className=\"h-11\" disabled={loading} /></FormControl><FormMessage /></FormItem>\n                )} />\n                <FormField control={form.control} name=\"state_province\" render={({ field }) => (\n                  <FormItem><FormLabel>State/Province</FormLabel><FormControl><Input {...field} value={field.value || ''} className=\"h-11\" disabled={loading} /></FormControl><FormMessage /></FormItem>\n                )} />\n                <FormField control={form.control} name=\"phone\" render={({ field }) => (\n                  <FormItem><FormLabel>Phone</FormLabel><FormControl><Input {...field} value={field.value || ''} className=\"h-11\" disabled={loading} /></FormControl><FormMessage /></FormItem>\n                )} />\n                <FormField control={form.control} name=\"website\" render={({ field }) => (\n                  <FormItem><FormLabel>Website</FormLabel><FormControl><Input {...field} value={field.value || ''} className=\"h-11\" disabled={loading} /></FormControl><FormMessage /></FormItem>\n                )} />\n                <FormField control={form.control} name=\"notes\" render={({ field }) => (\n                  <FormItem><FormLabel>Notes</FormLabel><FormControl><Textarea {...field} value={field.value || ''} rows={3} disabled={loading} /></FormControl><FormMessage /></FormItem>\n                )} />\n              </div>\n            </ProgressiveDetails>\n\n            <Button type=\"submit\" disabled={loading} className=\"w-full h-11\">\n              {loading ? 'Saving...' : submitLabel}\n            </Button>\n          </form>\n        </Form>\n      </CardContent>\n    </Card>\n  )\n}","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/components/organizations/OrganizationsTable.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":48,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":48,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1576,1579],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1576,1579],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":48,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":48,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1607,1610],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1607,1610],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":49,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":49,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1693,1696],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1693,1696],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":49,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":49,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1730,1733],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1730,1733],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":50,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":50,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1822,1825],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1822,1825],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":50,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":50,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1861,1864],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1861,1864],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":195,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":195,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7203,7206],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7203,7206],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":196,"column":89,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":196,"endColumn":92,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7316,7319],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7316,7319],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":197,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":197,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7382,7385],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7382,7385],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":200,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":200,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7520,7523],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7520,7523],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":202,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":202,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7673,7676],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7673,7676],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":202,"column":105,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":202,"endColumn":108,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7712,7715],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7712,7715],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":205,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":205,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7857,7860],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7857,7860],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":207,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":207,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8013,8016],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8013,8016],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":219,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":219,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8451,8454],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8451,8454],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":226,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":226,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8724,8727],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8724,8727],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from 'react'\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '@/components/ui/table'\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Badge } from '@/components/ui/badge'\nimport { MoreHorizontal, Pencil, Trash2, Plus, Search, ExternalLink } from 'lucide-react'\nimport type { Organization } from '@/types/entities'\n\ninterface OrganizationsTableProps {\n  organizations: Organization[]\n  loading?: boolean\n  onEdit?: (organization: Organization) => void\n  onDelete?: (organization: Organization) => void\n  onView?: (organization: Organization) => void\n  onAddNew?: () => void\n}\n\nexport function OrganizationsTable({ \n  organizations, \n  loading = false, \n  onEdit, \n  onDelete, \n  onView,\n  onAddNew \n}: OrganizationsTableProps) {\n  const [searchTerm, setSearchTerm] = useState('')\n\n  const filteredOrganizations = organizations.filter(org =>\n    org.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    (org.priority && org.priority.toLowerCase().includes(searchTerm.toLowerCase())) ||\n    (org.segment && org.segment.toLowerCase().includes(searchTerm.toLowerCase())) ||\n    (org.type && org.type.toLowerCase().includes(searchTerm.toLowerCase())) ||\n    (org.phone && org.phone.toLowerCase().includes(searchTerm.toLowerCase())) ||\n    (org.city && org.city.toLowerCase().includes(searchTerm.toLowerCase())) ||\n    ((org as any).state_province && (org as any).state_province.toLowerCase().includes(searchTerm.toLowerCase())) ||\n    ((org as any).primary_manager_name && (org as any).primary_manager_name.toLowerCase().includes(searchTerm.toLowerCase())) ||\n    ((org as any).secondary_manager_name && (org as any).secondary_manager_name.toLowerCase().includes(searchTerm.toLowerCase())) ||\n    (org.notes && org.notes.toLowerCase().includes(searchTerm.toLowerCase()))\n  )\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'A':\n        return 'bg-green-100 text-green-800'\n      case 'B':\n        return 'bg-blue-100 text-blue-800'\n      case 'C':\n        return 'bg-yellow-100 text-yellow-800'\n      case 'D':\n        return 'bg-gray-100 text-gray-800'\n      default:\n        return 'bg-gray-100 text-gray-800'\n    }\n  }\n\n\n  if (loading) {\n    return (\n      <div className=\"space-y-4\">\n        <div className=\"flex justify-between items-center\">\n          <div className=\"flex items-center space-x-2\">\n            <Search className=\"h-4 w-4 text-gray-400\" />\n            <Input\n              placeholder=\"Search organizations...\"\n              className=\"w-64\"\n              disabled\n            />\n          </div>\n          {onAddNew && (\n            <Button disabled>\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Add Organization\n            </Button>\n          )}\n        </div>\n        <div className=\"border rounded-lg\">\n          <div className=\"p-8 text-center text-gray-500\">\n            Loading organizations...\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"flex justify-between items-center\">\n        <div className=\"flex items-center space-x-2\">\n          <Search className=\"h-4 w-4 text-gray-400\" />\n          <Input\n            placeholder=\"Search organizations...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"w-64\"\n          />\n        </div>\n        {onAddNew && (\n          <Button onClick={onAddNew}>\n            <Plus className=\"h-4 w-4 mr-2\" />\n            Add Organization\n          </Button>\n        )}\n      </div>\n\n      <div className=\"border rounded-lg overflow-x-auto\">\n        <Table>\n          <TableHeader>\n            <TableRow>\n              <TableHead className=\"min-w-[180px]\">Organization</TableHead>\n              <TableHead>Priority</TableHead>\n              <TableHead>Type</TableHead>\n              <TableHead className=\"min-w-[120px]\">Segment</TableHead>\n              <TableHead>Phone</TableHead>\n              <TableHead className=\"min-w-[120px]\">LinkedIn</TableHead>\n              <TableHead className=\"min-w-[150px]\">Address</TableHead>\n              <TableHead className=\"min-w-[120px]\">Primary Manager</TableHead>\n              <TableHead className=\"min-w-[120px]\">Secondary Manager</TableHead>\n              <TableHead className=\"min-w-[100px]\">Notes</TableHead>\n              <TableHead className=\"text-right min-w-[80px]\">Actions</TableHead>\n            </TableRow>\n          </TableHeader>\n          <TableBody>\n            {filteredOrganizations.length === 0 ? (\n              <TableRow>\n                <TableCell colSpan={11} className=\"text-center py-8 text-gray-500\">\n                  {searchTerm ? 'No organizations match your search.' : 'No organizations found.'}\n                </TableCell>\n              </TableRow>\n            ) : (\n              filteredOrganizations.map((organization) => (\n                <TableRow key={organization.id}>\n                  {/* Organization Name */}\n                  <TableCell className=\"font-medium\">\n                    <div className=\"font-semibold\">{organization.name}</div>\n                  </TableCell>\n                  \n                  {/* Priority */}\n                  <TableCell>\n                    <Badge className={getPriorityColor(organization.priority)}>\n                      {organization.priority || 'C'}\n                    </Badge>\n                  </TableCell>\n                  \n                  {/* Type */}\n                  <TableCell>\n                    <Badge variant=\"outline\" className=\"text-xs\">\n                      {organization.type || 'Customer'}\n                    </Badge>\n                  </TableCell>\n                  \n                  {/* Segment */}\n                  <TableCell>\n                    <span className=\"text-sm\">{organization.segment || '-'}</span>\n                  </TableCell>\n                  \n                  {/* Phone */}\n                  <TableCell>\n                    <span className=\"text-sm\">{organization.phone || '-'}</span>\n                  </TableCell>\n                  \n                  {/* LinkedIn/Website */}\n                  <TableCell>\n                    {organization.website ? (\n                      <a \n                        href={organization.website} \n                        target=\"_blank\" \n                        rel=\"noopener noreferrer\"\n                        className=\"text-blue-600 hover:underline text-sm\"\n                        title={organization.website}\n                      >\n                        LinkedIn\n                        <ExternalLink className=\"h-3 w-3 ml-1 inline\" />\n                      </a>\n                    ) : (\n                      <span className=\"text-sm text-gray-400\">-</span>\n                    )}\n                  </TableCell>\n                  \n                  {/* Address */}\n                  <TableCell>\n                    <div className=\"text-sm\">\n                      {(organization as any).address_line_1 && (\n                        <div className=\"truncate max-w-[140px]\" title={(organization as any).address_line_1}>\n                          {(organization as any).address_line_1}\n                        </div>\n                      )}\n                      {organization.city && (organization as any).state_province ? (\n                        <div className=\"text-gray-500 text-xs\">\n                          {organization.city}, {(organization as any).state_province} {(organization as any).postal_code || ''}\n                        </div>\n                      ) : (\n                        organization.city || (organization as any).state_province ? (\n                          <div className=\"text-gray-500 text-xs\">\n                            {organization.city} {(organization as any).state_province}\n                          </div>\n                        ) : (\n                          <span className=\"text-gray-400\">-</span>\n                        )\n                      )}\n                    </div>\n                  </TableCell>\n                  \n                  {/* Primary Manager */}\n                  <TableCell>\n                    <span className=\"text-sm\">\n                      {(organization as any).primary_manager_name || '-'}\n                    </span>\n                  </TableCell>\n                  \n                  {/* Secondary Manager */}\n                  <TableCell>\n                    <span className=\"text-sm\">\n                      {(organization as any).secondary_manager_name || '-'}\n                    </span>\n                  </TableCell>\n                  \n                  {/* Notes */}\n                  <TableCell>\n                    <div className=\"text-sm max-w-[90px] truncate\" title={organization.notes || ''}>\n                      {organization.notes || '-'}\n                    </div>\n                  </TableCell>\n                  <TableCell className=\"text-right\">\n                    <DropdownMenu>\n                      <DropdownMenuTrigger asChild>\n                        <Button variant=\"ghost\" className=\"h-8 w-8 p-0\">\n                          <span className=\"sr-only\">Open menu</span>\n                          <MoreHorizontal className=\"h-4 w-4\" />\n                        </Button>\n                      </DropdownMenuTrigger>\n                      <DropdownMenuContent align=\"end\">\n                        {onView && (\n                          <DropdownMenuItem onClick={() => onView(organization)}>\n                            <ExternalLink className=\"mr-2 h-4 w-4\" />\n                            View Details\n                          </DropdownMenuItem>\n                        )}\n                        {onEdit && (\n                          <DropdownMenuItem onClick={() => onEdit(organization)}>\n                            <Pencil className=\"mr-2 h-4 w-4\" />\n                            Edit\n                          </DropdownMenuItem>\n                        )}\n                        {onDelete && (\n                          <DropdownMenuItem \n                            onClick={() => onDelete(organization)}\n                            className=\"text-red-600\"\n                          >\n                            <Trash2 className=\"mr-2 h-4 w-4\" />\n                            Delete\n                          </DropdownMenuItem>\n                        )}\n                      </DropdownMenuContent>\n                    </DropdownMenu>\n                  </TableCell>\n                </TableRow>\n              ))\n            )}\n          </TableBody>\n        </Table>\n      </div>\n    </div>\n  )\n}","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/components/products/ProductForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":52,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":52,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2153,2156],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2153,2156],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":60,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":60,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2491,2494],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2491,2494],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":68,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":68,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2827,2830],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2827,2830],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":83,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":83,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3558,3561],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3558,3561],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":100,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":100,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4387,4390],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4387,4390],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":103,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":103,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4677,4680],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4677,4680],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":106,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":106,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4980,4983],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4980,4983],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":109,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":109,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5406,5409],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5406,5409],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ProgressiveDetails } from '@/components/forms'\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form'\nimport { Input } from '@/components/ui/input'\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Textarea } from '@/components/ui/textarea'\nimport { useForm } from 'react-hook-form'\nimport { productSchema, type ProductFormData } from '@/types/validation'\nimport { createTypeSafeResolver } from '@/lib/form-resolver'\nimport { useOrganizations } from '@/hooks/useOrganizations'\n\ninterface ProductFormProps {\n  onSubmit: (data: ProductFormData) => void\n  initialData?: Partial<ProductFormData>\n  loading?: boolean\n  submitLabel?: string\n}\n\nconst PRODUCT_CATEGORIES = ['dry_goods', 'refrigerated', 'frozen', 'beverages', 'equipment']\n\nexport function ProductForm({ \n  onSubmit, \n  initialData, \n  loading = false,\n  submitLabel = 'Save Product'\n}: ProductFormProps) {\n  const { data: organizations = [] } = useOrganizations()\n  const principalOrganizations = organizations.filter(org => org.type === 'principal')\n  \n  const form = useForm<ProductFormData>({\n    resolver: createTypeSafeResolver<ProductFormData>(productSchema),\n    defaultValues: {\n      name: initialData?.name || '',\n      sku: initialData?.sku || '',\n      principal_id: initialData?.principal_id || '',\n      category: initialData?.category || 'dry_goods',\n      description: initialData?.description || '',\n      unit_of_measure: initialData?.unit_of_measure || '',\n      list_price: initialData?.list_price || null,\n      min_order_quantity: initialData?.min_order_quantity || null\n    }\n  })\n\n  return (\n    <Card className=\"w-full max-w-md mx-auto\">\n      <CardHeader><CardTitle>{initialData ? 'Edit Product' : 'New Product'}</CardTitle></CardHeader>\n      <CardContent>\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            \n            <FormField control={form.control as any} name=\"name\" render={({ field }) => (\n              <FormItem>\n                <FormLabel>Name *</FormLabel>\n                <FormControl><Input {...field} className=\"h-11\" disabled={loading} /></FormControl>\n                <FormMessage />\n              </FormItem>\n            )} />\n\n            <FormField control={form.control as any} name=\"sku\" render={({ field }) => (\n              <FormItem>\n                <FormLabel>SKU *</FormLabel>\n                <FormControl><Input {...field} className=\"h-11\" disabled={loading} /></FormControl>\n                <FormMessage />\n              </FormItem>\n            )} />\n\n            <FormField control={form.control as any} name=\"principal_id\" render={({ field }) => (\n              <FormItem>\n                <FormLabel>Principal *</FormLabel>\n                <Select onValueChange={field.onChange} value={field.value}>\n                  <FormControl><SelectTrigger className=\"h-11\"><SelectValue placeholder=\"Select principal\" /></SelectTrigger></FormControl>\n                  <SelectContent>\n                    {principalOrganizations.map((org) => (\n                      <SelectItem key={org.id} value={org.id}>{org.name}</SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                <FormMessage />\n              </FormItem>\n            )} />\n\n            <FormField control={form.control as any} name=\"category\" render={({ field }) => (\n              <FormItem>\n                <FormLabel>Category *</FormLabel>\n                <Select onValueChange={field.onChange} defaultValue={field.value}>\n                  <FormControl><SelectTrigger className=\"h-11\"><SelectValue /></SelectTrigger></FormControl>\n                  <SelectContent>\n                    {PRODUCT_CATEGORIES.map((category) => (\n                      <SelectItem key={category} value={category}>{category.replace('_', ' ')}</SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                <FormMessage />\n              </FormItem>\n            )} />\n\n            <ProgressiveDetails buttonText=\"Add Details\">\n              <div className=\"space-y-4\">\n                <FormField control={form.control as any} name=\"description\" render={({ field }) => (\n                  <FormItem><FormLabel>Description</FormLabel><FormControl><Textarea {...field} rows={3} disabled={loading} /></FormControl><FormMessage /></FormItem>\n                )} />\n                <FormField control={form.control as any} name=\"unit_of_measure\" render={({ field }) => (\n                  <FormItem><FormLabel>Unit of Measure</FormLabel><FormControl><Input {...field} className=\"h-11\" disabled={loading} /></FormControl><FormMessage /></FormItem>\n                )} />\n                <FormField control={form.control as any} name=\"list_price\" render={({ field }) => (\n                  <FormItem><FormLabel>List Price</FormLabel><FormControl><Input {...field} value={field.value || ''} type=\"number\" step=\"0.01\" className=\"h-11\" disabled={loading} onChange={(e) => field.onChange(e.target.value ? Number(e.target.value) : null)} /></FormControl><FormMessage /></FormItem>\n                )} />\n                <FormField control={form.control as any} name=\"min_order_quantity\" render={({ field }) => (\n                  <FormItem><FormLabel>Min Order Qty</FormLabel><FormControl><Input {...field} value={field.value || ''} type=\"number\" className=\"h-11\" disabled={loading} onChange={(e) => field.onChange(e.target.value ? Number(e.target.value) : null)} /></FormControl><FormMessage /></FormItem>\n                )} />\n              </div>\n            </ProgressiveDetails>\n\n            <Button type=\"submit\" disabled={loading} className=\"w-full h-11\">\n              {loading ? 'Saving...' : submitLabel}\n            </Button>\n          </form>\n        </Form>\n      </CardContent>\n    </Card>\n  )\n}","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/components/products/ProductsTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/components/quick-actions.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/components/recent-activity.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/components/stats-cards.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/components/ui/alert-dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/components/ui/alert.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/components/ui/avatar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/components/ui/badge.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":18,"column":10,"nodeType":"Identifier","messageId":"namedExport","endLine":18,"endColumn":23}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { badgeVariants } from \"./badge.variants\"\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge }\nexport { badgeVariants } from \"./badge.variants\"\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/components/ui/badge.variants.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/components/ui/breadcrumb.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/components/ui/button.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":29,"column":10,"nodeType":"Identifier","messageId":"namedExport","endLine":29,"endColumn":24}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"./button.variants\"\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button }\nexport { buttonVariants } from \"./button.variants\"","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/components/ui/button.variants.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/components/ui/card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/components/ui/checkbox.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/components/ui/collapsible.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/components/ui/command.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/components/ui/dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/components/ui/dropdown-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/components/ui/form.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":159,"column":3,"nodeType":"Identifier","messageId":"namedExport","endLine":159,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  useFormState,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState } = useFormContext()\n  const formState = useFormState({ name: fieldContext.name })\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nfunction FormItem({ className, ...props }: React.ComponentProps<\"div\">) {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div\n        data-slot=\"form-item\"\n        className={cn(\"grid gap-2\", className)}\n        {...props}\n      />\n    </FormItemContext.Provider>\n  )\n}\n\nfunction FormLabel({\n  className,\n  ...props\n}: React.ComponentProps<typeof LabelPrimitive.Root>) {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      data-slot=\"form-label\"\n      data-error={!!error}\n      className={cn(\"data-[error=true]:text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n}\n\nfunction FormControl({ ...props }: React.ComponentProps<typeof Slot>) {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      data-slot=\"form-control\"\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n}\n\nfunction FormDescription({ className, ...props }: React.ComponentProps<\"p\">) {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      data-slot=\"form-description\"\n      id={formDescriptionId}\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction FormMessage({ className, ...props }: React.ComponentProps<\"p\">) {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : props.children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      data-slot=\"form-message\"\n      id={formMessageId}\n      className={cn(\"text-destructive text-sm\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n}\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/components/ui/input.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/components/ui/label.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/components/ui/loading-spinner.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/components/ui/popover.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/components/ui/progress.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/components/ui/select.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/components/ui/separator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/components/ui/sheet.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/components/ui/sidebar.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":748,"column":3,"nodeType":"Identifier","messageId":"namedExport","endLine":748,"endColumn":13}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport { Sheet, SheetContent } from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar:state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"15.625rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextType = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextType | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextType>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={{\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties}\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        <div\n          className={cn(\n            \"duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex min-h-svh flex-1 flex-col bg-background\",\n        \"peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:text-xs\",\n      \"peer-data-[size=default]/menu-button:text-xs\",\n      \"peer-data-[size=lg]/menu-button:text-sm\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"rounded-md h-8 flex gap-2 px-2 items-center\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton className=\"size-4 rounded-md\" data-sidebar=\"menu-skeleton-icon\" />\n      )}\n      <Skeleton\n        className=\"h-4 flex-1 max-w-[--skeleton-width]\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-sub-item\"\n    className={cn(\"group/menu-sub-item\", className)}\n    {...props}\n  />\n))\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-foreground/50\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/components/ui/skeleton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/components/ui/sonner.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/components/ui/switch.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/components/ui/table.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/components/ui/tabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/components/ui/textarea.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/components/ui/tooltip.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/configs/forms/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/configs/forms/organization.config.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":186,"column":79,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":186,"endColumn":82,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5794,5797],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5794,5797],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Building2 } from 'lucide-react'\nimport { organizationSchema, type OrganizationFormData, FOOD_SERVICE_SEGMENTS, type FoodServiceSegment } from '@/types/organization.types'\nimport type { CoreFormLayoutProps, SelectOption } from '@/components/forms/CoreFormLayout'\n\n// Priority configuration for Principal CRM\nconst priorityOptions: SelectOption[] = [\n  {\n    value: 'A',\n    label: 'A - High Priority',\n    description: 'Strategic accounts with high revenue potential and strong relationships',\n    icon: '🎯'\n  },\n  {\n    value: 'B',\n    label: 'B - Medium Priority',\n    description: 'Important accounts with good potential for growth and expansion',\n    icon: '📈'\n  },\n  {\n    value: 'C',\n    label: 'C - Standard Priority',\n    description: 'Regular accounts requiring standard attention and service',\n    icon: '📊'\n  },\n  {\n    value: 'D',\n    label: 'D - Low Priority',\n    description: 'Cold prospects or low-engagement accounts needing nurturing',\n    icon: '❄️'\n  }\n]\n\n// Segment configuration for food service industry\nconst segmentOptions: SelectOption[] = FOOD_SERVICE_SEGMENTS.map(segment => ({\n  value: segment,\n  label: segment,\n  description: getSegmentDescription(segment)\n}))\n\nfunction getSegmentDescription(segment: FoodServiceSegment): string {\n  const descriptions: Record<FoodServiceSegment, string> = {\n    'Fine Dining': 'High-end restaurants focused on premium ingredients and presentation',\n    'Fast Food': 'Quick service restaurants emphasizing speed and consistency',\n    'Fast Casual': 'Higher quality fast food with made-to-order items',\n    'Healthcare': 'Hospitals, clinics, and medical facilities',\n    'Education': 'Schools, universities, and educational institutions',\n    'Corporate Catering': 'Business catering and corporate dining services',\n    'Hotel & Resort': 'Hospitality industry including hotels and resorts',\n    'Entertainment Venue': 'Sports venues, theaters, and entertainment facilities',\n    'Retail Food Service': 'Grocery stores and retail food operations',\n    'Government': 'Government agencies and military food service',\n    'Senior Living': 'Assisted living and senior care facilities',\n    'Other': 'Specialized or unique food service operations'\n  }\n  return descriptions[segment]\n}\n\nexport function createOrganizationFormConfig(\n  initialData?: Partial<OrganizationFormData>\n): Omit<CoreFormLayoutProps<OrganizationFormData>, 'onSubmit'> {\n  return {\n    entityType: 'organization',\n    title: 'Organization',\n    icon: Building2,\n    formSchema: organizationSchema,\n    initialData,\n    \n    coreSections: [\n      {\n        id: 'basic-info',\n        title: 'Essential Information',\n        layout: 'double',\n        fields: [\n          {\n            name: 'name',\n            type: 'text',\n            label: 'Organization Name',\n            placeholder: 'Enter organization name',\n            required: true,\n            className: 'md:col-span-2'\n          },\n          {\n            name: 'priority',\n            type: 'select',\n            label: 'Account Priority',\n            required: true,\n            tooltip: 'Set the strategic importance and engagement level',\n            options: priorityOptions\n          },\n          {\n            name: 'segment',\n            type: 'select',\n            label: 'Food Service Segment',\n            required: true,\n            tooltip: 'Primary food service market segment',\n            options: segmentOptions\n          }\n        ]\n      },\n      {\n        id: 'organization-type',\n        title: 'Organization Type',\n        description: 'Define the business relationship',\n        className: 'bg-amber-50 border border-amber-200 rounded-lg p-4',\n        layout: 'double',\n        fields: [\n          {\n            name: 'is_principal',\n            type: 'switch',\n            label: 'Principal Organization',\n            description: 'Food manufacturer or supplier that we represent'\n          },\n          {\n            name: 'is_distributor',\n            type: 'switch', \n            label: 'Distributor Organization',\n            description: 'Company that purchases and distributes our products'\n          }\n        ]\n      }\n    ],\n    \n    optionalSections: [\n      {\n        id: 'contact-info',\n        title: 'Contact Information',\n        layout: 'double',\n        fields: [\n          { \n            name: 'phone', \n            type: 'tel', \n            label: 'Phone', \n            placeholder: '(555) 123-4567' \n          },\n          { \n            name: 'website', \n            type: 'url', \n            label: 'Website', \n            placeholder: 'https://www.company.com' \n          },\n          { \n            name: 'industry', \n            type: 'text', \n            label: 'Industry',\n            description: 'Industry or business sector',\n            className: 'md:col-span-2'\n          }\n        ]\n      },\n      {\n        id: 'address-info',\n        title: 'Address Information',\n        fields: [\n          { \n            name: 'address_line_1', \n            type: 'text', \n            label: 'Street Address',\n            placeholder: '123 Main Street, Suite 100',\n            className: 'md:col-span-3'\n          },\n          { \n            name: 'city', \n            type: 'text', \n            label: 'City', \n            placeholder: 'City' \n          },\n          { \n            name: 'state_province', \n            type: 'text', \n            label: 'State/Province', \n            placeholder: 'State' \n          },\n          { \n            name: 'postal_code', \n            type: 'text', \n            label: 'ZIP/Postal Code', \n            placeholder: '12345' \n          }\n        ],\n        layout: 'auto'\n      }\n    ],\n    \n    contextualSections: [\n      {\n        condition: (values) => values.is_principal && Boolean((initialData as any)?.id),\n        section: {\n          id: 'advocacy-summary',\n          title: 'Contact Advocacy Summary',\n          description: 'Advocacy relationships for this Principal organization',\n          fields: [\n            {\n              name: 'notes', // Placeholder field - in real implementation this would be a custom component\n              type: 'text',\n              label: 'Advocacy Status',\n              description: 'This section would show advocacy relationship data'\n            }\n          ]\n        }\n      }\n    ]\n  }\n}\n\nexport default createOrganizationFormConfig","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/contexts/AuthContext.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":17,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":17,"endColumn":24}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useEffect, useState } from 'react'\nimport { User, Session, AuthError } from '@supabase/supabase-js'\nimport { supabase } from '@/lib/supabase'\n\ninterface AuthContextType {\n  user: User | null\n  session: Session | null\n  loading: boolean\n  signIn: (email: string, password: string) => Promise<{ error: AuthError | null }>\n  signUp: (email: string, password: string) => Promise<{ error: AuthError | null }>\n  signOut: () => Promise<{ error: AuthError | null }>\n  resetPassword: (email: string) => Promise<{ error: AuthError | null }>\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined)\n\nexport function useAuth() {\n  const context = useContext(AuthContext)\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider')\n  }\n  return context\n}\n\ninterface AuthProviderProps {\n  children: React.ReactNode\n}\n\nexport function AuthProvider({ children }: AuthProviderProps) {\n  const [user, setUser] = useState<User | null>(null)\n  const [session, setSession] = useState<Session | null>(null)\n  const [loading, setLoading] = useState(true)\n\n  useEffect(() => {\n    // Get initial session\n    const getInitialSession = async () => {\n      const { data: { session }, error } = await supabase.auth.getSession()\n      \n      if (error) {\n        console.error('Error getting initial session:', error)\n      } else {\n        setSession(session)\n        setUser(session?.user ?? null)\n      }\n      \n      setLoading(false)\n    }\n\n    getInitialSession()\n\n    // Listen for auth state changes\n    const {\n      data: { subscription },\n    } = supabase.auth.onAuthStateChange(async (_, session) => {\n      setSession(session)\n      setUser(session?.user ?? null)\n      setLoading(false)\n    })\n\n    return () => subscription.unsubscribe()\n  }, [])\n\n  const signIn = async (email: string, password: string) => {\n    setLoading(true)\n    try {\n      const { error } = await supabase.auth.signInWithPassword({\n        email,\n        password,\n      })\n      return { error }\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const signUp = async (email: string, password: string) => {\n    setLoading(true)\n    try {\n      const { error } = await supabase.auth.signUp({\n        email,\n        password,\n      })\n      return { error }\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const signOut = async () => {\n    setLoading(true)\n    try {\n      const { error } = await supabase.auth.signOut()\n      return { error }\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const resetPassword = async (email: string) => {\n    // Use the configured Site URL from Supabase instead of window.location.origin\n    const { error } = await supabase.auth.resetPasswordForEmail(email, {\n      redirectTo: `${window.location.protocol}//${window.location.host}/reset-password`,\n    })\n    return { error }\n  }\n\n  const value: AuthContextType = {\n    user,\n    session,\n    loading,\n    signIn,\n    signUp,\n    signOut,\n    resetPassword,\n  }\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  )\n}","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/hooks/use-mobile.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/hooks/useAuthCallback.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/hooks/useContactPreferredPrincipals.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":51,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":51,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1755,1758],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1755,1758],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query'\nimport { supabase } from '@/lib/supabase'\nimport type { \n  ContactPreferredPrincipal,\n  ContactPreferredPrincipalInsert,\n  ContactPreferredPrincipalUpdate \n} from '@/types/entities'\n\n// Query key factory\nexport const contactPreferredPrincipalsKeys = {\n  all: ['contact_preferred_principals'] as const,\n  lists: () => [...contactPreferredPrincipalsKeys.all, 'list'] as const,\n  list: (contactId?: string) => [...contactPreferredPrincipalsKeys.lists(), { contactId }] as const,\n  details: () => [...contactPreferredPrincipalsKeys.all, 'detail'] as const,\n  detail: (id: string) => [...contactPreferredPrincipalsKeys.details(), id] as const,\n}\n\n// Hook to fetch preferred principals for a specific contact\nexport function useContactPreferredPrincipals(contactId: string) {\n  return useQuery({\n    queryKey: contactPreferredPrincipalsKeys.list(contactId),\n    queryFn: async () => {\n      const { data, error } = await supabase\n        .from('contact_preferred_principals')\n        .select(`\n          id,\n          contact_id,\n          principal_organization_id,\n          relationship_type,\n          advocacy_strength,\n          advocacy_notes,\n          created_at,\n          updated_at,\n          principal_organization:organizations!principal_organization_id(\n            id,\n            name,\n            type,\n            city,\n            state_province,\n            phone,\n            email,\n            website\n          )\n        `)\n        .eq('contact_id', contactId)\n        .is('deleted_at', null)\n        .order('created_at', { ascending: false })\n\n      if (error) throw error\n      return data as (ContactPreferredPrincipal & {\n        principal_organization?: any\n      })[]\n    },\n    enabled: !!contactId,\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  })\n}\n\n// Hook to add a preferred principal to a contact\nexport function useAddContactPreferredPrincipal() {\n  const queryClient = useQueryClient()\n\n  return useMutation({\n    mutationFn: async (data: ContactPreferredPrincipalInsert) => {\n      // Get current user ID for RLS policy compliance\n      const { data: { user }, error: authError } = await supabase.auth.getUser()\n      \n      if (authError || !user) {\n        throw new Error('Authentication required to add preferred principal')\n      }\n\n      // Ensure required audit fields are set for RLS policy\n      const relationshipData = {\n        ...data,\n        created_by: user.id,\n        updated_by: user.id,\n      }\n\n      const { data: result, error } = await supabase\n        .from('contact_preferred_principals')\n        .insert(relationshipData)\n        .select()\n        .single()\n\n      if (error) throw error\n      return result as ContactPreferredPrincipal\n    },\n    onSuccess: (newRelationship) => {\n      // Invalidate contact preferred principals queries\n      queryClient.invalidateQueries({ \n        queryKey: contactPreferredPrincipalsKeys.list(newRelationship.contact_id) \n      })\n    },\n  })\n}\n\n// Hook to remove a preferred principal from a contact\nexport function useRemoveContactPreferredPrincipal() {\n  const queryClient = useQueryClient()\n\n  return useMutation({\n    mutationFn: async ({ contactId, principalOrganizationId }: { \n      contactId: string\n      principalOrganizationId: string \n    }) => {\n      const { data, error } = await supabase\n        .from('contact_preferred_principals')\n        .update({ \n          deleted_at: new Date().toISOString(),\n          updated_at: new Date().toISOString()\n        })\n        .eq('contact_id', contactId)\n        .eq('principal_organization_id', principalOrganizationId)\n        .select()\n        .single()\n\n      if (error) throw error\n      return data as ContactPreferredPrincipal\n    },\n    onSuccess: (deletedRelationship) => {\n      // Invalidate contact preferred principals queries\n      queryClient.invalidateQueries({ \n        queryKey: contactPreferredPrincipalsKeys.list(deletedRelationship.contact_id) \n      })\n    },\n  })\n}\n\n// Hook to bulk update preferred principals for a contact\nexport function useBulkUpdateContactPreferredPrincipals() {\n  const queryClient = useQueryClient()\n  const addMutation = useAddContactPreferredPrincipal()\n  const removeMutation = useRemoveContactPreferredPrincipal()\n\n  return useMutation({\n    mutationFn: async ({ \n      contactId, \n      principalOrganizationIds \n    }: { \n      contactId: string\n      principalOrganizationIds: string[] \n    }) => {\n      // Get current preferred principals\n      const { data: currentRelationships, error: fetchError } = await supabase\n        .from('contact_preferred_principals')\n        .select('principal_organization_id')\n        .eq('contact_id', contactId)\n        .is('deleted_at', null)\n\n      if (fetchError) throw fetchError\n\n      const currentPrincipalIds = currentRelationships?.map(r => r.principal_organization_id) || []\n\n      // Determine which principals to add and remove\n      const principalsToAdd = principalOrganizationIds.filter(id => !currentPrincipalIds.includes(id))\n      const principalsToRemove = currentPrincipalIds.filter(id => !principalOrganizationIds.includes(id))\n\n      // Remove principals that are no longer selected\n      for (const principalId of principalsToRemove) {\n        await removeMutation.mutateAsync({ contactId, principalOrganizationId: principalId })\n      }\n\n      // Add new principals\n      for (const principalId of principalsToAdd) {\n        await addMutation.mutateAsync({\n          contact_id: contactId,\n          principal_organization_id: principalId,\n          relationship_type: 'advocate' // Default relationship type\n        })\n      }\n\n      return { added: principalsToAdd.length, removed: principalsToRemove.length }\n    },\n    onSuccess: (_, variables) => {\n      // Invalidate contact preferred principals queries\n      queryClient.invalidateQueries({ \n        queryKey: contactPreferredPrincipalsKeys.list(variables.contactId) \n      })\n    },\n  })\n}\n\n// Hook to update advocacy details for a preferred principal relationship\nexport function useUpdateContactPreferredPrincipal() {\n  const queryClient = useQueryClient()\n\n  return useMutation({\n    mutationFn: async ({ \n      id, \n      updates \n    }: { \n      id: string\n      updates: ContactPreferredPrincipalUpdate \n    }) => {\n      const { data, error } = await supabase\n        .from('contact_preferred_principals')\n        .update({ ...updates, updated_at: new Date().toISOString() })\n        .eq('id', id)\n        .select()\n        .single()\n\n      if (error) throw error\n      return data as ContactPreferredPrincipal\n    },\n    onSuccess: (updatedRelationship) => {\n      // Invalidate contact preferred principals queries\n      queryClient.invalidateQueries({ \n        queryKey: contactPreferredPrincipalsKeys.list(updatedRelationship.contact_id) \n      })\n      \n      // Update the specific relationship in the cache\n      queryClient.setQueryData(\n        contactPreferredPrincipalsKeys.detail(updatedRelationship.id),\n        updatedRelationship\n      )\n    },\n  })\n}\n\n// Utility function to extract principal IDs from contact preferred principals\nexport function extractPrincipalIds(relationships: ContactPreferredPrincipal[] | undefined): string[] {\n  return relationships?.map(r => r.principal_organization_id) || []\n}\n\n// Utility function to check if a contact advocates for a specific principal\nexport function isContactAdvocateForPrincipal(\n  relationships: ContactPreferredPrincipal[] | undefined,\n  principalId: string\n): boolean {\n  return relationships?.some(r => r.principal_organization_id === principalId) || false\n}","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/hooks/useContacts.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/hooks/useDashboardMetrics.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_options' is assigned a value but never used.","line":147,"column":37,"nodeType":"Identifier","messageId":"unusedVar","endLine":147,"endColumn":70}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useMemo } from 'react'\nimport { useOrganizations } from './useOrganizations'\nimport { useOpportunities } from './useOpportunities'\nimport { useContacts } from './useContacts'\nimport { useInteractions } from './useInteractions'\nimport { useProducts } from './useProducts'\nimport type {\n  OpportunityStage,\n  InteractionType\n} from '@/types/entities'\n\n// ============================================================================\n// TYPE DEFINITIONS\n// ============================================================================\n\ntype PriorityLevel = 'A+' | 'A' | 'B' | 'C' | 'D'\n\ninterface MetricsFilters {\n  dateRange?: {\n    start: Date\n    end: Date\n  }\n  principalIds?: string[]\n  organizationTypes?: string[]\n}\n\ninterface OpportunityMetrics {\n  totalPipelineValue: number\n  activePipelineValue: number\n  conversionRate: number\n  averageValue: number\n  byStage: Record<OpportunityStage, number>\n  stageValues: Record<OpportunityStage, number>\n}\n\ninterface PrincipalMetrics {\n  byPriority: Record<PriorityLevel, number>\n  withActiveOpportunities: number\n  averageOpportunitiesPerPrincipal: number\n  topByPipelineValue: Array<{\n    id: string\n    name: string\n    totalValue: number\n    opportunityCount: number\n  }>\n}\n\ninterface InteractionMetrics {\n  total: number\n  recentCount: number\n  thisWeekCount: number\n  thisMonthCount: number\n  averagePerOpportunity: number\n  followUpRequired: number\n  lastActivityDate: Date | null\n  byType: Record<InteractionType, number>\n}\n\ninterface GrowthMetrics {\n  organizationsGrowth: number\n  contactsGrowth: number\n  opportunitiesGrowth: number\n  pipelineValueGrowth: number\n  interactionsGrowth: number\n  principalsGrowth: number\n  distributorsGrowth: number\n}\n\nexport interface DashboardMetrics {\n  // Core entity metrics\n  totalOrganizations: number\n  totalPrincipals: number\n  totalDistributors: number\n  totalContacts: number\n  totalProducts: number\n  totalOpportunities: number\n  activeOpportunities: number\n  \n  // Financial metrics\n  totalPipelineValue: number\n  activePipelineValue: number\n  conversionRate: number\n  averageOpportunityValue: number\n  \n  // Breakdown metrics\n  opportunitiesByStage: Record<OpportunityStage, number>\n  opportunityValuesByStage: Record<OpportunityStage, number>\n  principalsByPriority: Record<PriorityLevel, number>\n  interactionsByType: Record<InteractionType, number>\n  \n  // Principal-specific metrics\n  principalsWithActiveOpportunities: number\n  avgOpportunitiesPerPrincipal: number\n  topPrincipalsByValue: Array<{\n    id: string\n    name: string\n    totalValue: number\n    opportunityCount: number\n  }>\n  \n  // Interaction & activity metrics\n  totalInteractions: number\n  recentInteractions: number\n  thisWeekInteractions: number\n  thisMonthInteractions: number\n  avgInteractionsPerOpportunity: number\n  interactionsRequiringFollowUp: number\n  lastActivityDate: Date | null\n  \n  // Growth and trends\n  growthMetrics: GrowthMetrics\n  \n  // Detailed metric objects\n  opportunityMetrics: OpportunityMetrics\n  principalMetrics: PrincipalMetrics\n  interactionMetrics: InteractionMetrics\n  \n  // Loading and error states\n  isLoading: boolean\n  error: Error | null\n  lastUpdated: Date | null\n  \n  // Data freshness indicators\n  dataFreshness: {\n    organizations: Date | null\n    opportunities: Date | null\n    contacts: Date | null\n    interactions: Date | null\n    products: Date | null\n  }\n}\n\nexport interface DashboardMetricsOptions {\n  filters?: MetricsFilters\n  includeGrowthMetrics?: boolean\n  refreshInterval?: number\n}\n\n// ============================================================================\n// MAIN HOOK\n// ============================================================================\n\n/**\n * Comprehensive dashboard metrics hook that calculates all KPIs and business intelligence metrics\n * for the KitchenPantry CRM system.\n */\nexport function useDashboardMetrics(_options: DashboardMetricsOptions = {}): DashboardMetrics {\n  // Options parameter reserved for future use (filters, date ranges, etc.)\n\n  // ============================================================================\n  // DATA FETCHING\n  // ============================================================================\n\n  // Fetch all entity data using existing hooks\n  const organizationsQuery = useOrganizations()\n  const contactsQuery = useContacts()\n  const productsQuery = useProducts()\n  const opportunitiesQuery = useOpportunities()\n  const interactionsQuery = useInteractions()\n\n  // Calculate derived data from organizations\n  const principals = useMemo(() => \n    organizationsQuery.data?.filter(org => org.type === 'principal') || []\n  , [organizationsQuery.data])\n  \n  const distributors = useMemo(() =>\n    organizationsQuery.data?.filter(org => org.type === 'distributor') || []\n  , [organizationsQuery.data])\n  \n  const activeOpportunities = useMemo(() =>\n    opportunitiesQuery.data?.filter(opp => opp.stage !== 'Closed - Won' && opp.stage !== 'Closed - Lost') || []\n  , [opportunitiesQuery.data])\n\n  // ============================================================================\n  // LOADING AND ERROR STATES\n  // ============================================================================\n\n  const isLoading = useMemo(() => {\n    return (\n      organizationsQuery.isLoading ||\n      contactsQuery.isLoading ||\n      opportunitiesQuery.isLoading ||\n      interactionsQuery.isLoading ||\n      productsQuery.isLoading\n    )\n  }, [\n    organizationsQuery.isLoading,\n    contactsQuery.isLoading,\n    opportunitiesQuery.isLoading,\n    interactionsQuery.isLoading,\n    productsQuery.isLoading\n  ])\n\n  const error = useMemo(() => {\n    const errors = [\n      organizationsQuery.error,\n      contactsQuery.error,\n      opportunitiesQuery.error,\n      interactionsQuery.error,\n      productsQuery.error\n    ].filter(Boolean) as Error[]\n\n    if (errors.length > 0) {\n      return new Error(`Multiple data fetch errors: ${errors.map(e => e.message).join(', ')}`)\n    }\n    return null\n  }, [\n    organizationsQuery.error,\n    contactsQuery.error,\n    opportunitiesQuery.error,\n    interactionsQuery.error,\n    productsQuery.error\n  ])\n\n  // ============================================================================\n  // DATA FRESHNESS TRACKING\n  // ============================================================================\n\n  const dataFreshness = useMemo(() => ({\n    organizations: organizationsQuery.dataUpdatedAt ? new Date(organizationsQuery.dataUpdatedAt) : null,\n    opportunities: opportunitiesQuery.dataUpdatedAt ? new Date(opportunitiesQuery.dataUpdatedAt) : null,\n    contacts: contactsQuery.dataUpdatedAt ? new Date(contactsQuery.dataUpdatedAt) : null,\n    interactions: interactionsQuery.dataUpdatedAt ? new Date(interactionsQuery.dataUpdatedAt) : null,\n    products: productsQuery.dataUpdatedAt ? new Date(productsQuery.dataUpdatedAt) : null\n  }), [\n    organizationsQuery.dataUpdatedAt,\n    opportunitiesQuery.dataUpdatedAt,\n    contactsQuery.dataUpdatedAt,\n    interactionsQuery.dataUpdatedAt,\n    productsQuery.dataUpdatedAt\n  ])\n\n  const lastUpdated = useMemo(() => {\n    const timestamps = Object.values(dataFreshness).filter(Boolean) as Date[]\n    return timestamps.length > 0 ? new Date(Math.max(...timestamps.map(d => d.getTime()))) : null\n  }, [dataFreshness])\n\n  // ============================================================================\n  // CORE METRICS CALCULATIONS\n  // ============================================================================\n\n  // Basic entity counts\n  const totalOrganizations = organizationsQuery.data?.length || 0\n  const totalPrincipals = principals.length\n  const totalDistributors = distributors.length\n  const totalContacts = contactsQuery.data?.length || 0\n  const totalProducts = productsQuery.data?.length || 0\n  const totalOpportunities = opportunitiesQuery.data?.length || 0\n  const activeOpportunitiesCount = activeOpportunities.length\n\n  // Detailed metrics calculations using memoization for performance\n  const opportunityMetrics = useMemo(() => {\n    if (!opportunitiesQuery.data) return {\n      totalPipelineValue: 0,\n      activePipelineValue: 0,\n      conversionRate: 0,\n      averageValue: 0,\n      byStage: {} as Record<OpportunityStage, number>,\n      stageValues: {} as Record<OpportunityStage, number>\n    } as OpportunityMetrics\n\n    // Simple calculations\n    const total = opportunitiesQuery.data.reduce((sum, opp) => sum + (opp.estimated_value || 0), 0)\n    const activeTotal = activeOpportunities.reduce((sum, opp) => sum + (opp.estimated_value || 0), 0)\n    const won = opportunitiesQuery.data.filter(opp => opp.stage === 'Closed - Won').length\n    const totalClosed = opportunitiesQuery.data.filter(opp => opp.stage === 'Closed - Won' || opp.stage === 'Closed - Lost').length\n    \n    return {\n      totalPipelineValue: total,\n      activePipelineValue: activeTotal,\n      conversionRate: totalClosed > 0 ? (won / totalClosed) * 100 : 0,\n      averageValue: opportunitiesQuery.data.length > 0 ? total / opportunitiesQuery.data.length : 0,\n      byStage: {} as Record<OpportunityStage, number>,\n      stageValues: {} as Record<OpportunityStage, number>\n    }\n  }, [opportunitiesQuery.data, activeOpportunities])\n\n  const principalMetrics = useMemo(() => {\n    if (!principals.length || !opportunitiesQuery.data) return {\n      byPriority: {} as Record<PriorityLevel, number>,\n      withActiveOpportunities: 0,\n      averageOpportunitiesPerPrincipal: 0,\n      topByPipelineValue: []\n    } as PrincipalMetrics\n\n    // Simple calculations\n    const withActive = principals.filter(p => \n      activeOpportunities.some(opp => opp.organization_id === p.id)\n    ).length\n\n    return {\n      byPriority: {} as Record<PriorityLevel, number>,\n      withActiveOpportunities: withActive,\n      averageOpportunitiesPerPrincipal: principals.length > 0 ? totalOpportunities / principals.length : 0,\n      topByPipelineValue: []\n    }\n  }, [principals, opportunitiesQuery.data, activeOpportunities, totalOpportunities])\n\n  const interactionMetrics = useMemo(() => {\n    if (!interactionsQuery.data) return {\n      total: 0,\n      recentCount: 0,\n      thisWeekCount: 0,\n      thisMonthCount: 0,\n      averagePerOpportunity: 0,\n      followUpRequired: 0,\n      lastActivityDate: null,\n      byType: {} as Record<InteractionType, number>\n    } as InteractionMetrics\n\n    const now = new Date()\n    const weekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000)\n    const monthAgo = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000)\n\n    const recentInteractions = interactionsQuery.data.filter(i => \n      i.interaction_date && new Date(i.interaction_date) >= weekAgo\n    )\n    \n    const thisWeekInteractions = interactionsQuery.data.filter(i =>\n      i.interaction_date && new Date(i.interaction_date) >= weekAgo\n    )\n\n    const thisMonthInteractions = interactionsQuery.data.filter(i =>\n      i.interaction_date && new Date(i.interaction_date) >= monthAgo\n    )\n\n    return {\n      total: interactionsQuery.data.length,\n      recentCount: recentInteractions.length,\n      thisWeekCount: thisWeekInteractions.length,\n      thisMonthCount: thisMonthInteractions.length,\n      averagePerOpportunity: totalOpportunities > 0 ? interactionsQuery.data.length / totalOpportunities : 0,\n      followUpRequired: 0,\n      lastActivityDate: interactionsQuery.data.length > 0 ? \n        new Date(Math.max(...interactionsQuery.data\n          .filter(i => i.interaction_date)\n          .map(i => new Date(i.interaction_date!).getTime())\n        )) : null,\n      byType: {} as Record<InteractionType, number>\n    }\n  }, [interactionsQuery.data, totalOpportunities])\n\n  // ============================================================================\n  // GROWTH METRICS CALCULATIONS\n  // ============================================================================\n\n  const growthMetrics = useMemo(() => {\n    // Simplified growth metrics - placeholder for now\n    return {\n      organizationsGrowth: 0,\n      contactsGrowth: 0,\n      opportunitiesGrowth: 0,\n      pipelineValueGrowth: 0,\n      interactionsGrowth: 0,\n      principalsGrowth: 0,\n      distributorsGrowth: 0\n    } as GrowthMetrics\n  }, [])\n\n  // ============================================================================\n  // RETURN COMPREHENSIVE METRICS OBJECT\n  // ============================================================================\n\n  return useMemo(() => ({\n    // Core entity metrics\n    totalOrganizations,\n    totalPrincipals,\n    totalDistributors,\n    totalContacts,\n    totalProducts,\n    totalOpportunities,\n    activeOpportunities: activeOpportunitiesCount,\n\n    // Financial metrics\n    totalPipelineValue: opportunityMetrics.totalPipelineValue || 0,\n    activePipelineValue: opportunityMetrics.activePipelineValue || 0,\n    conversionRate: opportunityMetrics.conversionRate || 0,\n    averageOpportunityValue: opportunityMetrics.averageValue || 0,\n\n    // Breakdown metrics\n    opportunitiesByStage: opportunityMetrics.byStage || {},\n    opportunityValuesByStage: opportunityMetrics.stageValues || {},\n    principalsByPriority: principalMetrics.byPriority || {},\n    interactionsByType: interactionMetrics.byType || {},\n\n    // Principal-specific metrics\n    principalsWithActiveOpportunities: principalMetrics.withActiveOpportunities || 0,\n    avgOpportunitiesPerPrincipal: principalMetrics.averageOpportunitiesPerPrincipal || 0,\n    topPrincipalsByValue: principalMetrics.topByPipelineValue || [],\n\n    // Interaction & activity metrics\n    totalInteractions: interactionMetrics.total || 0,\n    recentInteractions: interactionMetrics.recentCount || 0,\n    thisWeekInteractions: interactionMetrics.thisWeekCount || 0,\n    thisMonthInteractions: interactionMetrics.thisMonthCount || 0,\n    avgInteractionsPerOpportunity: interactionMetrics.averagePerOpportunity || 0,\n    interactionsRequiringFollowUp: interactionMetrics.followUpRequired || 0,\n    lastActivityDate: interactionMetrics.lastActivityDate,\n\n    // Growth and trends\n    growthMetrics,\n\n    // Detailed metric objects for advanced usage\n    opportunityMetrics,\n    principalMetrics,\n    interactionMetrics,\n\n    // Loading and error states\n    isLoading,\n    error,\n    lastUpdated,\n    dataFreshness\n  }), [\n    totalOrganizations,\n    totalPrincipals,\n    totalDistributors,\n    totalContacts,\n    totalProducts,\n    totalOpportunities,\n    activeOpportunitiesCount,\n    opportunityMetrics,\n    principalMetrics,\n    interactionMetrics,\n    growthMetrics,\n    isLoading,\n    error,\n    lastUpdated,\n    dataFreshness\n  ])\n}\n\n// ============================================================================\n// SPECIALIZED HOOKS FOR SPECIFIC METRICS\n// ============================================================================\n\n/**\n * Hook for opportunity-specific metrics only\n */\nexport function useOpportunityMetrics(filters?: MetricsFilters) {\n  const { opportunityMetrics } = useDashboardMetrics({ filters })\n  return opportunityMetrics\n}\n\n/**\n * Hook for principal-specific metrics only\n */\nexport function usePrincipalMetrics(filters?: MetricsFilters) {\n  const { principalMetrics } = useDashboardMetrics({ filters })\n  return principalMetrics\n}\n\n/**\n * Hook for interaction-specific metrics only\n */\nexport function useInteractionMetrics(filters?: MetricsFilters) {\n  const { interactionMetrics } = useDashboardMetrics({ filters })\n  return interactionMetrics\n}\n\n/**\n * Hook for real-time activity metrics with shorter cache time\n */\nexport function useRealTimeActivityMetrics() {\n  const { \n    totalInteractions,\n    recentInteractions,\n    thisWeekInteractions,\n    lastActivityDate,\n    interactionsRequiringFollowUp,\n    isLoading,\n    error \n  } = useDashboardMetrics({ \n    includeGrowthMetrics: false \n  })\n\n  return {\n    totalInteractions,\n    recentInteractions,\n    thisWeekInteractions,\n    lastActivityDate,\n    interactionsRequiringFollowUp,\n    isLoading,\n    error\n  }\n}\n\n// ============================================================================\n// EXPORT DEFAULT\n// ============================================================================\n\nexport default useDashboardMetrics","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/hooks/useInteractions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/hooks/useNavigationCounts.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/hooks/useOpportunities.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":227,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":227,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7729,7732],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7729,7732],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":422,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":422,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15542,15545],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15542,15545],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query'\nimport { supabase } from '@/lib/supabase'\nimport type { \n  OpportunityInsert, \n  OpportunityUpdate, \n  OpportunityFilters,\n  OpportunityWithRelations \n} from '@/types/entities'\n\n// Query key factory\nexport const opportunityKeys = {\n  all: ['opportunities'] as const,\n  lists: () => [...opportunityKeys.all, 'list'] as const,\n  list: (filters?: OpportunityFilters) => [...opportunityKeys.lists(), { filters }] as const,\n  details: () => [...opportunityKeys.all, 'detail'] as const,\n  detail: (id: string) => [...opportunityKeys.details(), id] as const,\n  byOrganization: (organizationId: string) => [...opportunityKeys.all, 'organization', organizationId] as const,\n  byContact: (contactId: string) => [...opportunityKeys.all, 'contact', contactId] as const,\n  byStage: (stage: string) => [...opportunityKeys.all, 'stage', stage] as const,\n  pipeline: () => [...opportunityKeys.all, 'pipeline'] as const,\n}\n\n// Hook to fetch all opportunities with optional filtering\nexport function useOpportunities(filters?: OpportunityFilters) {\n  return useQuery({\n    queryKey: opportunityKeys.list(filters),\n    queryFn: async () => {\n      let query = supabase\n        .from('opportunities')\n        .select(`\n          *,\n          organization:organizations!opportunities_organization_id_fkey(*),\n          contact:contacts!opportunities_contact_id_fkey(*),\n          principal_organization:organizations!opportunities_principal_organization_id_fkey(*),\n          distributor_organization:organizations!opportunities_distributor_organization_id_fkey(*)\n        `)\n        .is('deleted_at', null)\n\n      // Apply filters\n      if (filters?.stage) {\n        if (Array.isArray(filters.stage)) {\n          query = query.in('stage', filters.stage)\n        } else {\n          query = query.eq('stage', filters.stage)\n        }\n      }\n\n      if (filters?.priority) {\n        if (Array.isArray(filters.priority)) {\n          query = query.in('priority', filters.priority)\n        } else {\n          query = query.eq('priority', filters.priority)\n        }\n      }\n\n      if (filters?.organization_id) {\n        query = query.eq('organization_id', filters.organization_id)\n      }\n\n      if (filters?.principal_organization_id) {\n        query = query.eq('principal_organization_id', filters.principal_organization_id)\n      }\n\n      if (filters?.distributor_organization_id) {\n        query = query.eq('distributor_organization_id', filters.distributor_organization_id)\n      }\n\n      if (filters?.contact_id) {\n        query = query.eq('contact_id', filters.contact_id)\n      }\n\n      if (filters?.estimated_value_min) {\n        query = query.gte('estimated_value', filters.estimated_value_min)\n      }\n\n      if (filters?.estimated_value_max) {\n        query = query.lte('estimated_value', filters.estimated_value_max)\n      }\n\n      if (filters?.probability_min) {\n        query = query.gte('probability', filters.probability_min)\n      }\n\n      if (filters?.probability_max) {\n        query = query.lte('probability', filters.probability_max)\n      }\n\n      query = query.order('created_at', { ascending: false })\n\n      const { data, error } = await query\n\n      if (error) throw error\n      return data as OpportunityWithRelations[]\n    },\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  })\n}\n\n// Hook to fetch a single opportunity by ID with all relations\nexport function useOpportunity(id: string) {\n  return useQuery({\n    queryKey: opportunityKeys.detail(id),\n    queryFn: async () => {\n      const { data, error } = await supabase\n        .from('opportunities')\n        .select(`\n          *,\n          organization:organizations!opportunities_organization_id_fkey(*),\n          contact:contacts!opportunities_contact_id_fkey(*),\n          principal_organization:organizations!opportunities_principal_organization_id_fkey(*),\n          distributor_organization:organizations!opportunities_distributor_organization_id_fkey(*),\n          opportunity_products(\n            *,\n            product:products(*)\n          ),\n          interactions(*)\n        `)\n        .eq('id', id)\n        .is('deleted_at', null)\n        .single()\n\n      if (error) throw error\n      \n      // Transform the data to match OpportunityWithRelations type\n      const transformedData = {\n        ...data,\n        interactions: data.interactions ? [data.interactions].flat() : []\n      }\n      \n      return transformedData as OpportunityWithRelations\n    },\n    enabled: !!id,\n    staleTime: 5 * 60 * 1000,\n  })\n}\n\n// Hook to fetch opportunities for a specific organization\nexport function useOpportunitiesByOrganization(organizationId: string) {\n  return useQuery({\n    queryKey: opportunityKeys.byOrganization(organizationId),\n    queryFn: async () => {\n      const { data, error } = await supabase\n        .from('opportunities')\n        .select(`\n          *,\n          organization:organizations!opportunities_organization_id_fkey(*),\n          contact:contacts!opportunities_contact_id_fkey(*),\n          principal_organization:organizations!opportunities_principal_organization_id_fkey(*),\n          distributor_organization:organizations!opportunities_distributor_organization_id_fkey(*)\n        `)\n        .eq('organization_id', organizationId)\n        .is('deleted_at', null)\n        .order('created_at', { ascending: false })\n\n      if (error) throw error\n      return data as OpportunityWithRelations[]\n    },\n    enabled: !!organizationId,\n    staleTime: 5 * 60 * 1000,\n  })\n}\n\n// Hook to fetch opportunities for a specific contact\nexport function useOpportunitiesByContact(contactId: string) {\n  return useQuery({\n    queryKey: opportunityKeys.byContact(contactId),\n    queryFn: async () => {\n      const { data, error } = await supabase\n        .from('opportunities')\n        .select(`\n          *,\n          organization:organizations!opportunities_organization_id_fkey(*),\n          contact:contacts!opportunities_contact_id_fkey(*),\n          principal_organization:organizations!opportunities_principal_organization_id_fkey(*),\n          distributor_organization:organizations!opportunities_distributor_organization_id_fkey(*)\n        `)\n        .eq('contact_id', contactId)\n        .is('deleted_at', null)\n        .order('created_at', { ascending: false })\n\n      if (error) throw error\n      return data as OpportunityWithRelations[]\n    },\n    enabled: !!contactId,\n    staleTime: 5 * 60 * 1000,\n  })\n}\n\n// Hook to fetch pipeline data (opportunities grouped by stage)\nexport function usePipelineData() {\n  return useQuery({\n    queryKey: opportunityKeys.pipeline(),\n    queryFn: async () => {\n      const { data, error } = await supabase\n        .from('opportunities')\n        .select(`\n          stage,\n          estimated_value,\n          probability,\n          organization:organizations!opportunities_organization_id_fkey(name),\n          contact:contacts!opportunities_contact_id_fkey(first_name, last_name)\n        `)\n        .is('deleted_at', null)\n        .order('created_at', { ascending: false })\n\n      if (error) throw error\n\n      // Group by stage and calculate metrics\n      const pipeline = data.reduce((acc, opp) => {\n        const stage = opp.stage\n        if (!acc[stage]) {\n          acc[stage] = {\n            stage,\n            count: 0,\n            totalValue: 0,\n            weightedValue: 0,\n            opportunities: []\n          }\n        }\n        \n        acc[stage].count += 1\n        acc[stage].totalValue += opp.estimated_value || 0\n        acc[stage].weightedValue += (opp.estimated_value || 0) * ((opp.probability || 0) / 100)\n        acc[stage].opportunities.push(opp)\n        \n        return acc\n      }, {} as Record<string, any>)\n\n      return Object.values(pipeline)\n    },\n    staleTime: 5 * 60 * 1000,\n  })\n}\n\n// Hook to fetch active opportunities (not closed)\nexport function useActiveOpportunities() {\n  return useQuery({\n    queryKey: [...opportunityKeys.all, 'active'],\n    queryFn: async () => {\n      const { data, error } = await supabase\n        .from('opportunities')\n        .select(`\n          *,\n          organization:organizations!opportunities_organization_id_fkey(*),\n          contact:contacts!opportunities_contact_id_fkey(*),\n          principal_organization:organizations!opportunities_principal_organization_id_fkey(*),\n          distributor_organization:organizations!opportunities_distributor_organization_id_fkey(*)\n        `)\n        .not('stage', 'in', '(Closed - Won,Closed - Lost)')\n        .is('deleted_at', null)\n        .order('estimated_close_date')\n\n      if (error) throw error\n      return data as OpportunityWithRelations[]\n    },\n    staleTime: 5 * 60 * 1000,\n  })\n}\n\n// Hook to create a new opportunity\nexport function useCreateOpportunity() {\n  const queryClient = useQueryClient()\n\n  return useMutation({\n    mutationFn: async (opportunity: OpportunityInsert) => {\n      // Get current user ID for RLS policy compliance\n      const { data: { user }, error: authError } = await supabase.auth.getUser()\n      \n      if (authError || !user) {\n        throw new Error('Authentication required to create opportunity')\n      }\n\n      // Business rule validation: Ensure at least organization_id is provided\n      if (!opportunity.organization_id) {\n        throw new Error('Organization is required for all opportunities')\n      }\n\n      // Business rule validation: Warn about advanced stages without contacts\n      if (opportunity.stage && ['proposal', 'negotiation'].includes(opportunity.stage) && !opportunity.contact_id) {\n        console.warn(`Creating opportunity \"${opportunity.name}\" in stage \"${opportunity.stage}\" without a contact. Consider assigning a contact for better tracking.`)\n      }\n\n      // Ensure required audit fields are set for RLS policy and clean up empty strings\n      const opportunityData = {\n        ...opportunity,\n        contact_id: opportunity.contact_id || null,\n        principal_organization_id: opportunity.principal_organization_id || null,\n        distributor_organization_id: opportunity.distributor_organization_id || null,\n        estimated_close_date: opportunity.estimated_close_date || null,\n        actual_close_date: opportunity.actual_close_date || null,\n        description: opportunity.description || null,\n        competition: opportunity.competition || null,\n        decision_criteria: opportunity.decision_criteria || null,\n        next_action: opportunity.next_action || null,\n        next_action_date: opportunity.next_action_date || null,\n        notes: opportunity.notes || null,\n        created_by: user.id,\n        updated_by: user.id,\n      }\n\n      const { data, error } = await supabase\n        .from('opportunities')\n        .insert(opportunityData)\n        .select(`\n          *,\n          organization:organizations!opportunities_organization_id_fkey(*),\n          contact:contacts!opportunities_contact_id_fkey(*),\n          principal_organization:organizations!opportunities_principal_organization_id_fkey(*),\n          distributor_organization:organizations!opportunities_distributor_organization_id_fkey(*)\n        `)\n        .single()\n\n      if (error) throw error\n      return data as OpportunityWithRelations\n    },\n    onSuccess: (newOpportunity) => {\n      // Invalidate all opportunity lists\n      queryClient.invalidateQueries({ queryKey: opportunityKeys.lists() })\n      queryClient.invalidateQueries({ queryKey: opportunityKeys.byOrganization(newOpportunity.organization_id) })\n      \n      // Only invalidate contact-specific queries if contact_id exists\n      if (newOpportunity.contact_id) {\n        queryClient.invalidateQueries({ queryKey: opportunityKeys.byContact(newOpportunity.contact_id) })\n      }\n      \n      queryClient.invalidateQueries({ queryKey: opportunityKeys.pipeline() })\n      queryClient.invalidateQueries({ queryKey: [...opportunityKeys.all, 'active'] })\n      \n      // Add the new opportunity to the cache\n      queryClient.setQueryData(opportunityKeys.detail(newOpportunity.id), newOpportunity)\n    },\n  })\n}\n\n// Hook to update an opportunity\nexport function useUpdateOpportunity() {\n  const queryClient = useQueryClient()\n\n  return useMutation({\n    mutationFn: async ({ id, updates }: { id: string; updates: OpportunityUpdate }) => {\n      const { data, error } = await supabase\n        .from('opportunities')\n        .update({ \n          ...updates, \n          contact_id: updates.contact_id || null,\n          principal_organization_id: updates.principal_organization_id || null,\n          distributor_organization_id: updates.distributor_organization_id || null,\n          estimated_close_date: updates.estimated_close_date || null,\n          actual_close_date: updates.actual_close_date || null,\n          description: updates.description || null,\n          competition: updates.competition || null,\n          decision_criteria: updates.decision_criteria || null,\n          next_action: updates.next_action || null,\n          next_action_date: updates.next_action_date || null,\n          notes: updates.notes || null,\n          updated_at: new Date().toISOString() \n        })\n        .eq('id', id)\n        .select(`\n          *,\n          organization:organizations!opportunities_organization_id_fkey(*),\n          contact:contacts!opportunities_contact_id_fkey(*),\n          principal_organization:organizations!opportunities_principal_organization_id_fkey(*),\n          distributor_organization:organizations!opportunities_distributor_organization_id_fkey(*)\n        `)\n        .single()\n\n      if (error) throw error\n      return data as OpportunityWithRelations\n    },\n    onSuccess: (updatedOpportunity) => {\n      // Update all related queries\n      queryClient.invalidateQueries({ queryKey: opportunityKeys.lists() })\n      queryClient.invalidateQueries({ queryKey: opportunityKeys.byOrganization(updatedOpportunity.organization_id) })\n      \n      // Only invalidate contact-specific queries if contact_id exists\n      if (updatedOpportunity.contact_id) {\n        queryClient.invalidateQueries({ queryKey: opportunityKeys.byContact(updatedOpportunity.contact_id) })\n      }\n      \n      queryClient.invalidateQueries({ queryKey: opportunityKeys.pipeline() })\n      queryClient.invalidateQueries({ queryKey: [...opportunityKeys.all, 'active'] })\n      \n      // Update the specific opportunity in the cache\n      queryClient.setQueryData(opportunityKeys.detail(updatedOpportunity.id), updatedOpportunity)\n    },\n  })\n}\n\n// Hook to advance opportunity to next stage\nexport function useAdvanceOpportunityStage() {\n  const queryClient = useQueryClient()\n\n  const stageProgression = {\n    'New Lead': 'Initial Outreach',\n    'Initial Outreach': 'Sample/Visit Offered',\n    'Sample/Visit Offered': 'Awaiting Response',\n    'Awaiting Response': 'Feedback Logged',\n    'Feedback Logged': 'Demo Scheduled',\n    'Demo Scheduled': 'Closed - Won',\n  } as const\n\n  return useMutation({\n    mutationFn: async (id: string) => {\n      // First get current stage\n      const { data: currentOpp, error: fetchError } = await supabase\n        .from('opportunities')\n        .select('stage')\n        .eq('id', id)\n        .single()\n\n      if (fetchError) throw fetchError\n\n      const nextStage = stageProgression[currentOpp.stage as keyof typeof stageProgression]\n      if (!nextStage) {\n        throw new Error('Cannot advance opportunity from current stage')\n      }\n\n      const { data, error } = await supabase\n        .from('opportunities')\n        .update({ \n          stage: nextStage as any,\n          updated_at: new Date().toISOString()\n        })\n        .eq('id', id)\n        .select(`\n          *,\n          organization:organizations!opportunities_organization_id_fkey(*),\n          contact:contacts!opportunities_contact_id_fkey(*),\n          principal_organization:organizations!opportunities_principal_organization_id_fkey(*),\n          distributor_organization:organizations!opportunities_distributor_organization_id_fkey(*)\n        `)\n        .single()\n\n      if (error) throw error\n      return data as OpportunityWithRelations\n    },\n    onSuccess: (updatedOpportunity) => {\n      // Update all related queries\n      queryClient.invalidateQueries({ queryKey: opportunityKeys.lists() })\n      queryClient.invalidateQueries({ queryKey: opportunityKeys.byOrganization(updatedOpportunity.organization_id) })\n      \n      // Only invalidate contact-specific queries if contact_id exists\n      if (updatedOpportunity.contact_id) {\n        queryClient.invalidateQueries({ queryKey: opportunityKeys.byContact(updatedOpportunity.contact_id) })\n      }\n      \n      queryClient.invalidateQueries({ queryKey: opportunityKeys.pipeline() })\n      queryClient.invalidateQueries({ queryKey: [...opportunityKeys.all, 'active'] })\n      \n      // Update the specific opportunity in the cache\n      queryClient.setQueryData(opportunityKeys.detail(updatedOpportunity.id), updatedOpportunity)\n    },\n  })\n}\n\n// Hook to soft delete an opportunity\nexport function useDeleteOpportunity() {\n  const queryClient = useQueryClient()\n\n  return useMutation({\n    mutationFn: async (id: string) => {\n      const { data, error } = await supabase\n        .from('opportunities')\n        .update({ \n          deleted_at: new Date().toISOString(),\n          updated_at: new Date().toISOString()\n        })\n        .eq('id', id)\n        .select(`\n          *,\n          organization:organizations!opportunities_organization_id_fkey(*),\n          contact:contacts!opportunities_contact_id_fkey(*)\n        `)\n        .single()\n\n      if (error) throw error\n      return data as OpportunityWithRelations\n    },\n    onSuccess: (deletedOpportunity) => {\n      // Invalidate all opportunity lists\n      queryClient.invalidateQueries({ queryKey: opportunityKeys.lists() })\n      queryClient.invalidateQueries({ queryKey: opportunityKeys.byOrganization(deletedOpportunity.organization_id) })\n      \n      // Only invalidate contact-specific queries if contact_id exists\n      if (deletedOpportunity.contact_id) {\n        queryClient.invalidateQueries({ queryKey: opportunityKeys.byContact(deletedOpportunity.contact_id) })\n      }\n      \n      queryClient.invalidateQueries({ queryKey: opportunityKeys.pipeline() })\n      queryClient.invalidateQueries({ queryKey: [...opportunityKeys.all, 'active'] })\n      \n      // Remove from individual cache\n      queryClient.removeQueries({ queryKey: opportunityKeys.detail(deletedOpportunity.id) })\n    },\n  })\n}","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/hooks/useOrganizations.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/hooks/useProducts.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/hooks/useProgressiveDetails.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/hooks/useSidebar.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/lib/activity-utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/lib/advocacyValidation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/lib/database.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/lib/form-resolver.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":51,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":51,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1704,1707],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1704,1707],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":85,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":85,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2769,2772],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2769,2772],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":106,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":106,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3336,3339],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3336,3339],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":109,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":109,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3417,3420],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3417,3420],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":124,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":124,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3881,3884],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3881,3884],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":124,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":124,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3887,3890],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3887,3890],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":127,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":127,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3945,3948],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3945,3948],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":144,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":144,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4353,4356],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4353,4356],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":195,"column":6,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":195,"endColumn":9,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5499,5502],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5499,5502],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":220,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":220,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6300,6303],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6300,6303],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":239,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":239,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6826,6829],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6826,6829],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":266,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":266,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7651,7654],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7651,7654],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":270,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":270,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7718,7721],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7718,7721],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Enhanced Type-Safe Form Resolver\n * \n * Bridges the gap between Yup schemas and React Hook Form types\n * by providing a properly typed resolver that handles the differences\n * between Yup's transform output and React Hook Form's expected input.\n * \n * Features automatic type conflict detection and resolution.\n */\n\nimport React from 'react'\nimport { type Resolver, type FieldValues, type Control } from 'react-hook-form'\nimport { yupResolver } from '@hookform/resolvers/yup'\nimport type { AnyObjectSchema } from 'yup'\nimport { TypeInference, FormComponentValidator } from './typescript-guardian'\n\n/**\n * Enhanced type-safe resolver with automatic conflict detection\n */\nexport function createTypeSafeResolver<TFormValues extends FieldValues>(\n  schema: AnyObjectSchema,\n  options?: {\n    autoTransformNullable?: boolean\n    strictTypeValidation?: boolean\n  }\n): Resolver<TFormValues> {\n  const {\n    autoTransformNullable = true,\n    strictTypeValidation = false\n  } = options || {}\n\n  const baseResolver = yupResolver(schema)\n  \n  return async (values, context, options) => {\n    let processedValues = values\n\n    // Auto-transform nullable fields if enabled\n    if (autoTransformNullable) {\n      processedValues = TypeInference.formToDatabaseType(values)\n    }\n\n    // Strict type validation if enabled\n    if (strictTypeValidation) {\n      const validationResult = validateFormValues(processedValues, schema)\n      if (!validationResult.isValid) {\n        console.warn('🚨 TypeScript Guardian: Form validation warnings:', validationResult.warnings)\n      }\n    }\n\n    // Use the base yup resolver but return it with the correct typing\n    const result = await baseResolver(processedValues as any, context, options)\n    \n    // Transform result values back to form-compatible format\n    const transformedValues = autoTransformNullable \n      ? TypeInference.databaseToFormType(result.values)\n      : result.values\n\n    return {\n      values: transformedValues as TFormValues,\n      errors: result.errors\n    }\n  }\n}\n\n/**\n * Validates form values against expected patterns\n */\nfunction validateFormValues(values: Record<string, unknown>, schema: AnyObjectSchema): {\n  isValid: boolean\n  warnings: string[]\n} {\n  const warnings: string[] = []\n  \n  // Check for common type conflicts\n  const schemaFields = schema.fields || {}\n  \n  for (const [fieldName, value] of Object.entries(values)) {\n    if (schemaFields[fieldName]) {\n      // Check for null/undefined mismatches\n      if (value === null && typeof schemaFields[fieldName] === 'object') {\n        warnings.push(`Field '${fieldName}' is null but schema expects a specific type`)\n      }\n      \n      // Check for empty string to null conversion needs\n      if (value === '' && (schemaFields[fieldName] as any)?.spec?.nullable) {\n        warnings.push(`Field '${fieldName}' is empty string but should be null for nullable schema`)\n      }\n    }\n  }\n\n  return {\n    isValid: warnings.length === 0,\n    warnings\n  }\n}\n\n/**\n * Data transformer for converting between database types and form types\n * Handles the conversion of null/undefined values for React Hook Form\n */\nexport class FormDataTransformer {\n  /**\n   * Converts database entity to form-compatible data\n   * Handles null to undefined conversion for optional fields\n   */\n  static toFormData<TFormData>(dbEntity: any): Partial<TFormData> {\n    if (!dbEntity) return {}\n    \n    const formData: any = {}\n    \n    for (const [key, value] of Object.entries(dbEntity)) {\n      // Convert null to undefined for optional fields in forms\n      // Keep original value for required fields\n      formData[key] = value === null ? undefined : value\n    }\n    \n    return formData as Partial<TFormData>\n  }\n  \n  /**\n   * Converts form data to database-compatible format\n   * Handles undefined to null conversion for database storage\n   */\n  static fromFormData(formData: any): any {\n    if (!formData) return {}\n    \n    const dbData: any = {}\n    \n    for (const [key, value] of Object.entries(formData)) {\n      // Convert empty strings and undefined to null for database\n      if (value === '' || value === undefined) {\n        dbData[key] = null\n      } else {\n        dbData[key] = value\n      }\n    }\n    \n    return dbData\n  }\n  \n  /**\n   * Validates that required fields are present and not empty\n   */\n  static validateRequired(data: any, requiredFields: string[]): string[] {\n    const errors: string[] = []\n    \n    for (const field of requiredFields) {\n      const value = data[field]\n      if (value === null || value === undefined || value === '') {\n        errors.push(`${field} is required`)\n      }\n    }\n    \n    return errors\n  }\n}\n\n/**\n * Type utility to make nullable fields optional for React Hook Form\n */\nexport type FormCompatible<T> = {\n  [K in keyof T]: T[K] extends string | null \n    ? string | undefined\n    : T[K] extends number | null\n    ? number | undefined  \n    : T[K] extends boolean | null\n    ? boolean | undefined\n    : T[K]\n}\n\n/**\n * Helper to create form-compatible default values\n */\nexport function createFormDefaults<T>(\n  defaults: Partial<T>,\n  overrides?: Partial<T>\n): T {\n  return {\n    ...defaults,\n    ...overrides\n  } as T\n}\n\n/**\n * Enhanced form component prop utilities\n */\nexport class FormPropGuardian {\n  /**\n   * Validates and auto-fixes form field component props\n   */\n  static validateAndFixProps<T extends FieldValues>(\n    props: Record<string, unknown>,\n    control: Control<T>,\n    componentName: string = 'FormField'\n  ): any {\n    const validation = FormComponentValidator.validateFieldProps(props)\n    \n    if (!validation.isValid) {\n      if (process.env.NODE_ENV === 'development') {\n        console.warn(`🔧 TypeScript Guardian: Auto-fixing props for ${componentName}:`, validation.errors)\n      }\n      \n      // Auto-generate missing props\n      const fixedProps = FormComponentValidator.generateMissingProps(props, control)\n      \n      if (process.env.NODE_ENV === 'development') {\n        console.log(`✅ TypeScript Guardian: Fixed props for ${componentName}:`, fixedProps)\n      }\n      \n      return fixedProps\n    }\n    \n    return props\n  }\n\n  /**\n   * Creates a Higher-Order Component that auto-fixes prop issues\n   */\n  static withTypeSafety<T extends FieldValues>(\n    WrappedComponent: React.ComponentType<any>,\n    control: Control<T>,\n    componentName?: string\n  ) {\n    return function TypeSafeComponent(props: Record<string, unknown>) {\n      const safeProps = FormPropGuardian.validateAndFixProps(\n        props, \n        control, \n        componentName || WrappedComponent.displayName || WrappedComponent.name\n      )\n      \n      return React.createElement(WrappedComponent, safeProps)\n    }\n  }\n\n  /**\n   * Development-time prop validator decorator\n   */\n  static validatePropsDecorator<T extends FieldValues>(\n    target: any,\n    propertyKey: string,\n    descriptor: PropertyDescriptor\n  ) {\n    const originalMethod = descriptor.value\n    \n    descriptor.value = function(this: unknown, props: Record<string, unknown>, control: Control<T>) {\n      if (process.env.NODE_ENV === 'development') {\n        const validation = FormComponentValidator.validateFieldProps(props)\n        if (!validation.isValid) {\n          console.error(`🚨 TypeScript Guardian: Invalid props in ${target.constructor.name}.${propertyKey}:`, validation.errors)\n        }\n      }\n      \n      return originalMethod.apply(this, [props, control])\n    }\n    \n    return descriptor\n  }\n}\n\n/**\n * Type-safe form field prop generator\n */\nexport function createTypeSafeFieldProps<T extends FieldValues>(\n  name: keyof T,\n  control: Control<T>,\n  additionalProps?: Record<string, any>\n): {\n  name: keyof T\n  control: Control<T>\n} & Record<string, any> {\n  return {\n    name,\n    control,\n    ...additionalProps\n  }\n}\n\n/**\n * Resolver factory with enhanced type safety for specific CRM entities\n */\nexport class CRMResolverFactory {\n  /**\n   * Creates a type-safe resolver specifically for Contact forms\n   */\n  static createContactResolver<T extends FieldValues>(schema: AnyObjectSchema): Resolver<T> {\n    return createTypeSafeResolver<T>(schema, {\n      autoTransformNullable: true,\n      strictTypeValidation: true\n    })\n  }\n\n  /**\n   * Creates a type-safe resolver specifically for Organization forms\n   */\n  static createOrganizationResolver<T extends FieldValues>(schema: AnyObjectSchema): Resolver<T> {\n    return createTypeSafeResolver<T>(schema, {\n      autoTransformNullable: true,\n      strictTypeValidation: true\n    })\n  }\n\n  /**\n   * Creates a type-safe resolver specifically for Opportunity forms\n   */\n  static createOpportunityResolver<T extends FieldValues>(schema: AnyObjectSchema): Resolver<T> {\n    return createTypeSafeResolver<T>(schema, {\n      autoTransformNullable: true,\n      strictTypeValidation: false // Opportunities have more dynamic fields\n    })\n  }\n}","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/lib/form-transforms.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":13,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[427,430],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[427,430],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":24,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[715,718],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[715,718],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":36,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":36,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1051,1054],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1051,1054],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":47,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":47,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1322,1325],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1322,1325],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":47,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":47,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1330,1333],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1330,1333],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":58,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":58,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1608,1611],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1608,1611],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":58,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":58,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1614,1617],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1614,1617],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":69,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":69,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1897,1900],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1897,1900],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":80,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":80,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2179,2182],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2179,2182],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":92,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":92,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2480,2483],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2480,2483],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":104,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":104,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2804,2807],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2804,2807],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":114,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":114,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3056,3059],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3056,3059],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":129,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":129,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3567,3570],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3567,3570],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":130,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":130,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3613,3616],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3613,3616],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":131,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":131,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3653,3656],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3653,3656],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":131,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":131,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3681,3684],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3681,3684],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":133,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":133,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3758,3761],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3758,3761],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":133,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":133,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3770,3773],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3770,3773],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":147,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":147,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4168,4171],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4168,4171],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":182,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":182,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5043,5046],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5043,5046],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":190,"column":70,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":190,"endColumn":73,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5274,5277],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5274,5277],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":190,"column":93,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":190,"endColumn":96,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5297,5300],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5297,5300],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Form Transform Utilities\n * \n * Reusable transform functions for Yup schemas to handle common type conversion\n * patterns and prevent TypeScript type mismatches between forms and validation.\n */\n\n/**\n * Transforms empty strings to null values\n * Essential for nullable fields where HTML inputs produce empty strings\n * but database/validation expects null for \"empty\" values\n */\nexport const emptyStringToNull = (value: any): string | null => {\n  if (typeof value === 'string' && value.trim() === '') {\n    return null\n  }\n  return value\n}\n\n/**\n * Transforms empty strings to null for number fields\n * Handles cases where number inputs can be empty strings\n */\nexport const emptyStringToNullNumber = (value: any): number | null => {\n  if (value === '' || value === null || value === undefined) {\n    return null\n  }\n  const num = Number(value)\n  return isNaN(num) ? null : num\n}\n\n/**\n * Transforms empty strings to null for URL fields\n * Ensures proper URL validation while handling empty inputs\n */\nexport const emptyStringToNullUrl = (value: any): string | null => {\n  if (typeof value === 'string' && value.trim() === '') {\n    return null\n  }\n  return value\n}\n\n/**\n * Transforms empty arrays to null\n * Useful for optional array fields that should be null when empty\n */\nexport const emptyArrayToNull = (value: any[]): any[] | null => {\n  if (Array.isArray(value) && value.length === 0) {\n    return null\n  }\n  return value\n}\n\n/**\n * Transforms empty arrays to empty array (preserves array type)\n * Useful for required array fields that should never be null\n */\nexport const ensureArray = (value: any): any[] => {\n  if (value === null || value === undefined) {\n    return []\n  }\n  return Array.isArray(value) ? value : []\n}\n\n/**\n * Transforms boolean strings to actual booleans\n * Handles form inputs that might send boolean values as strings\n */\nexport const stringToBoolean = (value: any): boolean => {\n  if (typeof value === 'string') {\n    return value.toLowerCase() === 'true'\n  }\n  return Boolean(value)\n}\n\n/**\n * Trims whitespace from strings and converts empty to null\n * Comprehensive string cleaning for form inputs\n */\nexport const trimAndNullify = (value: any): string | null => {\n  if (typeof value !== 'string') {\n    return value\n  }\n  const trimmed = value.trim()\n  return trimmed === '' ? null : trimmed\n}\n\n/**\n * Phone number normalizer - removes non-digits and formats\n * Handles various phone input formats\n */\nexport const normalizePhone = (value: any): string | null => {\n  if (typeof value !== 'string' || value.trim() === '') {\n    return null\n  }\n  // Remove all non-digit characters\n  const digits = value.replace(/\\D/g, '')\n  return digits === '' ? null : digits\n}\n\n/**\n * Email normalizer - converts to lowercase and trims\n */\nexport const normalizeEmail = (value: any): string | null => {\n  if (typeof value !== 'string' || value.trim() === '') {\n    return null\n  }\n  return value.trim().toLowerCase()\n}\n\n/**\n * UUID validator transform - ensures proper UUID format or null\n */\nexport const normalizeUuid = (value: any): string | null => {\n  if (typeof value !== 'string' || value.trim() === '') {\n    return null\n  }\n  const trimmed = value.trim()\n  // Basic UUID format check\n  const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i\n  return uuidRegex.test(trimmed) ? trimmed : null\n}\n\n/**\n * Transform factory for conditional required fields\n * Returns a transform that makes field required when condition is met\n */\nexport const conditionalTransform = <T>(\n  condition: (allValues: any) => boolean,\n  requiredTransform: (value: any) => T,\n  optionalTransform: (value: any) => T | null = ((value: any) => emptyStringToNull(value) as T | null)\n) => {\n  return function(this: any, value: any) {\n    const isRequired = condition(this.parent)\n    return isRequired ? requiredTransform(value) : optionalTransform(value)\n  }\n}\n\n/**\n * Common transform combinations for typical form fields\n */\nexport const FormTransforms = {\n  // Standard nullable string field (most common)\n  nullableString: emptyStringToNull,\n  \n  // Required string field that trims whitespace\n  requiredString: (value: any): string => {\n    if (typeof value !== 'string' || value.trim() === '') {\n      throw new Error('Value is required')\n    }\n    return value.trim()\n  },\n  \n  // Nullable number field\n  nullableNumber: emptyStringToNullNumber,\n  \n  // Nullable email field with normalization\n  nullableEmail: normalizeEmail,\n  \n  // Nullable phone field with normalization\n  nullablePhone: normalizePhone,\n  \n  // Nullable URL field\n  nullableUrl: emptyStringToNullUrl,\n  \n  // Array field that preserves empty arrays\n  optionalArray: ensureArray,\n  \n  // Array field that becomes null when empty\n  nullableArray: emptyArrayToNull,\n  \n  // Boolean field with string conversion\n  booleanField: stringToBoolean,\n  \n  // UUID field with validation\n  uuidField: normalizeUuid\n}\n\n/**\n * Type guard to check if a value is a valid transform function\n */\nexport const isTransformFunction = (value: any): value is Function => {\n  return typeof value === 'function'\n}\n\n/**\n * Development helper to log transform operations\n * Only active in development mode\n */\nexport const debugTransform = (transformName: string, originalValue: any, transformedValue: any) => {\n  if (process.env.NODE_ENV === 'development') {\n    console.log(`Transform [${transformName}]:`, {\n      original: originalValue,\n      transformed: transformedValue,\n      changed: originalValue !== transformedValue\n    })\n  }\n}\n\nexport default FormTransforms","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/lib/metrics-utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/lib/monitoring.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/lib/organization-utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/lib/performance.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/lib/typescript-guardian.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":20,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[652,655],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[652,655],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":28,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":28,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[928,931],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[928,931],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":68,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":68,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1926,1929],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1926,1929],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":112,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":112,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3035,3038],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3035,3038],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":159,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":159,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4435,4438],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4435,4438],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_schema' is defined but never used.","line":203,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":203,"endColumn":15},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":213,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":213,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6216,6219],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6216,6219],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_T' is defined but never used.","line":292,"column":29,"nodeType":"Identifier","messageId":"unusedVar","endLine":292,"endColumn":31}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * TypeScript Guardian - Enhanced Type Safety & Error Prevention\n * \n * A comprehensive utility for preventing TypeScript errors in the KitchenPantry CRM system.\n * Provides runtime type validation, automatic type inference, and proactive error detection.\n */\n\nimport { type FieldValues, type Control } from 'react-hook-form'\nimport type { AnyObjectSchema } from 'yup'\n\n// ==================== TYPE GUARDS ====================\n\n/**\n * Enhanced type guards for CRM entities\n */\nexport class TypeGuards {\n  /**\n   * Validates that an object has all required properties with correct types\n   */\n  static hasRequiredProperties<T extends Record<string, any>>(\n    obj: unknown,\n    requiredProps: Array<keyof T>,\n    typeCheckers?: Partial<Record<keyof T, (value: unknown) => boolean>>\n  ): obj is T {\n    if (!obj || typeof obj !== 'object') return false\n    \n    for (const prop of requiredProps) {\n      const value = (obj as any)[prop]\n      \n      // Check if property exists\n      if (value === undefined) return false\n      \n      // Check specific type if provided\n      if (typeCheckers?.[prop] && !typeCheckers[prop]!(value)) {\n        return false\n      }\n    }\n    \n    return true\n  }\n\n  /**\n   * Validates React Hook Form control object\n   */\n  static isValidControl(control: unknown): control is Control<FieldValues> {\n    return (\n      control !== null &&\n      control !== undefined &&\n      typeof control === 'object' &&\n      'register' in control &&\n      'handleSubmit' in control &&\n      'formState' in control\n    )\n  }\n\n  /**\n   * Validates form field component props\n   */\n  static hasValidFormFieldProps<T extends FieldValues>(\n    props: unknown\n  ): props is { name: keyof T; control: Control<T> } {\n    return (\n      props !== null &&\n      props !== undefined &&\n      typeof props === 'object' &&\n      'name' in props &&\n      'control' in props &&\n      TypeGuards.isValidControl((props as any).control)\n    )\n  }\n\n  /**\n   * Validates that a value matches expected enum values\n   */\n  static isValidEnumValue<T extends readonly string[]>(\n    value: unknown,\n    enumValues: T\n  ): value is T[number] {\n    return typeof value === 'string' && enumValues.includes(value as T[number])\n  }\n\n  /**\n   * Validates UUID format\n   */\n  static isValidUUID(value: unknown): value is string {\n    if (typeof value !== 'string') return false\n    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i\n    return uuidRegex.test(value)\n  }\n}\n\n// ==================== RUNTIME TYPE VALIDATION ====================\n\n/**\n * Runtime type validation for CRM entities\n */\nexport class RuntimeValidator {\n  /**\n   * Validates organization type and priority values\n   */\n  static validateOrganization(data: unknown): {\n    isValid: boolean\n    errors: string[]\n    typedData?: Record<string, unknown>\n  } {\n    const errors: string[] = []\n    \n    if (!data || typeof data !== 'object') {\n      return { isValid: false, errors: ['Invalid organization data'] }\n    }\n\n    const obj = data as any\n\n    // Required fields\n    if (!obj.name || typeof obj.name !== 'string') {\n      errors.push('Organization name is required and must be a string')\n    }\n\n    // Type validation\n    const validTypes = ['customer', 'principal', 'distributor', 'prospect', 'vendor'] as const\n    if (!TypeGuards.isValidEnumValue(obj.type, validTypes)) {\n      errors.push(`Invalid organization type. Must be one of: ${validTypes.join(', ')}`)\n    }\n\n    // Priority validation\n    const validPriorities = ['A', 'B', 'C', 'D'] as const\n    if (!TypeGuards.isValidEnumValue(obj.priority, validPriorities)) {\n      errors.push(`Invalid priority. Must be one of: ${validPriorities.join(', ')}`)\n    }\n\n    // Auto-derive boolean flags if missing\n    const typedData = {\n      ...obj,\n      is_principal: obj.is_principal ?? obj.type === 'principal',\n      is_distributor: obj.is_distributor ?? obj.type === 'distributor'\n    }\n\n    return {\n      isValid: errors.length === 0,\n      errors,\n      typedData: errors.length === 0 ? typedData : undefined\n    }\n  }\n\n  /**\n   * Validates contact form data\n   */\n  static validateContact(data: unknown): {\n    isValid: boolean\n    errors: string[]\n    typedData?: Record<string, unknown>\n  } {\n    const errors: string[] = []\n    \n    if (!data || typeof data !== 'object') {\n      return { isValid: false, errors: ['Invalid contact data'] }\n    }\n\n    const obj = data as any\n\n    // Required fields\n    if (!obj.first_name || typeof obj.first_name !== 'string') {\n      errors.push('First name is required and must be a string')\n    }\n\n    if (!obj.last_name || typeof obj.last_name !== 'string') {\n      errors.push('Last name is required and must be a string')\n    }\n\n    if (!obj.organization_id || !TypeGuards.isValidUUID(obj.organization_id)) {\n      errors.push('Valid organization ID is required')\n    }\n\n    // Enum validations\n    const validInfluences = ['High', 'Medium', 'Low', 'Unknown'] as const\n    if (!TypeGuards.isValidEnumValue(obj.purchase_influence, validInfluences)) {\n      errors.push(`Invalid purchase influence. Must be one of: ${validInfluences.join(', ')}`)\n    }\n\n    const validAuthorities = ['Decision Maker', 'Influencer', 'End User', 'Gatekeeper'] as const\n    if (!TypeGuards.isValidEnumValue(obj.decision_authority, validAuthorities)) {\n      errors.push(`Invalid decision authority. Must be one of: ${validAuthorities.join(', ')}`)\n    }\n\n    return {\n      isValid: errors.length === 0,\n      errors,\n      typedData: errors.length === 0 ? obj : undefined\n    }\n  }\n}\n\n// ==================== AUTOMATIC TYPE INFERENCE ====================\n\n/**\n * Automatic type inference helpers\n */\nexport class TypeInference {\n  /**\n   * Infers the correct TypeScript interface from a Yup schema\n   */\n  static inferFormTypeFromSchema<T extends AnyObjectSchema>(\n    _schema: T\n  ): string {\n    // Generate TypeScript interface string from Yup schema\n    // This is a simplified version - in practice, you'd use a more sophisticated parser\n    return `type InferredFormType = yup.InferType<typeof schema>`\n  }\n\n  /**\n   * Generates type-safe default values for forms\n   */\n  static generateSafeDefaults<T extends Record<string, any>>(\n    schema: AnyObjectSchema,\n    overrides?: Partial<T>\n  ): T {\n    const defaults: Record<string, unknown> = {}\n    \n    // Extract schema fields and their types\n    const fields = schema.fields || {}\n    \n    for (const [fieldName, fieldSchema] of Object.entries(fields)) {\n      if (fieldSchema && typeof fieldSchema === 'object' && 'type' in fieldSchema) {\n        switch (fieldSchema.type) {\n          case 'string':\n            defaults[fieldName] = ''\n            break\n          case 'number':\n            defaults[fieldName] = 0\n            break\n          case 'boolean':\n            defaults[fieldName] = false\n            break\n          case 'array':\n            defaults[fieldName] = []\n            break\n          default:\n            defaults[fieldName] = null\n        }\n      }\n    }\n\n    return { ...defaults, ...overrides } as T\n  }\n\n  /**\n   * Converts nullable database types to optional form types\n   */\n  static databaseToFormType<T>(dbEntity: T): Partial<T> {\n    if (!dbEntity || typeof dbEntity !== 'object') return {}\n\n    const formData: Record<string, unknown> = {}\n    \n    for (const [key, value] of Object.entries(dbEntity)) {\n      // Convert null to undefined for React Hook Form compatibility\n      formData[key] = value === null ? undefined : value\n    }\n\n    return formData as Partial<T>\n  }\n\n  /**\n   * Converts optional form types to nullable database types\n   */\n  static formToDatabaseType<T>(formData: T): T {\n    if (!formData || typeof formData !== 'object') return formData\n\n    const dbData: Record<string, unknown> = {}\n    \n    for (const [key, value] of Object.entries(formData)) {\n      // Convert empty strings and undefined to null for database\n      if (value === '' || value === undefined) {\n        dbData[key] = null\n      } else {\n        dbData[key] = value\n      }\n    }\n\n    return dbData as T\n  }\n}\n\n// ==================== FORM COMPONENT VALIDATION ====================\n\n/**\n * Form component prop validation\n */\nexport class FormComponentValidator {\n  /**\n   * Validates that form field components have required props\n   */\n  static validateFieldProps<_T extends FieldValues>(\n    props: Record<string, unknown>,\n    requiredProps: string[] = ['name', 'control']\n  ): { isValid: boolean; missingProps: string[]; errors: string[] } {\n    const missingProps: string[] = []\n    const errors: string[] = []\n\n    for (const prop of requiredProps) {\n      if (!(prop in props) || props[prop] === undefined) {\n        missingProps.push(prop)\n        errors.push(`Missing required prop: ${prop}`)\n      }\n    }\n\n    // Special validation for control prop\n    if ('control' in props && !TypeGuards.isValidControl(props.control)) {\n      errors.push('Invalid control prop - must be a valid React Hook Form control object')\n    }\n\n    return {\n      isValid: missingProps.length === 0 && errors.length === 0,\n      missingProps,\n      errors\n    }\n  }\n\n  /**\n   * Auto-generates missing props for form components\n   */\n  static generateMissingProps<T extends FieldValues>(\n    existingProps: Record<string, unknown>,\n    control: Control<T>\n  ): Record<string, unknown> {\n    const generatedProps = { ...existingProps }\n\n    // Add control if missing\n    if (!generatedProps.control) {\n      generatedProps.control = control\n    }\n\n    // Add default name if missing\n    if (!generatedProps.name && existingProps.fieldName) {\n      generatedProps.name = existingProps.fieldName\n    }\n\n    return generatedProps\n  }\n}\n\n// ==================== ERROR DETECTION & REPORTING ====================\n\n/**\n * TypeScript error detection and reporting\n */\nexport class ErrorDetector {\n  /**\n   * Detects common TypeScript patterns that cause errors\n   */\n  static detectCommonIssues(codeContent: string): {\n    resolverTypeConflicts: boolean\n    missingControlProps: boolean\n    nullabilityMismatches: boolean\n    enumValueErrors: boolean\n  } {\n    return {\n      resolverTypeConflicts: /Resolver<.*> is not assignable to type 'Resolver<.*>/.test(codeContent),\n      missingControlProps: /Property 'control' is missing/.test(codeContent),\n      nullabilityMismatches: /Type 'null' is not assignable to type/.test(codeContent),\n      enumValueErrors: /Type '\".*\"' is not assignable to type/.test(codeContent)\n    }\n  }\n\n  /**\n   * Generates fix suggestions for detected issues\n   */\n  static generateFixSuggestions(issues: ReturnType<typeof ErrorDetector.detectCommonIssues>): string[] {\n    const suggestions: string[] = []\n\n    if (issues.resolverTypeConflicts) {\n      suggestions.push('Use createTypeSafeResolver() from form-resolver.ts to fix resolver type conflicts')\n    }\n\n    if (issues.missingControlProps) {\n      suggestions.push('Add control prop to form field components or use FormComponentValidator.generateMissingProps()')\n    }\n\n    if (issues.nullabilityMismatches) {\n      suggestions.push('Use TypeInference.databaseToFormType() to convert nullable database types to optional form types')\n    }\n\n    if (issues.enumValueErrors) {\n      suggestions.push('Use TypeGuards.isValidEnumValue() to validate enum values before assignment')\n    }\n\n    return suggestions\n  }\n}\n\n// ==================== DEVELOPMENT UTILITIES ====================\n\n/**\n * Development utilities for enhanced TypeScript support\n */\nexport class DevUtils {\n  /**\n   * Logs detailed type information for debugging\n   */\n  static logTypeInfo(value: unknown, context: string = ''): void {\n    if (process.env.NODE_ENV === 'development') {\n      console.group(`🔍 TypeScript Guardian - ${context}`)\n      console.log('Value:', value)\n      console.log('Type:', typeof value)\n      console.log('Constructor:', value?.constructor?.name)\n      console.log('Is Array:', Array.isArray(value))\n      console.log('Is Object:', value !== null && typeof value === 'object')\n      console.groupEnd()\n    }\n  }\n\n  /**\n   * Creates a development-time type checker\n   */\n  static createTypeChecker<T>(\n    typeGuard: (value: unknown) => value is T,\n    errorMessage: string = 'Type validation failed'\n  ) {\n    return (value: unknown): T => {\n      if (typeGuard(value)) {\n        return value\n      }\n      \n      if (process.env.NODE_ENV === 'development') {\n        console.error(`🚨 TypeScript Guardian: ${errorMessage}`, value)\n        DevUtils.logTypeInfo(value, 'Type Checker Failed')\n      }\n      \n      throw new Error(errorMessage)\n    }\n  }\n\n  /**\n   * Validates component props at runtime in development\n   */\n  static validateProps<T>(props: T, validator: (props: T) => boolean, componentName: string): T {\n    if (process.env.NODE_ENV === 'development' && !validator(props)) {\n      console.error(`🚨 TypeScript Guardian: Invalid props for ${componentName}`, props)\n      throw new Error(`Invalid props for ${componentName}`)\n    }\n    return props\n  }\n}\n\n// ==================== EXPORTS ====================\n\nexport default {\n  TypeGuards,\n  RuntimeValidator,\n  TypeInference,\n  FormComponentValidator,\n  ErrorDetector,\n  DevUtils\n}","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/lib/utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/main.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/pages/Contacts.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":88,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":88,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3701,3704],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3701,3704],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from 'react'\nimport { toast } from 'sonner'\nimport { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { ContactsTable } from '@/components/contacts/ContactsTable'\nimport { ContactForm } from '@/components/contacts/ContactForm'\nimport { useContacts, useCreateContact, useUpdateContact, useDeleteContact } from '@/hooks/useContacts'\nimport { Users, Plus, Search, Mail, Phone } from 'lucide-react'\nimport type { Contact, ContactUpdate } from '@/types/entities'\nimport { FormDataTransformer } from '@/lib/form-resolver'\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from '@/components/ui/dialog'\n\nfunction ContactsPage() {\n  const [searchTerm, setSearchTerm] = useState('')\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false)\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false)\n  const [editingContact, setEditingContact] = useState<Contact | null>(null)\n  const { data: contacts = [], isLoading } = useContacts()\n  const createContactMutation = useCreateContact()\n  const updateContactMutation = useUpdateContact()\n  const deleteContactMutation = useDeleteContact()\n\n  const filteredContacts = contacts.filter(contact =>\n    contact.first_name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    contact.last_name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    (contact.email && contact.email.toLowerCase().includes(searchTerm.toLowerCase())) ||\n    (contact.organization?.name && contact.organization.name.toLowerCase().includes(searchTerm.toLowerCase()))\n  )\n\n  const contactsWithEmail = contacts.filter(contact => contact.email)\n  const contactsWithPhone = contacts.filter(contact => contact.phone)\n\n  const handleEdit = (contact: Contact) => {\n    setEditingContact(contact)\n    setIsEditDialogOpen(true)\n  }\n\n  const handleDelete = async (contact: Contact) => {\n    if (window.confirm(`Are you sure you want to delete ${contact.first_name} ${contact.last_name}?`)) {\n      try {\n        await deleteContactMutation.mutateAsync(contact.id)\n        toast.success('Contact deleted successfully!')\n      } catch (error) {\n        console.error('Failed to delete contact:', error)\n        toast.error('Failed to delete contact. Please try again.')\n      }\n    }\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold flex items-center gap-2\">\n            <Users className=\"h-8 w-8 text-green-600\" />\n            Contacts\n          </h1>\n          <p className=\"text-muted-foreground mt-1\">\n            Manage your network of contacts and relationships\n          </p>\n        </div>\n        <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n          <DialogTrigger asChild>\n            <Button>\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Add Contact\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-4xl w-[calc(100vw-2rem)] sm:max-w-4xl max-h-[90vh] overflow-hidden\">\n            <DialogHeader>\n              <DialogTitle>Create New Contact</DialogTitle>\n              <DialogDescription>\n                Add a new contact to your CRM system. Fill in the contact details below.\n              </DialogDescription>\n            </DialogHeader>\n            <div className=\"max-h-[75vh] overflow-y-auto pr-2\">\n              <ContactForm \n              onSubmit={async (data) => {\n                try {\n                  await createContactMutation.mutateAsync(data as any)\n                  setIsCreateDialogOpen(false)\n                  toast.success('Contact created successfully!')\n                } catch (error) {\n                  console.error('Failed to create contact:', error)\n                  toast.error('Failed to create contact. Please try again.')\n                }\n              }}\n              loading={createContactMutation.isPending}\n            />\n            </div>\n          </DialogContent>\n        </Dialog>\n\n        {/* Edit Contact Dialog */}\n        <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>\n          <DialogContent className=\"max-w-4xl w-[calc(100vw-2rem)] sm:max-w-4xl max-h-[90vh] overflow-hidden\">\n            <DialogHeader>\n              <DialogTitle>Edit Contact</DialogTitle>\n              <DialogDescription>\n                Update the contact information below.\n              </DialogDescription>\n            </DialogHeader>\n            <div className=\"max-h-[75vh] overflow-y-auto pr-2\">\n              {editingContact && (\n                <ContactForm \n                initialData={FormDataTransformer.toFormData(editingContact)}\n                onSubmit={async (data) => {\n                  try {\n                    await updateContactMutation.mutateAsync({\n                      id: editingContact.id,\n                      updates: data as ContactUpdate\n                    })\n                    setIsEditDialogOpen(false)\n                    setEditingContact(null)\n                    toast.success('Contact updated successfully!')\n                  } catch (error) {\n                    console.error('Failed to update contact:', error)\n                    toast.error('Failed to update contact. Please try again.')\n                  }\n                }}\n                loading={updateContactMutation.isPending}\n                />\n              )}\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid gap-4 md:grid-cols-3\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Contacts</CardTitle>\n            <Users className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{contacts.length}</div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">With Email</CardTitle>\n            <Mail className=\"h-4 w-4 text-blue-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{contactsWithEmail.length}</div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">With Phone</CardTitle>\n            <Phone className=\"h-4 w-4 text-green-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{contactsWithPhone.length}</div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Search and Filter */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Contacts</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"flex items-center space-x-2\">\n            <Search className=\"h-4 w-4 text-muted-foreground\" />\n            <Input\n              placeholder=\"Search contacts by name, email, or organization...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"max-w-sm\"\n            />\n          </div>\n\n          {isLoading ? (\n            <div className=\"text-center py-8\">Loading contacts...</div>\n          ) : (\n            <ContactsTable \n              contacts={filteredContacts} \n              onEdit={handleEdit}\n              onDelete={handleDelete}\n            />\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n\nexport default ContactsPage","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/pages/Dashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":10,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[524,527],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[524,527],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":30,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1242,1245],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1242,1245],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card'\nimport { useOrganizations } from '@/hooks/useOrganizations'\nimport { useOpportunities } from '@/hooks/useOpportunities'\nimport { useInteractions } from '@/hooks/useInteractions'\nimport { useContacts } from '@/hooks/useContacts'\nimport { Badge } from '@/components/ui/badge'\nimport { formatDistanceToNow } from 'date-fns'\nimport { Building2, Users, Target, MessageSquare } from 'lucide-react'\n\nfunction PrincipalCard({ principal }: { principal: any }) {\n  return (\n    <div className=\"p-4 border rounded-lg space-y-2\">\n      <div className=\"flex items-center gap-2\">\n        <Building2 className=\"h-4 w-4 text-blue-600\" />\n        <h3 className=\"font-medium text-sm\">{principal.name}</h3>\n      </div>\n      <p className=\"text-xs text-muted-foreground line-clamp-2\">\n        {principal.description || 'No description available'}\n      </p>\n      <div className=\"flex gap-1\">\n        <Badge variant=\"secondary\" className=\"text-xs\">Principal</Badge>\n        {principal.industry && (\n          <Badge variant=\"outline\" className=\"text-xs\">{principal.industry}</Badge>\n        )}\n      </div>\n    </div>\n  )\n}\n\nfunction ActivityFeed({ interactions }: { interactions: any[] }) {\n  if (interactions.length === 0) {\n    return (\n      <div className=\"text-center text-muted-foreground py-8\">\n        <MessageSquare className=\"h-8 w-8 mx-auto mb-2 opacity-50\" />\n        <p>No recent interactions</p>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      {interactions.map((interaction) => (\n        <div key={interaction.id} className=\"flex gap-3 p-3 border rounded-lg\">\n          <div className=\"w-2 h-2 bg-blue-600 rounded-full mt-2 flex-shrink-0\" />\n          <div className=\"flex-1 min-w-0\">\n            <div className=\"flex items-center gap-2 mb-1\">\n              <span className=\"font-medium text-sm capitalize\">\n                {interaction.interaction_type}\n              </span>\n              <Badge variant=\"outline\" className=\"text-xs\">\n                {interaction.direction}\n              </Badge>\n            </div>\n            <p className=\"text-sm text-muted-foreground line-clamp-2\">\n              {interaction.summary || 'No summary available'}\n            </p>\n            <p className=\"text-xs text-muted-foreground mt-1\">\n              {formatDistanceToNow(new Date(interaction.interaction_date), { addSuffix: true })}\n            </p>\n          </div>\n        </div>\n      ))}\n    </div>\n  )\n}\n\nfunction DashboardPage() {\n  const { data: organizations = [] } = useOrganizations()\n  const { data: opportunities = [] } = useOpportunities()\n  const { data: interactions = [] } = useInteractions()\n  const { data: contacts = [] } = useContacts()\n\n  const principals = organizations.filter(org => org.type === 'principal')\n  const activeOpportunities = opportunities.filter(opp => \n    !['closed_won', 'closed_lost'].includes(opp.stage)\n  )\n  const recentInteractions = interactions\n    .sort((a, b) => new Date(b.interaction_date).getTime() - new Date(a.interaction_date).getTime())\n    .slice(0, 10)\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-3xl font-bold flex items-center gap-2\">\n          <Target className=\"h-8 w-8 text-blue-600\" />\n          Dashboard\n        </h1>\n        <p className=\"text-muted-foreground mt-1\">\n          Welcome to Master Food Brokers CRM - Partnering with Excellence\n        </p>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Principals</CardTitle>\n            <Building2 className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{principals.length}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Active partnerships\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Active Opportunities</CardTitle>\n            <Target className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{activeOpportunities.length}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              In pipeline\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Organizations</CardTitle>\n            <Building2 className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{organizations.length}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              All relationships\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Contacts</CardTitle>\n            <Users className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{contacts.length}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              People in network\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Principal Overview Cards */}\n      {principals.length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Building2 className=\"h-5 w-5 text-blue-600\" />\n              Principal Overview\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n              {principals.map(principal => (\n                <PrincipalCard key={principal.id} principal={principal} />\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Recent Activity */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <MessageSquare className=\"h-5 w-5 text-green-600\" />\n            Recent Activity\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <ActivityFeed interactions={recentInteractions} />\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n\nexport default DashboardPage","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/pages/ImportExport.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/pages/Interactions.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":106,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":106,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4353,4356],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4353,4356],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from 'react'\nimport { toast } from 'sonner'\nimport { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { InteractionsTable } from '@/components/interactions/InteractionsTable'\nimport { InteractionForm } from '@/components/interactions/InteractionForm'\nimport { \n  useInteractions, \n  useInteractionStats, \n  useCreateInteraction, \n  useUpdateInteraction, \n  useDeleteInteraction,\n} from '@/hooks/useInteractions'\nimport { \n  MessageSquare, \n  Plus, \n  Search, \n  CheckCircle, \n  AlertTriangle,\n  Activity \n} from 'lucide-react'\nimport type { InteractionWithRelations, InteractionUpdate } from '@/types/entities'\nimport { FormDataTransformer } from '@/lib/form-resolver'\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from '@/components/ui/dialog'\nimport { Badge } from '@/components/ui/badge'\n\nfunction InteractionsPage() {\n  const [searchTerm, setSearchTerm] = useState('')\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false)\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false)\n  const [editingInteraction, setEditingInteraction] = useState<InteractionWithRelations | null>(null)\n  \n  const { data: interactions = [], isLoading } = useInteractions()\n  const { data: stats } = useInteractionStats()\n  const createInteractionMutation = useCreateInteraction()\n  const updateInteractionMutation = useUpdateInteraction()\n  const deleteInteractionMutation = useDeleteInteraction()\n\n  const filteredInteractions = interactions.filter(interaction =>\n    interaction.subject.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    interaction.description?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    interaction.organization?.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    interaction.contact?.first_name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    interaction.contact?.last_name.toLowerCase().includes(searchTerm.toLowerCase())\n  )\n\n  const handleEdit = (interaction: InteractionWithRelations) => {\n    setEditingInteraction(interaction)\n    setIsEditDialogOpen(true)\n  }\n\n  const handleDelete = async (interaction: InteractionWithRelations) => {\n    if (window.confirm(`Are you sure you want to delete the interaction \"${interaction.subject}\"?`)) {\n      try {\n        await deleteInteractionMutation.mutateAsync(interaction.id)\n        toast.success('Interaction deleted successfully!')\n      } catch (error) {\n        console.error('Failed to delete interaction:', error)\n        toast.error('Failed to delete interaction. Please try again.')\n      }\n    }\n  }\n\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold flex items-center gap-2\">\n            <MessageSquare className=\"h-8 w-8 text-blue-600\" />\n            Interactions\n          </h1>\n          <p className=\"text-muted-foreground mt-1\">\n            Track all customer touchpoints and communication history\n          </p>\n        </div>\n        <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n          <DialogTrigger asChild>\n            <Button>\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Add Interaction\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-4xl w-[calc(100vw-2rem)] sm:max-w-4xl max-h-[90vh] overflow-hidden\">\n            <DialogHeader>\n              <DialogTitle>Create New Interaction</DialogTitle>\n            </DialogHeader>\n            <div className=\"max-h-[75vh] overflow-y-auto pr-2\">\n              <InteractionForm \n              onSubmit={async (data) => {\n                try {\n                  // Transform form data to match InteractionInsert interface\n                  const interactionData = {\n                    ...data,\n                    // Handle date fields - convert empty strings to null\n                    follow_up_date: data.follow_up_date && typeof data.follow_up_date === 'string' && data.follow_up_date.trim() !== '' ? data.follow_up_date : null,\n                    // Ensure boolean field is properly typed\n                    follow_up_required: Boolean(data.follow_up_required)\n                  } as any\n                  \n                  console.log('Submitting interaction data:', interactionData)\n                  await createInteractionMutation.mutateAsync(interactionData)\n                  setIsCreateDialogOpen(false)\n                  toast.success('Interaction created successfully!')\n                } catch (error) {\n                  console.error('Failed to create interaction:', error)\n                  \n                  // More detailed error handling\n                  if (error instanceof Error) {\n                    toast.error(`Failed to create interaction: ${error.message}`)\n                  } else {\n                    toast.error('Failed to create interaction. Please try again.')\n                  }\n                }\n              }}\n              loading={createInteractionMutation.isPending}\n            />\n            </div>\n          </DialogContent>\n        </Dialog>\n\n        {/* Edit Interaction Dialog */}\n        <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>\n          <DialogContent className=\"max-w-4xl w-[calc(100vw-2rem)] sm:max-w-4xl max-h-[90vh] overflow-hidden\">\n            <DialogHeader>\n              <DialogTitle>Edit Interaction</DialogTitle>\n            </DialogHeader>\n            <div className=\"max-h-[75vh] overflow-y-auto pr-2\">\n              {editingInteraction && (\n                <InteractionForm \n                initialData={FormDataTransformer.toFormData(editingInteraction)}\n                onSubmit={async (data) => {\n                  try {\n                    await updateInteractionMutation.mutateAsync({\n                      id: editingInteraction.id,\n                      updates: data as InteractionUpdate\n                    })\n                    setIsEditDialogOpen(false)\n                    setEditingInteraction(null)\n                    toast.success('Interaction updated successfully!')\n                  } catch (error) {\n                    console.error('Failed to update interaction:', error)\n                    toast.error('Failed to update interaction. Please try again.')\n                  }\n                }}\n                loading={updateInteractionMutation.isPending}\n                />\n              )}\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Interactions</CardTitle>\n            <MessageSquare className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{stats?.total || 0}</div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Follow-ups Needed</CardTitle>\n            <AlertTriangle className=\"h-4 w-4 text-amber-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{stats?.followUpsNeeded || 0}</div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Recent Activity</CardTitle>\n            <Activity className=\"h-4 w-4 text-green-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{stats?.recentActivity || 0}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Last 7 days\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">By Type</CardTitle>\n            <CheckCircle className=\"h-4 w-4 text-blue-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {stats?.byType ? Object.keys(stats.byType).length : 0}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              Interaction types\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Interaction Types Breakdown */}\n      {stats?.byType && Object.keys(stats.byType).length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Interaction Types</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-5\">\n              {Object.entries(stats.byType).map(([type, count]) => (\n                <div key={type} className=\"p-4 border rounded-lg\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <h3 className=\"font-medium text-sm capitalize\">{type.replace('_', ' ')}</h3>\n                    <Badge variant=\"secondary\">{count}</Badge>\n                  </div>\n                  <p className=\"text-xs text-muted-foreground\">\n                    {((count / (stats.total || 1)) * 100).toFixed(1)}% of total\n                  </p>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Search and Filter */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Interactions</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"flex items-center space-x-2\">\n            <Search className=\"h-4 w-4 text-muted-foreground\" />\n            <Input\n              placeholder=\"Search interactions by subject, description, organization, or contact...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"max-w-sm\"\n            />\n          </div>\n\n          {isLoading ? (\n            <div className=\"text-center py-8\">Loading interactions...</div>\n          ) : (\n            <InteractionsTable \n              interactions={filteredInteractions} \n              onEdit={handleEdit}\n              onDelete={handleDelete}\n            />\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n\nexport default InteractionsPage","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/pages/MultiPrincipalOpportunity.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_opportunityId' is defined but never used.","line":11,"column":26,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":48}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useNavigate } from 'react-router-dom'\nimport { toast } from 'sonner'\nimport { ArrowLeft, Users } from 'lucide-react'\nimport { Button } from '@/components/ui/button'\nimport { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card'\nimport { SimpleMultiPrincipalForm } from '@/components/opportunities/SimpleMultiPrincipalForm'\n\nfunction MultiPrincipalOpportunityPage() {\n  const navigate = useNavigate()\n\n  const handleSuccess = (_opportunityId: string) => {\n    toast.success('Multi-principal opportunity created successfully!')\n    navigate(`/opportunities`) // Could navigate to specific opportunity view if it exists\n  }\n\n  const handleCancel = () => {\n    navigate('/opportunities')\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center gap-4\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={handleCancel}\n            className=\"flex items-center gap-2\"\n          >\n            <ArrowLeft className=\"h-4 w-4\" />\n            Back to Opportunities\n          </Button>\n          <div>\n            <h1 className=\"text-3xl font-bold flex items-center gap-2\">\n              <Users className=\"h-8 w-8 text-orange-600\" />\n              New Multi-Principal Opportunity\n            </h1>\n            <p className=\"text-muted-foreground mt-1\">\n              Create opportunities with multiple principals and complex participant relationships\n            </p>\n          </div>\n        </div>\n      </div>\n\n      {/* Main Form */}\n      <div className=\"max-w-4xl mx-auto\">\n        <SimpleMultiPrincipalForm\n          onSuccess={handleSuccess}\n          className=\"w-full\"\n        />\n      </div>\n\n      {/* Help Text */}\n      <Card className=\"max-w-4xl mx-auto\">\n        <CardHeader>\n          <CardTitle className=\"text-lg\">Multi-Principal Opportunities</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"grid gap-4 md:grid-cols-2\">\n            <div>\n              <h4 className=\"font-medium mb-2\">When to Use</h4>\n              <ul className=\"text-sm text-muted-foreground space-y-1\">\n                <li>• Multiple food brokers involved</li>\n                <li>• Complex distributor relationships</li>\n                <li>• Joint territory coverage</li>\n                <li>• Commission sharing arrangements</li>\n              </ul>\n            </div>\n            <div>\n              <h4 className=\"font-medium mb-2\">Key Features</h4>\n              <ul className=\"text-sm text-muted-foreground space-y-1\">\n                <li>• Assign multiple principals per opportunity</li>\n                <li>• Set primary principal per role</li>\n                <li>• Configure commission rates</li>\n                <li>• Define territory coverage</li>\n              </ul>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n\nexport default MultiPrincipalOpportunityPage","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/pages/Opportunities.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":106,"column":71,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":106,"endColumn":74,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4407,4410],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4407,4410],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_' is assigned a value but never used.","line":133,"column":41,"nodeType":"Identifier","messageId":"unusedVar","endLine":133,"endColumn":42},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'__' is assigned a value but never used.","line":133,"column":65,"nodeType":"Identifier","messageId":"unusedVar","endLine":133,"endColumn":67}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from 'react'\nimport { toast } from 'sonner'\nimport { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { OpportunitiesTable } from '@/components/opportunities/OpportunitiesTable'\nimport { OpportunityForm } from '@/components/opportunities/OpportunityForm'\nimport { useOpportunities, useCreateOpportunity, useUpdateOpportunity, useDeleteOpportunity } from '@/hooks/useOpportunities'\nimport { Target, Plus, Search, DollarSign, TrendingUp, Users } from 'lucide-react'\nimport { useNavigate } from 'react-router-dom'\nimport type { Opportunity, OpportunityUpdate } from '@/types/entities'\nimport { FormDataTransformer } from '@/lib/form-resolver'\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from '@/components/ui/dialog'\nimport { Badge } from '@/components/ui/badge'\n\nfunction OpportunitiesPage() {\n  const navigate = useNavigate()\n  const [searchTerm, setSearchTerm] = useState('')\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false)\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false)\n  const [editingOpportunity, setEditingOpportunity] = useState<Opportunity | null>(null)\n  const { data: opportunities = [], isLoading } = useOpportunities()\n  const createOpportunityMutation = useCreateOpportunity()\n  const updateOpportunityMutation = useUpdateOpportunity()\n  const deleteOpportunityMutation = useDeleteOpportunity()\n\n  const filteredOpportunities = opportunities.filter(opp =>\n    opp.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    opp.stage.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    (opp.organization?.name && opp.organization.name.toLowerCase().includes(searchTerm.toLowerCase()))\n  )\n\n  const activeOpportunities = opportunities.filter(opp => \n    !['Closed - Won', 'Closed - Lost'].includes(opp.stage)\n  )\n  \n  const wonOpportunities = opportunities.filter(opp => opp.stage === 'Closed - Won')\n  \n  const totalValue = opportunities\n    .filter(opp => opp.estimated_value)\n    .reduce((sum, opp) => sum + (opp.estimated_value || 0), 0)\n\n  const activeValue = activeOpportunities\n    .filter(opp => opp.estimated_value)\n    .reduce((sum, opp) => sum + (opp.estimated_value || 0), 0)\n\n  const handleEdit = (opportunity: Opportunity) => {\n    setEditingOpportunity(opportunity)\n    setIsEditDialogOpen(true)\n  }\n\n  const handleDelete = async (opportunity: Opportunity) => {\n    if (window.confirm(`Are you sure you want to delete the opportunity \"${opportunity.name}\"?`)) {\n      try {\n        await deleteOpportunityMutation.mutateAsync(opportunity.id)\n        toast.success('Opportunity deleted successfully!')\n      } catch (error) {\n        console.error('Failed to delete opportunity:', error)\n        toast.error('Failed to delete opportunity. Please try again.')\n      }\n    }\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold flex items-center gap-2\">\n            <Target className=\"h-8 w-8 text-orange-600\" />\n            Opportunities\n          </h1>\n          <p className=\"text-muted-foreground mt-1\">\n            Track and manage your sales pipeline and deals\n          </p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Button\n            variant=\"outline\"\n            onClick={() => navigate('/opportunities/new-multi-principal')}\n            className=\"flex items-center gap-2\"\n          >\n            <Users className=\"h-4 w-4\" />\n            Multi-Principal\n          </Button>\n          <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n            <DialogTrigger asChild>\n              <Button>\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Add Opportunity\n              </Button>\n            </DialogTrigger>\n          <DialogContent className=\"max-w-4xl w-[calc(100vw-2rem)] sm:max-w-4xl max-h-[90vh] overflow-hidden\">\n            <DialogHeader>\n              <DialogTitle>Create New Opportunity</DialogTitle>\n            </DialogHeader>\n            <div className=\"max-h-[75vh] overflow-y-auto pr-2\">\n              <OpportunityForm \n              onSubmit={async (data) => {\n                try {\n                  await createOpportunityMutation.mutateAsync(data as any)\n                  setIsCreateDialogOpen(false)\n                  toast.success('Opportunity created successfully!')\n                } catch (error) {\n                  console.error('Failed to create opportunity:', error)\n                  toast.error('Failed to create opportunity. Please try again.')\n                }\n              }}\n              loading={createOpportunityMutation.isPending}\n            />\n            </div>\n          </DialogContent>\n        </Dialog>\n\n        {/* Edit Opportunity Dialog */}\n        <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>\n          <DialogContent className=\"max-w-4xl w-[calc(100vw-2rem)] sm:max-w-4xl max-h-[90vh] overflow-hidden\">\n            <DialogHeader>\n              <DialogTitle>Edit Opportunity</DialogTitle>\n            </DialogHeader>\n            <div className=\"max-h-[75vh] overflow-y-auto pr-2\">\n              {editingOpportunity && (\n                <OpportunityForm \n                initialData={FormDataTransformer.toFormData(editingOpportunity)}\n                onSubmit={async (data) => {\n                  try {\n                    // Transform form data to OpportunityUpdate by removing non-database fields\n                    const { principals: _, auto_generated_name: __, ...updateData } = data\n                    \n                    await updateOpportunityMutation.mutateAsync({\n                      id: editingOpportunity.id,\n                      updates: updateData as unknown as OpportunityUpdate\n                    })\n                    setIsEditDialogOpen(false)\n                    setEditingOpportunity(null)\n                    toast.success('Opportunity updated successfully!')\n                  } catch (error) {\n                    console.error('Failed to update opportunity:', error)\n                    toast.error('Failed to update opportunity. Please try again.')\n                  }\n                }}\n                loading={updateOpportunityMutation.isPending}\n                />\n              )}\n            </div>\n          </DialogContent>\n        </Dialog>\n        </div>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Opportunities</CardTitle>\n            <Target className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{opportunities.length}</div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Active Pipeline</CardTitle>\n            <TrendingUp className=\"h-4 w-4 text-blue-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{activeOpportunities.length}</div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Won Deals</CardTitle>\n            <Target className=\"h-4 w-4 text-green-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{wonOpportunities.length}</div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Pipeline Value</CardTitle>\n            <DollarSign className=\"h-4 w-4 text-green-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              ${activeValue.toLocaleString()}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              ${totalValue.toLocaleString()} total value\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Pipeline Overview */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Pipeline Overview</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-5\">\n            {['New Lead', 'Initial Outreach', 'Sample/Visit Offered', 'Awaiting Response', 'Feedback Logged', 'Demo Scheduled', 'Closed - Won'].map(stage => {\n              const stageOpportunities = opportunities.filter(opp => opp.stage === stage)\n              const stageValue = stageOpportunities\n                .filter(opp => opp.estimated_value)\n                .reduce((sum, opp) => sum + (opp.estimated_value || 0), 0)\n              \n              return (\n                <div key={stage} className=\"p-4 border rounded-lg\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <h3 className=\"font-medium text-sm capitalize\">{stage.replace('_', ' ')}</h3>\n                    <Badge variant=\"secondary\">{stageOpportunities.length}</Badge>\n                  </div>\n                  <p className=\"text-xs text-muted-foreground\">\n                    ${stageValue.toLocaleString()}\n                  </p>\n                </div>\n              )\n            })}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Search and Filter */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Opportunities</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"flex items-center space-x-2\">\n            <Search className=\"h-4 w-4 text-muted-foreground\" />\n            <Input\n              placeholder=\"Search opportunities by title, stage, or organization...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"max-w-sm\"\n            />\n          </div>\n\n          {isLoading ? (\n            <div className=\"text-center py-8\">Loading opportunities...</div>\n          ) : (\n            <OpportunitiesTable \n              opportunities={filteredOpportunities} \n              onEdit={handleEdit}\n              onDelete={handleDelete}\n            />\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n\nexport default OpportunitiesPage","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/pages/Organizations.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":116,"column":74,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":116,"endColumn":77,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4584,4587],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4584,4587],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":221,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":221,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8822,8825],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8822,8825],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from 'react'\nimport { toast } from 'sonner'\nimport { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { OrganizationsTable } from '@/components/organizations/OrganizationsTable'\nimport { OrganizationForm } from '@/components/organizations/OrganizationForm'\nimport { useOrganizations, useCreateOrganization, useUpdateOrganization, useDeleteOrganization } from '@/hooks/useOrganizations'\nimport { Building2, Plus, Search } from 'lucide-react'\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from '@/components/ui/dialog'\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from '@/components/ui/alert-dialog'\nimport type { Organization } from '@/types/entities'\n\nfunction OrganizationsPage() {\n  const [searchTerm, setSearchTerm] = useState('')\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false)\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false)\n  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false)\n  const [selectedOrganization, setSelectedOrganization] = useState<Organization | null>(null)\n  \n  const { data: organizations = [], isLoading } = useOrganizations()\n  const createOrganizationMutation = useCreateOrganization()\n  const updateOrganizationMutation = useUpdateOrganization()\n  const deleteOrganizationMutation = useDeleteOrganization()\n\n  const filteredOrganizations = organizations.filter(org =>\n    org.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    (org.industry && org.industry.toLowerCase().includes(searchTerm.toLowerCase()))\n  )\n\n  const principals = organizations.filter(org => org.type === 'principal')\n  const retailers = organizations.filter(org => org.type === 'customer')\n\n  const handleEdit = (organization: Organization) => {\n    setSelectedOrganization(organization)\n    setIsEditDialogOpen(true)\n  }\n\n  const handleDelete = (organization: Organization) => {\n    setSelectedOrganization(organization)\n    setIsDeleteDialogOpen(true)\n  }\n\n  const handleConfirmDelete = async () => {\n    if (!selectedOrganization) return\n\n    try {\n      await deleteOrganizationMutation.mutateAsync(selectedOrganization.id)\n      setIsDeleteDialogOpen(false)\n      setSelectedOrganization(null)\n      toast.success('Organization deleted successfully!')\n    } catch (error) {\n      console.error('Failed to delete organization:', error)\n      toast.error('Failed to delete organization. Please try again.')\n    }\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold flex items-center gap-2\">\n            <Building2 className=\"h-8 w-8 text-blue-600\" />\n            Organizations\n          </h1>\n          <p className=\"text-muted-foreground mt-1\">\n            Manage your principals, retailers, and business relationships\n          </p>\n        </div>\n        <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n          <DialogTrigger asChild>\n            <Button>\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Add Organization\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-4xl w-[calc(100vw-2rem)] sm:max-w-4xl max-h-[90vh] overflow-hidden\">\n            <DialogHeader>\n              <DialogTitle>Create New Organization</DialogTitle>\n              <DialogDescription>\n                Add a new organization to your CRM system with contact and business information.\n              </DialogDescription>\n            </DialogHeader>\n            <div className=\"max-h-[75vh] overflow-y-auto pr-2\">\n              <OrganizationForm \n              onSubmit={async (data) => {\n                try {\n                  console.log('🔍 Form data received:', data)\n                  \n                  // Form data already matches database schema\n                  const dbData = data\n                  \n                  console.log('🚀 Sending to database:', dbData)\n                  \n                  // Validate type field is present before submission\n                  if (!data.type) {\n                    throw new Error('Organization type is required but missing from form data')\n                  }\n                  \n                  await createOrganizationMutation.mutateAsync(dbData as any)\n                  setIsCreateDialogOpen(false)\n                  toast.success('Organization created successfully!')\n                } catch (error) {\n                  console.error('Failed to create organization:', error)\n                  toast.error('Failed to create organization. Please try again.')\n                }\n              }}\n              loading={createOrganizationMutation.isPending}\n            />\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid gap-4 md:grid-cols-3\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Organizations</CardTitle>\n            <Building2 className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{organizations.length}</div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Principals</CardTitle>\n            <Building2 className=\"h-4 w-4 text-blue-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{principals.length}</div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Retailers</CardTitle>\n            <Building2 className=\"h-4 w-4 text-green-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{retailers.length}</div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Search and Filter */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Organizations</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"flex items-center space-x-2\">\n            <Search className=\"h-4 w-4 text-muted-foreground\" />\n            <Input\n              placeholder=\"Search organizations by name or industry...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"max-w-sm\"\n            />\n          </div>\n\n          {isLoading ? (\n            <div className=\"text-center py-8\">Loading organizations...</div>\n          ) : (\n            <OrganizationsTable \n              organizations={filteredOrganizations}\n              onEdit={handleEdit}\n              onDelete={handleDelete}\n            />\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Edit Dialog */}\n      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>\n        <DialogContent className=\"max-w-4xl w-[calc(100vw-2rem)] sm:max-w-4xl max-h-[90vh] overflow-hidden\">\n          <DialogHeader>\n            <DialogTitle>Edit Organization</DialogTitle>\n            <DialogDescription>\n              Update organization information and business details.\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"max-h-[75vh] overflow-y-auto pr-2\">\n            {selectedOrganization && (\n              <OrganizationForm\n              initialData={{\n                name: selectedOrganization.name,\n                type: selectedOrganization.type,\n                priority: selectedOrganization.priority as 'A' | 'B' | 'C' | 'D',\n                segment: selectedOrganization.segment,\n                is_principal: selectedOrganization.is_principal ?? false,\n                is_distributor: selectedOrganization.is_distributor ?? false,\n                city: selectedOrganization.city,\n                state_province: selectedOrganization.state_province,\n                phone: selectedOrganization.phone,\n                website: selectedOrganization.website,\n                notes: selectedOrganization.notes\n              }}\n              onSubmit={async (data) => {\n                try {\n                  await updateOrganizationMutation.mutateAsync({\n                    id: selectedOrganization.id,\n                    updates: data as any\n                  })\n                  setIsEditDialogOpen(false)\n                  setSelectedOrganization(null)\n                  toast.success('Organization updated successfully!')\n                } catch (error) {\n                  console.error('Failed to update organization:', error)\n                  toast.error('Failed to update organization. Please try again.')\n                }\n              }}\n              loading={updateOrganizationMutation.isPending}\n              />\n            )}\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Delete Confirmation Dialog */}\n      <AlertDialog open={isDeleteDialogOpen} onOpenChange={setIsDeleteDialogOpen}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Are you sure?</AlertDialogTitle>\n            <AlertDialogDescription>\n              This action will permanently delete \"{selectedOrganization?.name}\". \n              This action cannot be undone and will remove all associated data.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel onClick={() => setSelectedOrganization(null)}>\n              Cancel\n            </AlertDialogCancel>\n            <AlertDialogAction\n              onClick={handleConfirmDelete}\n              className=\"bg-red-600 hover:bg-red-700\"\n              disabled={deleteOrganizationMutation.isPending}\n            >\n              {deleteOrganizationMutation.isPending ? 'Deleting...' : 'Delete Organization'}\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </div>\n  )\n}\n\nexport default OrganizationsPage","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/pages/Products.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":87,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":87,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3588,3591],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3588,3591],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from 'react'\nimport { toast } from 'sonner'\nimport { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { ProductsTable } from '@/components/products/ProductsTable'\nimport { ProductForm } from '@/components/products/ProductForm'\nimport { useProducts, useCreateProduct, useUpdateProduct, useDeleteProduct } from '@/hooks/useProducts'\nimport { Package, Plus, Search, Archive, Star } from 'lucide-react'\nimport type { Product, ProductUpdate } from '@/types/entities'\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from '@/components/ui/dialog'\nimport { Badge } from '@/components/ui/badge'\n\nfunction ProductsPage() {\n  const [searchTerm, setSearchTerm] = useState('')\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false)\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false)\n  const [editingProduct, setEditingProduct] = useState<Product | null>(null)\n  const { data: products = [], isLoading } = useProducts()\n  const createProductMutation = useCreateProduct()\n  const updateProductMutation = useUpdateProduct()\n  const deleteProductMutation = useDeleteProduct()\n\n  const filteredProducts = products.filter(product =>\n    product.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    (product.sku && product.sku.toLowerCase().includes(searchTerm.toLowerCase())) ||\n    (product.category && product.category.toLowerCase().includes(searchTerm.toLowerCase())) ||\n    (product.principal?.name && product.principal.name.toLowerCase().includes(searchTerm.toLowerCase()))\n  )\n\n  const activeProducts = products.length // Just show total for now\n  const inactiveProducts = 0 // No inactive tracking yet\n  \n  // Group products by category\n  const categories = [...new Set(products.map(p => p.category).filter(Boolean))]\n\n  const handleEdit = (product: Product) => {\n    setEditingProduct(product)\n    setIsEditDialogOpen(true)\n  }\n\n  const handleDelete = async (product: Product) => {\n    if (window.confirm(`Are you sure you want to delete ${product.name}?`)) {\n      try {\n        await deleteProductMutation.mutateAsync(product.id)\n        toast.success('Product deleted successfully!')\n      } catch (error) {\n        console.error('Failed to delete product:', error)\n        toast.error('Failed to delete product. Please try again.')\n      }\n    }\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold flex items-center gap-2\">\n            <Package className=\"h-8 w-8 text-purple-600\" />\n            Products\n          </h1>\n          <p className=\"text-muted-foreground mt-1\">\n            Manage your product catalog and inventory\n          </p>\n        </div>\n        <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n          <DialogTrigger asChild>\n            <Button>\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Add Product\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-4xl w-[calc(100vw-2rem)] sm:max-w-4xl max-h-[90vh] overflow-hidden\">\n            <DialogHeader>\n              <DialogTitle>Create New Product</DialogTitle>\n            </DialogHeader>\n            <div className=\"max-h-[75vh] overflow-y-auto pr-2\">\n              <ProductForm \n              onSubmit={async (data) => {\n                try {\n                  await createProductMutation.mutateAsync(data as any)\n                  setIsCreateDialogOpen(false)\n                  toast.success('Product created successfully!')\n                } catch (error) {\n                  console.error('Failed to create product:', error)\n                  toast.error('Failed to create product. Please try again.')\n                }\n              }}\n              loading={createProductMutation.isPending}\n            />\n            </div>\n          </DialogContent>\n        </Dialog>\n\n        {/* Edit Product Dialog */}\n        <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>\n          <DialogContent className=\"max-w-4xl w-[calc(100vw-2rem)] sm:max-w-4xl max-h-[90vh] overflow-hidden\">\n            <DialogHeader>\n              <DialogTitle>Edit Product</DialogTitle>\n            </DialogHeader>\n            <div className=\"max-h-[75vh] overflow-y-auto pr-2\">\n              {editingProduct && (\n                <ProductForm \n                initialData={editingProduct}\n                onSubmit={async (data) => {\n                  try {\n                    await updateProductMutation.mutateAsync({\n                      id: editingProduct.id,\n                      updates: data as ProductUpdate\n                    })\n                    setIsEditDialogOpen(false)\n                    setEditingProduct(null)\n                    toast.success('Product updated successfully!')\n                  } catch (error) {\n                    console.error('Failed to update product:', error)\n                    toast.error('Failed to update product. Please try again.')\n                  }\n                }}\n                loading={updateProductMutation.isPending}\n                />\n              )}\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Products</CardTitle>\n            <Package className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{products.length}</div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Active Products</CardTitle>\n            <Star className=\"h-4 w-4 text-green-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{activeProducts}</div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Inactive Products</CardTitle>\n            <Archive className=\"h-4 w-4 text-red-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{inactiveProducts}</div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Categories</CardTitle>\n            <Package className=\"h-4 w-4 text-blue-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{categories.length}</div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Categories Overview */}\n      {categories.length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Categories Overview</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n              {categories.map(category => {\n                const categoryProducts = products.filter(p => p.category === category)\n                const activeCount = categoryProducts.length // All products are considered active for now\n                \n                return (\n                  <div key={category} className=\"p-4 border rounded-lg\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <h3 className=\"font-medium text-sm\">{category}</h3>\n                      <Badge variant=\"secondary\">{categoryProducts.length}</Badge>\n                    </div>\n                    <p className=\"text-xs text-muted-foreground\">\n                      {activeCount} products\n                    </p>\n                  </div>\n                )\n              })}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Search and Filter */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Products</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"flex items-center space-x-2\">\n            <Search className=\"h-4 w-4 text-muted-foreground\" />\n            <Input\n              placeholder=\"Search products by name, SKU, category, or organization...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"max-w-sm\"\n            />\n          </div>\n\n          {isLoading ? (\n            <div className=\"text-center py-8\">Loading products...</div>\n          ) : (\n            <ProductsTable \n              products={filteredProducts} \n              onEdit={handleEdit}\n              onDelete={handleDelete}\n            />\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n\nexport default ProductsPage","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/stores/contactAdvocacyStore.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":115,"column":77,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":115,"endColumn":80,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3768,3771],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3768,3771],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_timeframe' is defined but never used.","line":746,"column":37,"nodeType":"Identifier","messageId":"unusedVar","endLine":746,"endColumn":77}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Contact Advocacy Store - Principal CRM Business Logic\n * \n * Manages contact-to-principal advocacy relationships with advanced business rules,\n * advocacy scoring, and performance optimization for mobile field usage.\n * \n * Key Features:\n * - Contact-Principal relationship management\n * - Advocacy strength scoring (1-10 scale)\n * - Business rule validation\n * - Performance-optimized caching\n * - Mobile-first design\n */\n\nimport { create } from 'zustand'\nimport { devtools, persist, subscribeWithSelector } from 'zustand/middleware'\nimport { supabase } from '@/lib/supabase'\nimport type {\n  ContactPreferredPrincipal,\n  ContactPreferredPrincipalInsert,\n  ContactPreferredPrincipalUpdate,\n  Contact,\n  Organization,\n  PurchaseInfluenceLevel,\n  DecisionAuthorityRole\n} from '@/types/entities'\n\n// Extended types for advocacy management\nexport interface ContactAdvocacyRelationship extends ContactPreferredPrincipal {\n  contact?: Contact\n  principal_organization?: Organization\n  computed_advocacy_score?: number\n  influence_weight?: number\n  authority_weight?: number\n}\n\nexport interface AdvocacyFilters {\n  contact_id?: string\n  principal_organization_id?: string\n  advocacy_strength_min?: number\n  advocacy_strength_max?: number\n  relationship_type?: string | string[]\n  search?: string\n  computed_score_min?: number\n}\n\nexport interface AdvocacyMetrics {\n  total_relationships: number\n  average_advocacy_strength: number\n  high_advocacy_count: number // strength >= 8\n  medium_advocacy_count: number // strength 4-7\n  low_advocacy_count: number // strength <= 3\n  relationship_types: Record<string, number>\n  top_principals: Array<{\n    organization: Organization\n    relationship_count: number\n    average_strength: number\n  }>\n  top_advocates: Array<{\n    contact: Contact\n    relationship_count: number\n    average_strength: number\n    computed_score: number\n  }>\n}\n\nexport interface ContactAdvocacyState {\n  // Core State\n  relationships: ContactAdvocacyRelationship[]\n  selectedRelationship: ContactAdvocacyRelationship | null\n  \n  // Loading States\n  isLoading: boolean\n  isCreating: boolean\n  isUpdating: boolean\n  isDeleting: boolean\n  \n  // Cache Management\n  lastFetched: number | null\n  cacheTimeout: number // 5 minutes default\n  \n  // Filters and Search\n  filters: AdvocacyFilters\n  searchQuery: string\n  \n  // Metrics\n  metrics: AdvocacyMetrics | null\n  \n  // Error Handling\n  error: string | null\n  \n  // Business Logic Methods\n  actions: {\n    // Core CRUD Operations\n    fetchRelationships: (filters?: AdvocacyFilters) => Promise<void>\n    fetchRelationshipsByContact: (contactId: string) => Promise<ContactAdvocacyRelationship[]>\n    fetchRelationshipsByPrincipal: (principalId: string) => Promise<ContactAdvocacyRelationship[]>\n    createRelationship: (data: ContactPreferredPrincipalInsert) => Promise<ContactAdvocacyRelationship>\n    updateRelationship: (id: string, updates: ContactPreferredPrincipalUpdate) => Promise<ContactAdvocacyRelationship>\n    deleteRelationship: (id: string) => Promise<void>\n    \n    // Advanced Operations\n    computeAdvocacyScore: (contact: Contact, advocacyStrength: number) => number\n    validateAdvocacyAssignment: (contactId: string, principalId: string) => Promise<{ valid: boolean; reason?: string }>\n    bulkUpdateAdvocacyStrength: (relationships: Array<{ id: string; advocacy_strength: number }>) => Promise<void>\n    \n    // Search and Filtering\n    setFilters: (filters: AdvocacyFilters) => void\n    setSearchQuery: (query: string) => void\n    clearFilters: () => void\n    getFilteredRelationships: () => ContactAdvocacyRelationship[]\n    \n    // Metrics and Analytics\n    calculateMetrics: () => Promise<AdvocacyMetrics>\n    getAdvocacyTrends: (timeframe: 'week' | 'month' | 'quarter') => Promise<any>\n    \n    // Cache Management\n    invalidateCache: () => void\n    refreshCache: () => Promise<void>\n    \n    // Utility Methods\n    setSelectedRelationship: (relationship: ContactAdvocacyRelationship | null) => void\n    clearError: () => void\n    reset: () => void\n  }\n}\n\n// Business Logic Constants\nconst ADVOCACY_SCORING_WEIGHTS = {\n  purchase_influence: {\n    'High': 1.0,\n    'Medium': 0.7,\n    'Low': 0.4,\n    'Unknown': 0.3\n  },\n  decision_authority: {\n    'Decision Maker': 1.0,\n    'Influencer': 0.8,\n    'End User': 0.5,\n    'Gatekeeper': 0.6\n  }\n} as const\n\nconst DEFAULT_CACHE_TIMEOUT = 5 * 60 * 1000 // 5 minutes\nconst HIGH_ADVOCACY_THRESHOLD = 8\nconst MEDIUM_ADVOCACY_THRESHOLD = 4\n\n// Initial state\nconst initialState = {\n  relationships: [],\n  selectedRelationship: null,\n  isLoading: false,\n  isCreating: false,\n  isUpdating: false,\n  isDeleting: false,\n  lastFetched: null,\n  cacheTimeout: DEFAULT_CACHE_TIMEOUT,\n  filters: {},\n  searchQuery: '',\n  metrics: null,\n  error: null\n}\n\nexport const useContactAdvocacyStore = create<ContactAdvocacyState>()(\n  devtools(\n    persist(\n      subscribeWithSelector((set, get) => ({\n        ...initialState,\n        \n        actions: {\n          // Core CRUD Operations\n          fetchRelationships: async (filters?: AdvocacyFilters) => {\n            const state = get()\n            \n            // Check cache validity\n            if (\n              state.lastFetched &&\n              Date.now() - state.lastFetched < state.cacheTimeout &&\n              !filters\n            ) {\n              return\n            }\n\n            set({ isLoading: true, error: null })\n\n            try {\n              let query = supabase\n                .from('contact_preferred_principals')\n                .select(`\n                  *,\n                  contact:contacts(*),\n                  principal_organization:organizations(*)\n                `)\n                .is('deleted_at', null)\n\n              // Apply filters\n              if (filters?.contact_id) {\n                query = query.eq('contact_id', filters.contact_id)\n              }\n              if (filters?.principal_organization_id) {\n                query = query.eq('principal_organization_id', filters.principal_organization_id)\n              }\n              if (filters?.advocacy_strength_min) {\n                query = query.gte('advocacy_strength', filters.advocacy_strength_min)\n              }\n              if (filters?.advocacy_strength_max) {\n                query = query.lte('advocacy_strength', filters.advocacy_strength_max)\n              }\n              if (filters?.relationship_type) {\n                if (Array.isArray(filters.relationship_type)) {\n                  query = query.in('relationship_type', filters.relationship_type)\n                } else {\n                  query = query.eq('relationship_type', filters.relationship_type)\n                }\n              }\n\n              const { data, error } = await query\n              \n              if (error) throw error\n\n              // Compute advocacy scores for each relationship\n              const relationshipsWithScores = data.map(relationship => {\n                const computedScore = relationship.contact \n                  ? get().actions.computeAdvocacyScore(relationship.contact, relationship.advocacy_strength || 5)\n                  : relationship.advocacy_strength || 5\n\n                return {\n                  ...relationship,\n                  computed_advocacy_score: computedScore,\n                  influence_weight: relationship.contact?.purchase_influence \n                    ? ADVOCACY_SCORING_WEIGHTS.purchase_influence[relationship.contact.purchase_influence as PurchaseInfluenceLevel]\n                    : 0.3,\n                  authority_weight: relationship.contact?.decision_authority\n                    ? ADVOCACY_SCORING_WEIGHTS.decision_authority[relationship.contact.decision_authority as DecisionAuthorityRole]\n                    : 0.5\n                }\n              })\n\n              set({\n                relationships: relationshipsWithScores,\n                lastFetched: Date.now(),\n                isLoading: false,\n                filters: filters || state.filters\n              })\n\n            } catch (error) {\n              set({\n                error: error instanceof Error ? error.message : 'Failed to fetch advocacy relationships',\n                isLoading: false\n              })\n            }\n          },\n\n          fetchRelationshipsByContact: async (contactId: string) => {\n            try {\n              const { data, error } = await supabase\n                .from('contact_preferred_principals')\n                .select(`\n                  *,\n                  contact:contacts(*),\n                  principal_organization:organizations(*)\n                `)\n                .eq('contact_id', contactId)\n                .is('deleted_at', null)\n\n              if (error) throw error\n\n              const relationshipsWithScores = data.map(relationship => ({\n                ...relationship,\n                computed_advocacy_score: relationship.contact \n                  ? get().actions.computeAdvocacyScore(relationship.contact, relationship.advocacy_strength || 5)\n                  : relationship.advocacy_strength || 5\n              }))\n\n              return relationshipsWithScores\n            } catch (error) {\n              set({\n                error: error instanceof Error ? error.message : 'Failed to fetch contact advocacy relationships'\n              })\n              return []\n            }\n          },\n\n          fetchRelationshipsByPrincipal: async (principalId: string) => {\n            try {\n              const { data, error } = await supabase\n                .from('contact_preferred_principals')\n                .select(`\n                  *,\n                  contact:contacts(*),\n                  principal_organization:organizations(*)\n                `)\n                .eq('principal_organization_id', principalId)\n                .is('deleted_at', null)\n\n              if (error) throw error\n\n              const relationshipsWithScores = data.map(relationship => ({\n                ...relationship,\n                computed_advocacy_score: relationship.contact \n                  ? get().actions.computeAdvocacyScore(relationship.contact, relationship.advocacy_strength || 5)\n                  : relationship.advocacy_strength || 5\n              }))\n\n              return relationshipsWithScores\n            } catch (error) {\n              set({\n                error: error instanceof Error ? error.message : 'Failed to fetch principal advocacy relationships'\n              })\n              return []\n            }\n          },\n\n          createRelationship: async (data: ContactPreferredPrincipalInsert) => {\n            set({ isCreating: true, error: null })\n\n            try {\n              // Get current user for audit fields\n              const { data: { user }, error: authError } = await supabase.auth.getUser()\n              \n              if (authError || !user) {\n                throw new Error('Authentication required to create advocacy relationship')\n              }\n\n              // Validate the advocacy assignment\n              const validation = await get().actions.validateAdvocacyAssignment(\n                data.contact_id,\n                data.principal_organization_id\n              )\n\n              if (!validation.valid) {\n                throw new Error(validation.reason || 'Invalid advocacy assignment')\n              }\n\n              // Ensure required audit fields\n              const relationshipData = {\n                ...data,\n                created_by: user.id,\n                updated_by: user.id,\n              }\n\n              const { data: newRelationship, error } = await supabase\n                .from('contact_preferred_principals')\n                .insert(relationshipData)\n                .select(`\n                  *,\n                  contact:contacts(*),\n                  principal_organization:organizations(*)\n                `)\n                .single()\n\n              if (error) throw error\n\n              // Compute advocacy score\n              const relationshipWithScore = {\n                ...newRelationship,\n                computed_advocacy_score: newRelationship.contact \n                  ? get().actions.computeAdvocacyScore(newRelationship.contact, newRelationship.advocacy_strength || 5)\n                  : newRelationship.advocacy_strength || 5\n              }\n\n              // Update store state\n              set(state => ({\n                relationships: [relationshipWithScore, ...state.relationships],\n                isCreating: false\n              }))\n\n              // Invalidate cache\n              get().actions.invalidateCache()\n\n              return relationshipWithScore\n\n            } catch (error) {\n              set({\n                error: error instanceof Error ? error.message : 'Failed to create advocacy relationship',\n                isCreating: false\n              })\n              throw error\n            }\n          },\n\n          updateRelationship: async (id: string, updates: ContactPreferredPrincipalUpdate) => {\n            set({ isUpdating: true, error: null })\n\n            try {\n              const { data: updatedRelationship, error } = await supabase\n                .from('contact_preferred_principals')\n                .update({ ...updates, updated_at: new Date().toISOString() })\n                .eq('id', id)\n                .select(`\n                  *,\n                  contact:contacts(*),\n                  principal_organization:organizations(*)\n                `)\n                .single()\n\n              if (error) throw error\n\n              // Compute advocacy score\n              const relationshipWithScore = {\n                ...updatedRelationship,\n                computed_advocacy_score: updatedRelationship.contact \n                  ? get().actions.computeAdvocacyScore(updatedRelationship.contact, updatedRelationship.advocacy_strength || 5)\n                  : updatedRelationship.advocacy_strength || 5\n              }\n\n              // Update store state\n              set(state => ({\n                relationships: state.relationships.map(rel => \n                  rel.id === id ? relationshipWithScore : rel\n                ),\n                selectedRelationship: state.selectedRelationship?.id === id \n                  ? relationshipWithScore \n                  : state.selectedRelationship,\n                isUpdating: false\n              }))\n\n              // Invalidate cache\n              get().actions.invalidateCache()\n\n              return relationshipWithScore\n\n            } catch (error) {\n              set({\n                error: error instanceof Error ? error.message : 'Failed to update advocacy relationship',\n                isUpdating: false\n              })\n              throw error\n            }\n          },\n\n          deleteRelationship: async (id: string) => {\n            set({ isDeleting: true, error: null })\n\n            try {\n              const { error } = await supabase\n                .from('contact_preferred_principals')\n                .update({ \n                  deleted_at: new Date().toISOString(),\n                  updated_at: new Date().toISOString()\n                })\n                .eq('id', id)\n\n              if (error) throw error\n\n              // Update store state\n              set(state => ({\n                relationships: state.relationships.filter(rel => rel.id !== id),\n                selectedRelationship: state.selectedRelationship?.id === id \n                  ? null \n                  : state.selectedRelationship,\n                isDeleting: false\n              }))\n\n              // Invalidate cache\n              get().actions.invalidateCache()\n\n            } catch (error) {\n              set({\n                error: error instanceof Error ? error.message : 'Failed to delete advocacy relationship',\n                isDeleting: false\n              })\n              throw error\n            }\n          },\n\n          // Advanced Business Logic\n          computeAdvocacyScore: (contact: Contact, advocacyStrength: number) => {\n            // Base advocacy strength (1-10)\n            const baseScore = advocacyStrength\n\n            // Purchase influence weight\n            const influenceWeight = contact.purchase_influence \n              ? ADVOCACY_SCORING_WEIGHTS.purchase_influence[contact.purchase_influence as PurchaseInfluenceLevel]\n              : 0.3\n\n            // Decision authority weight\n            const authorityWeight = contact.decision_authority\n              ? ADVOCACY_SCORING_WEIGHTS.decision_authority[contact.decision_authority as DecisionAuthorityRole]\n              : 0.5\n\n            // Computed score: base score * influence factor * authority factor\n            // Scale to 1-10 range and round to 1 decimal place\n            const computedScore = Math.min(10, baseScore * influenceWeight * authorityWeight)\n            return Math.round(computedScore * 10) / 10\n          },\n\n          validateAdvocacyAssignment: async (contactId: string, principalId: string) => {\n            try {\n              // Check if relationship already exists\n              const { data: existing, error } = await supabase\n                .from('contact_preferred_principals')\n                .select('id')\n                .eq('contact_id', contactId)\n                .eq('principal_organization_id', principalId)\n                .is('deleted_at', null)\n                .maybeSingle()\n\n              if (error) throw error\n\n              if (existing) {\n                return {\n                  valid: false,\n                  reason: 'Advocacy relationship already exists between this contact and principal'\n                }\n              }\n\n              // Validate contact exists and is active\n              const { data: contact, error: contactError } = await supabase\n                .from('contacts')\n                .select('id, organization_id')\n                .eq('id', contactId)\n                .is('deleted_at', null)\n                .single()\n\n              if (contactError || !contact) {\n                return {\n                  valid: false,\n                  reason: 'Contact not found or inactive'\n                }\n              }\n\n              // Validate principal organization exists and is a principal\n              const { data: principal, error: principalError } = await supabase\n                .from('organizations')\n                .select('id, type')\n                .eq('id', principalId)\n                .eq('type', 'principal')\n                .is('deleted_at', null)\n                .single()\n\n              if (principalError || !principal) {\n                return {\n                  valid: false,\n                  reason: 'Principal organization not found or not a principal type'\n                }\n              }\n\n              return { valid: true }\n\n            } catch (error) {\n              return {\n                valid: false,\n                reason: error instanceof Error ? error.message : 'Validation failed'\n              }\n            }\n          },\n\n          bulkUpdateAdvocacyStrength: async (relationships: Array<{ id: string; advocacy_strength: number }>) => {\n            set({ isUpdating: true, error: null })\n\n            try {\n              const updates = relationships.map(async ({ id, advocacy_strength }) => {\n                return supabase\n                  .from('contact_preferred_principals')\n                  .update({ \n                    advocacy_strength,\n                    updated_at: new Date().toISOString()\n                  })\n                  .eq('id', id)\n              })\n\n              await Promise.all(updates)\n\n              // Refresh relationships to get updated data\n              await get().actions.fetchRelationships()\n\n              set({ isUpdating: false })\n\n            } catch (error) {\n              set({\n                error: error instanceof Error ? error.message : 'Failed to bulk update advocacy strengths',\n                isUpdating: false\n              })\n              throw error\n            }\n          },\n\n          // Search and Filtering\n          setFilters: (filters: AdvocacyFilters) => {\n            set({ filters })\n          },\n\n          setSearchQuery: (query: string) => {\n            set({ searchQuery: query })\n          },\n\n          clearFilters: () => {\n            set({ filters: {}, searchQuery: '' })\n          },\n\n          getFilteredRelationships: () => {\n            const { relationships, filters, searchQuery } = get()\n            \n            let filtered = [...relationships]\n\n            // Apply search query\n            if (searchQuery) {\n              const query = searchQuery.toLowerCase()\n              filtered = filtered.filter(rel => \n                rel.contact?.first_name?.toLowerCase().includes(query) ||\n                rel.contact?.last_name?.toLowerCase().includes(query) ||\n                rel.principal_organization?.name?.toLowerCase().includes(query) ||\n                rel.advocacy_notes?.toLowerCase().includes(query)\n              )\n            }\n\n            // Apply computed score filters\n            if (filters.computed_score_min) {\n              filtered = filtered.filter(rel => \n                (rel.computed_advocacy_score || 0) >= filters.computed_score_min!\n              )\n            }\n\n            return filtered\n          },\n\n          // Metrics and Analytics\n          calculateMetrics: async () => {\n            const { relationships } = get()\n\n            if (relationships.length === 0) {\n              const emptyMetrics: AdvocacyMetrics = {\n                total_relationships: 0,\n                average_advocacy_strength: 0,\n                high_advocacy_count: 0,\n                medium_advocacy_count: 0,\n                low_advocacy_count: 0,\n                relationship_types: {},\n                top_principals: [],\n                top_advocates: []\n              }\n              set({ metrics: emptyMetrics })\n              return emptyMetrics\n            }\n\n            // Calculate basic metrics\n            const totalRelationships = relationships.length\n            const averageAdvocacyStrength = relationships.reduce(\n              (sum, rel) => sum + (rel.advocacy_strength || 0), 0\n            ) / totalRelationships\n\n            const highAdvocacyCount = relationships.filter(\n              rel => (rel.advocacy_strength || 0) >= HIGH_ADVOCACY_THRESHOLD\n            ).length\n\n            const mediumAdvocacyCount = relationships.filter(\n              rel => {\n                const strength = rel.advocacy_strength || 0\n                return strength >= MEDIUM_ADVOCACY_THRESHOLD && strength < HIGH_ADVOCACY_THRESHOLD\n              }\n            ).length\n\n            const lowAdvocacyCount = relationships.filter(\n              rel => (rel.advocacy_strength || 0) < MEDIUM_ADVOCACY_THRESHOLD\n            ).length\n\n            // Relationship types distribution\n            const relationshipTypes: Record<string, number> = {}\n            relationships.forEach(rel => {\n              const type = rel.relationship_type || 'unknown'\n              relationshipTypes[type] = (relationshipTypes[type] || 0) + 1\n            })\n\n            // Top principals by relationship count and average strength\n            const principalStats: Record<string, { \n              organization: Organization\n              count: number\n              totalStrength: number\n            }> = {}\n\n            relationships.forEach(rel => {\n              if (rel.principal_organization) {\n                const id = rel.principal_organization.id\n                if (!principalStats[id]) {\n                  principalStats[id] = {\n                    organization: rel.principal_organization,\n                    count: 0,\n                    totalStrength: 0\n                  }\n                }\n                principalStats[id].count += 1\n                principalStats[id].totalStrength += rel.advocacy_strength || 0\n              }\n            })\n\n            const topPrincipals = Object.values(principalStats)\n              .map(stat => ({\n                organization: stat.organization,\n                relationship_count: stat.count,\n                average_strength: stat.totalStrength / stat.count\n              }))\n              .sort((a, b) => b.relationship_count - a.relationship_count)\n              .slice(0, 10)\n\n            // Top advocates by relationship count and computed score\n            const contactStats: Record<string, {\n              contact: Contact\n              count: number\n              totalStrength: number\n              totalComputedScore: number\n            }> = {}\n\n            relationships.forEach(rel => {\n              if (rel.contact) {\n                const id = rel.contact.id\n                if (!contactStats[id]) {\n                  contactStats[id] = {\n                    contact: rel.contact,\n                    count: 0,\n                    totalStrength: 0,\n                    totalComputedScore: 0\n                  }\n                }\n                contactStats[id].count += 1\n                contactStats[id].totalStrength += rel.advocacy_strength || 0\n                contactStats[id].totalComputedScore += rel.computed_advocacy_score || 0\n              }\n            })\n\n            const topAdvocates = Object.values(contactStats)\n              .map(stat => ({\n                contact: stat.contact,\n                relationship_count: stat.count,\n                average_strength: stat.totalStrength / stat.count,\n                computed_score: stat.totalComputedScore / stat.count\n              }))\n              .sort((a, b) => b.computed_score - a.computed_score)\n              .slice(0, 10)\n\n            const metrics: AdvocacyMetrics = {\n              total_relationships: totalRelationships,\n              average_advocacy_strength: Math.round(averageAdvocacyStrength * 10) / 10,\n              high_advocacy_count: highAdvocacyCount,\n              medium_advocacy_count: mediumAdvocacyCount,\n              low_advocacy_count: lowAdvocacyCount,\n              relationship_types: relationshipTypes,\n              top_principals: topPrincipals,\n              top_advocates: topAdvocates\n            }\n\n            set({ metrics })\n            return metrics\n          },\n\n          getAdvocacyTrends: async (_timeframe: 'week' | 'month' | 'quarter') => {\n            // Implementation for trend analysis would go here\n            // This would analyze advocacy strength changes over time\n            return {}\n          },\n\n          // Cache Management\n          invalidateCache: () => {\n            set({ lastFetched: null })\n          },\n\n          refreshCache: async () => {\n            get().actions.invalidateCache()\n            await get().actions.fetchRelationships()\n          },\n\n          // Utility Methods\n          setSelectedRelationship: (relationship: ContactAdvocacyRelationship | null) => {\n            set({ selectedRelationship: relationship })\n          },\n\n          clearError: () => {\n            set({ error: null })\n          },\n\n          reset: () => {\n            set(initialState)\n          }\n        }\n      })),\n      {\n        name: 'contact-advocacy-store',\n        partialize: (state) => ({\n          // Only persist non-sensitive data\n          cacheTimeout: state.cacheTimeout,\n          filters: state.filters\n        })\n      }\n    ),\n    {\n      name: 'contact-advocacy-store'\n    }\n  )\n)\n\n// Export helper hooks for common use cases\nexport const useAdvocacyRelationships = () => {\n  const store = useContactAdvocacyStore()\n  return {\n    relationships: store.relationships,\n    isLoading: store.isLoading,\n    error: store.error,\n    fetchRelationships: store.actions.fetchRelationships,\n    getFilteredRelationships: store.actions.getFilteredRelationships\n  }\n}\n\nexport const useAdvocacyActions = () => {\n  const store = useContactAdvocacyStore()\n  return {\n    createRelationship: store.actions.createRelationship,\n    updateRelationship: store.actions.updateRelationship,\n    deleteRelationship: store.actions.deleteRelationship,\n    computeAdvocacyScore: store.actions.computeAdvocacyScore,\n    validateAdvocacyAssignment: store.actions.validateAdvocacyAssignment,\n    isCreating: store.isCreating,\n    isUpdating: store.isUpdating,\n    isDeleting: store.isDeleting\n  }\n}\n\nexport const useAdvocacyMetrics = () => {\n  const store = useContactAdvocacyStore()\n  return {\n    metrics: store.metrics,\n    calculateMetrics: store.actions.calculateMetrics\n  }\n}\n\nexport const useAdvocacyFilters = () => {\n  const store = useContactAdvocacyStore()\n  return {\n    filters: store.filters,\n    searchQuery: store.searchQuery,\n    setFilters: store.actions.setFilters,\n    setSearchQuery: store.actions.setSearchQuery,\n    clearFilters: store.actions.clearFilters\n  }\n}","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/stores/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/stores/opportunityAutoNamingStore.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/types/components.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":93,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":93,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2108,2111],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2108,2111],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":136,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":136,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2957,2960],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2957,2960],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":186,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":186,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3995,3998],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3995,3998],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":188,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":188,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4039,4042],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4039,4042],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":189,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":189,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4066,4069],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4066,4069],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":201,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":201,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4321,4324],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4321,4324],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":206,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":206,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4421,4424],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4421,4424],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":207,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":207,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4448,4451],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4448,4451],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":251,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":251,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5988,5991],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5988,5991],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":259,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":259,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6179,6182],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6179,6182],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":268,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":268,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6405,6408],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6405,6408],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":277,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":277,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6636,6639],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6636,6639],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":287,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":287,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6900,6903],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6900,6903],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":341,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":341,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8005,8008],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8005,8008],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react'\nimport type { LucideIcon } from 'lucide-react'\nimport type {\n  Organization,\n  Contact,\n  Product,\n  Opportunity,\n  Interaction,\n  ContactWithOrganization,\n  OpportunityWithRelations,\n  InteractionWithRelations,\n  ProductWithPrincipal,\n  OrganizationFilters,\n  ContactFilters,\n  ProductFilters,\n  OpportunityFilters,\n  InteractionFilters\n} from './entities'\n\n// Base component props\nexport interface BaseComponentProps {\n  className?: string\n  children?: React.ReactNode\n}\n\n// Data table column definition\nexport interface DataTableColumn<T> {\n  key: keyof T\n  header: string\n  accessor?: (row: T) => React.ReactNode\n  sortable?: boolean\n  filterable?: boolean\n  width?: string | number\n  align?: 'left' | 'center' | 'right'\n}\n\n// Generic data table props\nexport interface DataTableProps<T> {\n  data: T[]\n  columns: DataTableColumn<T>[]\n  loading?: boolean\n  error?: string | null\n  onRowClick?: (row: T) => void\n  onEdit?: (row: T) => void\n  onDelete?: (row: T) => void\n  onBulkAction?: (selectedRows: T[], action: string) => void\n  searchable?: boolean\n  searchKey?: keyof T\n  searchPlaceholder?: string\n  filterable?: boolean\n  sortable?: boolean\n  pagination?: {\n    page: number\n    pageSize: number\n    total: number\n    onPageChange: (page: number) => void\n    onPageSizeChange: (pageSize: number) => void\n  }\n  selection?: {\n    enabled: boolean\n    selectedRows?: string[]\n    onSelectionChange?: (selectedIds: string[]) => void\n  }\n  emptyStateMessage?: string\n  emptyStateIcon?: LucideIcon\n}\n\n// Form modal props\nexport interface FormModalProps {\n  isOpen: boolean\n  onClose: () => void\n  title: string\n  children: React.ReactNode\n  loading?: boolean\n  footer?: React.ReactNode\n  size?: 'sm' | 'md' | 'lg' | 'xl' | 'full'\n}\n\n// Confirmation dialog props\nexport interface ConfirmationDialogProps {\n  isOpen: boolean\n  onClose: () => void\n  onConfirm: () => void\n  title: string\n  description: string\n  confirmText?: string\n  cancelText?: string\n  variant?: 'default' | 'destructive'\n  loading?: boolean\n}\n\n// Search and filter props\nexport interface SearchFilterProps<T = any> {\n  searchValue: string\n  onSearchChange: (value: string) => void\n  searchPlaceholder?: string\n  filters?: T\n  onFilterChange?: (filters: T) => void\n  onClearFilters?: () => void\n  filterComponents?: React.ReactNode[]\n}\n\n// Filter option for select filters\nexport interface FilterOption {\n  value: string | number | boolean\n  label: string\n  count?: number\n}\n\n// Stats card props\nexport interface StatsCardProps {\n  title: string\n  value: string | number\n  description?: string\n  icon?: LucideIcon\n  trend?: {\n    value: number\n    isPositive: boolean\n    period: string\n  }\n  onClick?: () => void\n  loading?: boolean\n}\n\n// Activity feed item\nexport interface ActivityFeedItem {\n  id: string\n  type: string\n  title: string\n  description?: string\n  timestamp: Date\n  user?: {\n    name: string\n    avatar?: string\n  }\n  metadata?: Record<string, any>\n  icon?: LucideIcon\n  variant?: 'default' | 'success' | 'warning' | 'error'\n}\n\n// Activity feed props\nexport interface ActivityFeedProps {\n  items: ActivityFeedItem[]\n  loading?: boolean\n  onLoadMore?: () => void\n  hasMore?: boolean\n  emptyMessage?: string\n  limit?: number\n}\n\n// Form field props\nexport interface FormFieldProps {\n  name: string\n  label?: string\n  placeholder?: string\n  description?: string\n  required?: boolean\n  disabled?: boolean\n  error?: string\n  className?: string\n}\n\n// Select field option\nexport interface SelectOption {\n  value: string | number\n  label: string\n  disabled?: boolean\n  description?: string\n}\n\n// Select field props\nexport interface SelectFieldProps extends FormFieldProps {\n  options: SelectOption[]\n  multiple?: boolean\n  searchable?: boolean\n  clearable?: boolean\n  loading?: boolean\n  onSearch?: (query: string) => void\n}\n\n// Multi-step form props\nexport interface MultiStepFormProps {\n  steps: FormStep[]\n  currentStep: number\n  onStepChange: (step: number) => void\n  onComplete: (data: any) => void\n  onCancel: () => void\n  data: any\n  onDataChange: (data: any) => void\n  loading?: boolean\n  canGoBack?: boolean\n  canGoNext?: boolean\n  showProgress?: boolean\n}\n\nexport interface FormStep {\n  id: string\n  title: string\n  description?: string\n  component: React.ComponentType<FormStepProps>\n  validation?: (data: any) => boolean | Promise<boolean>\n  optional?: boolean\n}\n\nexport interface FormStepProps {\n  data: any\n  onDataChange: (data: any) => void\n  onNext: () => void\n  onPrevious: () => void\n  onComplete: () => void\n  onCancel: () => void\n  isFirstStep: boolean\n  isLastStep: boolean\n  errors?: Record<string, string>\n}\n\n// Entity-specific component props\nexport interface OrganizationTableProps extends Omit<DataTableProps<Organization>, 'data' | 'columns'> {\n  organizations: Organization[]\n  filters?: OrganizationFilters\n  onFiltersChange?: (filters: OrganizationFilters) => void\n}\n\nexport interface ContactTableProps extends Omit<DataTableProps<ContactWithOrganization>, 'data' | 'columns'> {\n  contacts: ContactWithOrganization[]\n  filters?: ContactFilters\n  onFiltersChange?: (filters: ContactFilters) => void\n}\n\nexport interface ProductTableProps extends Omit<DataTableProps<ProductWithPrincipal>, 'data' | 'columns'> {\n  products: ProductWithPrincipal[]\n  filters?: ProductFilters\n  onFiltersChange?: (filters: ProductFilters) => void\n}\n\nexport interface OpportunityTableProps extends Omit<DataTableProps<OpportunityWithRelations>, 'data' | 'columns'> {\n  opportunities: OpportunityWithRelations[]\n  filters?: OpportunityFilters\n  onFiltersChange?: (filters: OpportunityFilters) => void\n}\n\nexport interface InteractionTableProps extends Omit<DataTableProps<InteractionWithRelations>, 'data' | 'columns'> {\n  interactions: InteractionWithRelations[]\n  filters?: InteractionFilters\n  onFiltersChange?: (filters: InteractionFilters) => void\n}\n\n// Form component props\nexport interface OrganizationFormProps {\n  initialData?: Partial<Organization>\n  onSubmit: (data: any) => void | Promise<void>\n  onCancel?: () => void\n  loading?: boolean\n  mode?: 'create' | 'edit'\n}\n\nexport interface ContactFormProps {\n  initialData?: Partial<Contact>\n  onSubmit: (data: any) => void | Promise<void>\n  onCancel?: () => void\n  loading?: boolean\n  mode?: 'create' | 'edit'\n  preselectedOrganization?: string\n}\n\nexport interface ProductFormProps {\n  initialData?: Partial<Product>\n  onSubmit: (data: any) => void | Promise<void>\n  onCancel?: () => void\n  loading?: boolean\n  mode?: 'create' | 'edit'\n  preselectedPrincipal?: string\n}\n\nexport interface OpportunityFormProps {\n  initialData?: Partial<Opportunity>\n  onSubmit: (data: any) => void | Promise<void>\n  onCancel?: () => void\n  loading?: boolean\n  mode?: 'create' | 'edit'\n  preselectedOrganization?: string\n  preselectedContact?: string\n}\n\nexport interface InteractionFormProps {\n  initialData?: Partial<Interaction>\n  onSubmit: (data: any) => void | Promise<void>\n  onCancel?: () => void\n  loading?: boolean\n  mode?: 'create' | 'edit'\n  preselectedOpportunity?: string\n  preselectedContact?: string\n}\n\n// Navigation and layout props\nexport interface SidebarProps {\n  isCollapsed?: boolean\n  onToggle?: () => void\n  activeRoute?: string\n}\n\nexport interface HeaderProps {\n  title?: string\n  breadcrumbs?: BreadcrumbItem[]\n  actions?: React.ReactNode\n  showSearch?: boolean\n  onSearch?: (query: string) => void\n}\n\nexport interface BreadcrumbItem {\n  label: string\n  href?: string\n  isActive?: boolean\n}\n\n// Dashboard component props\nexport interface DashboardCardProps {\n  title: string\n  children: React.ReactNode\n  headerActions?: React.ReactNode\n  loading?: boolean\n  error?: string | null\n  className?: string\n}\n\nexport interface MetricCardProps {\n  label: string\n  value: string | number\n  change?: {\n    value: number\n    period: string\n    isPositive: boolean\n  }\n  icon?: LucideIcon\n  color?: 'blue' | 'green' | 'yellow' | 'red' | 'purple' | 'gray'\n  loading?: boolean\n}\n\n// Chart component props\nexport interface ChartProps {\n  data: any[]\n  loading?: boolean\n  error?: string | null\n  height?: number\n  showLegend?: boolean\n  showTooltip?: boolean\n  className?: string\n}\n\nexport interface BarChartProps extends ChartProps {\n  xKey: string\n  yKey: string\n  color?: string\n}\n\nexport interface LineChartProps extends ChartProps {\n  xKey: string\n  yKey: string\n  lines: Array<{\n    key: string\n    color: string\n    name: string\n  }>\n}\n\nexport interface PieChartProps extends ChartProps {\n  dataKey: string\n  nameKey: string\n  colors?: string[]\n}\n\n// Notification props\nexport interface NotificationProps {\n  id: string\n  type: 'success' | 'error' | 'warning' | 'info'\n  title: string\n  message?: string\n  duration?: number\n  action?: {\n    label: string\n    onClick: () => void\n  }\n  onDismiss?: (id: string) => void\n}\n\n// Loading and error state props\nexport interface LoadingStateProps {\n  message?: string\n  className?: string\n}\n\nexport interface ErrorStateProps {\n  title?: string\n  message: string\n  retry?: () => void\n  className?: string\n}\n\nexport interface EmptyStateProps {\n  title?: string\n  message: string\n  icon?: LucideIcon\n  action?: {\n    label: string\n    onClick: () => void\n  }\n  className?: string\n}\n\n// Utility component props\nexport interface BadgeProps {\n  variant?: 'default' | 'secondary' | 'destructive' | 'outline' | 'success' | 'warning'\n  size?: 'sm' | 'md' | 'lg'\n  children: React.ReactNode\n  className?: string\n}\n\nexport interface AvatarProps {\n  src?: string\n  alt?: string\n  fallback?: string\n  size?: 'sm' | 'md' | 'lg' | 'xl'\n  className?: string\n}\n\nexport interface TooltipProps {\n  content: React.ReactNode\n  children: React.ReactNode\n  side?: 'top' | 'right' | 'bottom' | 'left'\n  className?: string\n}","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/types/contact.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/types/database.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/types/entities.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/types/forms/contact-form.types.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":69,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":69,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1692,1695],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1692,1695],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Contact Form Types and Default Values\n * \n * Provides type-safe default values that align with the contact schema expectations.\n * This ensures React Hook Form defaults match Yup schema validation rules.\n */\n\nimport type { ContactFormData } from '../contact.types'\n\n/**\n * Default values for contact form that align with schema expectations\n * All nullable fields default to null instead of empty strings\n * Required fields have appropriate default values\n */\nexport const defaultContactFormValues: ContactFormData = {\n  // Required fields\n  first_name: '',\n  last_name: '',\n  organization_id: '',\n  purchase_influence: 'Unknown',\n  decision_authority: 'Gatekeeper',\n\n  // Optional role field\n  role: null,\n\n  // Optional fields - using null for nullable schema fields\n  email: null,\n  title: null,\n  department: null,\n  phone: null,\n  mobile_phone: null,\n  linkedin_url: null,\n  is_primary_contact: false,\n  notes: null,\n\n  // Virtual fields\n  preferred_principals: []\n}\n\n/**\n * Creates default values with optional overrides\n * Ensures type safety while allowing partial customization\n */\nexport const createContactFormDefaults = (\n  overrides: Partial<ContactFormData> = {}\n): ContactFormData => {\n  return {\n    ...defaultContactFormValues,\n    ...overrides\n  }\n}\n\n/**\n * Helper to create defaults with preselected organization\n */\nexport const createContactFormDefaultsWithOrganization = (\n  organizationId: string,\n  overrides: Partial<ContactFormData> = {}\n): ContactFormData => {\n  return createContactFormDefaults({\n    organization_id: organizationId,\n    ...overrides\n  })\n}\n\n/**\n * Type guard to validate contact form data shape\n */\nexport const isContactFormData = (data: any): data is ContactFormData => {\n  return (\n    data &&\n    typeof data === 'object' &&\n    typeof data.first_name === 'string' &&\n    typeof data.last_name === 'string' &&\n    typeof data.organization_id === 'string' &&\n    (data.role === null || typeof data.role === 'string')\n  )\n}\n\nexport type { ContactFormData }","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/types/forms/form-interfaces.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":175,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":175,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4463,4466],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4463,4466],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":185,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":185,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4745,4748],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4745,4748],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":195,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":195,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5013,5016],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5013,5016],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Explicit Form Interfaces\n * \n * These interfaces are designed to work perfectly with React Hook Form\n * while maintaining compatibility with Yup validation schemas.\n * They handle the optionality/nullability differences between Yup and RHF.\n */\n\n/**\n * Contact form interface optimized for React Hook Form\n * Handles nullable vs optional field differences\n */\nexport interface ContactFormInterface {\n  // Required fields\n  first_name: string\n  last_name: string\n  organization_id: string\n  purchase_influence: 'High' | 'Medium' | 'Low' | 'Unknown'\n  decision_authority: 'Decision Maker' | 'Influencer' | 'End User' | 'Gatekeeper'\n  position: string\n\n  // Conditionally required\n  custom_position?: string | null\n\n  // Optional fields (can be undefined, null, or value)\n  email?: string | null\n  title?: string | null\n  department?: string | null\n  phone?: string | null\n  mobile_phone?: string | null\n  linkedin_url?: string | null\n  is_primary_contact?: boolean\n  notes?: string | null\n\n  // Virtual fields\n  preferred_principals?: string[]\n}\n\n/**\n * Organization form interface optimized for React Hook Form\n */\nexport interface OrganizationFormInterface {\n  // Required fields\n  name: string\n  type: 'customer' | 'principal' | 'distributor' | 'prospect' | 'vendor'\n  priority: 'A' | 'B' | 'C' | 'D'\n  segment: string\n\n  // Boolean fields (auto-derived from type, but kept for database compatibility)\n  is_principal?: boolean\n  is_distributor?: boolean\n\n  // Optional fields\n  city?: string | null\n  state_province?: string | null\n  phone?: string | null\n  website?: string | null\n  account_manager?: string | null\n  notes?: string | null\n}\n\n/**\n * Opportunity form interface optimized for React Hook Form\n */\nexport interface OpportunityFormInterface {\n  // Required fields\n  name: string\n  organization_id: string\n  estimated_value: number\n  stage: string\n\n  // Optional fields\n  contact_id?: string | null\n  estimated_close_date?: string | null\n  description?: string | null\n  notes?: string | null\n\n  // Principal CRM fields (optional)\n  principals?: string[]\n  product_id?: string | null\n  opportunity_context?: string | null\n  auto_generated_name?: boolean\n  principal_id?: string | null\n  probability?: number | null\n  deal_owner?: string | null\n}\n\n/**\n * Default values factory for Contact form interface\n */\nexport const createContactFormInterfaceDefaults = (\n  preselectedOrganization?: string,\n  initialData?: Partial<ContactFormInterface>\n): ContactFormInterface => ({\n  first_name: '',\n  last_name: '',\n  organization_id: preselectedOrganization || '',\n  purchase_influence: 'Unknown',\n  decision_authority: 'Gatekeeper',\n  position: '',\n  custom_position: null,\n  email: null,\n  title: null,\n  department: null,\n  phone: null,\n  mobile_phone: null,\n  linkedin_url: null,\n  is_primary_contact: false,\n  notes: null,\n  preferred_principals: [],\n  ...initialData\n})\n\n/**\n * Default values factory for Organization form interface\n */\nexport const createOrganizationFormInterfaceDefaults = (\n  initialData?: Partial<OrganizationFormInterface>\n): OrganizationFormInterface => {\n  // Start with base data including any provided initial data\n  const baseData = {\n    name: '',\n    type: 'customer' as const,\n    priority: 'C' as const,\n    segment: '',\n    city: null,\n    state_province: null,\n    phone: null,\n    website: null,\n    account_manager: null,\n    notes: null,\n    ...initialData\n  }\n  \n  // Auto-derive boolean flags from the type\n  // Import the function dynamically to avoid circular dependencies\n  const deriveFlags = (type: string) => ({\n    is_principal: type === 'principal',\n    is_distributor: type === 'distributor'\n  })\n  \n  const derivedFlags = deriveFlags(baseData.type)\n  \n  return { ...baseData, ...derivedFlags }\n}\n\n/**\n * Default values factory for Opportunity form interface\n */\nexport const createOpportunityFormInterfaceDefaults = (\n  preselectedOrganization?: string,\n  initialData?: Partial<OpportunityFormInterface>\n): OpportunityFormInterface => ({\n  name: '',\n  organization_id: preselectedOrganization || '',\n  estimated_value: 0,\n  stage: 'Discovery',\n  contact_id: null,\n  estimated_close_date: null,\n  description: null,\n  notes: null,\n  principals: [],\n  product_id: null,\n  opportunity_context: null,\n  auto_generated_name: false,\n  principal_id: null,\n  probability: null,\n  deal_owner: null,\n  ...initialData\n})\n\n/**\n * Type guards for form interfaces\n */\nexport const isContactFormInterface = (data: any): data is ContactFormInterface => {\n  return (\n    data &&\n    typeof data === 'object' &&\n    typeof data.first_name === 'string' &&\n    typeof data.last_name === 'string' &&\n    typeof data.organization_id === 'string'\n  )\n}\n\nexport const isOrganizationFormInterface = (data: any): data is OrganizationFormInterface => {\n  return (\n    data &&\n    typeof data === 'object' &&\n    typeof data.name === 'string' &&\n    typeof data.type === 'string' &&\n    typeof data.priority === 'string'\n  )\n}\n\nexport const isOpportunityFormInterface = (data: any): data is OpportunityFormInterface => {\n  return (\n    data &&\n    typeof data === 'object' &&\n    typeof data.name === 'string' &&\n    typeof data.organization_id === 'string' &&\n    typeof data.estimated_value === 'number'\n  )\n}","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/types/forms/index.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":70,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":70,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2322,2325],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2322,2325],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Form Types Index\n * \n * Centralized exports for all form types and default value factories.\n * This provides a single import location for form-related utilities.\n */\n\n// Contact form types and defaults\nexport type { ContactFormData } from './contact-form.types'\nexport {\n  defaultContactFormValues,\n  createContactFormDefaults,\n  createContactFormDefaultsWithOrganization,\n  isContactFormData\n} from './contact-form.types'\n\n// Organization form types and defaults\nexport type { OrganizationFormData } from './organization-form.types'\nexport {\n  defaultOrganizationFormValues,\n  createOrganizationFormDefaults,\n  createPrincipalOrganizationDefaults,\n  createDistributorOrganizationDefaults,\n  createCustomerOrganizationDefaults,\n  isOrganizationFormData\n} from './organization-form.types'\n\n// Opportunity form types and defaults\nexport type { OpportunityFormData } from './opportunity-form.types'\nexport {\n  defaultOpportunityFormValues,\n  createOpportunityFormDefaults,\n  createOpportunityFormDefaultsWithOrganization,\n  createOpportunityFormDefaultsWithContact,\n  createDiscoveryOpportunityDefaults,\n  createProposalOpportunityDefaults,\n  createNegotiationOpportunityDefaults,\n  isOpportunityFormData\n} from './opportunity-form.types'\n\n// Re-export additional form data types from validation.ts for convenience\nexport type { \n  ProductFormData,\n  OpportunityProductFormData,\n  ContactPreferredPrincipalFormData\n} from '../validation'\n\n// Re-export individual form data types for direct access\nimport type { ContactFormData as ContactFormDataType } from './contact-form.types'\nimport type { OrganizationFormData as OrganizationFormDataType } from './organization-form.types'\nimport type { OpportunityFormData as OpportunityFormDataType } from './opportunity-form.types'\n\n/**\n * Union type of all form data types\n * Useful for generic form handling utilities\n */\nexport type AnyFormData = \n  | ContactFormDataType \n  | OrganizationFormDataType \n  | OpportunityFormDataType\n\n// Re-export individual form data types for direct access\nimport { isContactFormData } from './contact-form.types'\nimport { isOrganizationFormData } from './organization-form.types'\nimport { isOpportunityFormData } from './opportunity-form.types'\n\n/**\n * Type guard to check if data is any form data type\n */\nexport const isFormData = (data: any): data is AnyFormData => {\n  return (\n    isContactFormData(data) || \n    isOrganizationFormData(data) || \n    isOpportunityFormData(data)\n  )\n}\n\n/**\n * Common form field types for reuse\n */\nexport interface BaseFormProps<T> {\n  onSubmit: (data: T) => void | Promise<void>\n  initialData?: Partial<T>\n  loading?: boolean\n  submitLabel?: string\n}\n\n/**\n * Form props with preselection support\n */\nexport interface FormPropsWithPreselection<T> extends BaseFormProps<T> {\n  preselectedOrganization?: string\n  preselectedContact?: string\n}\n\n/**\n * Common form field validation patterns\n */\nexport const FormValidationPatterns = {\n  email: /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/,\n  phone: /^\\+?[\\d\\s\\-().]+$/,\n  uuid: /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i,\n  url: /^https?:\\/\\/.+/\n}\n\n/**\n * Form field requirements by entity type\n */\nexport const FormFieldRequirements = {\n  contact: {\n    required: ['first_name', 'last_name', 'organization_id', 'purchase_influence', 'decision_authority'],\n    nullable: ['email', 'title', 'department', 'phone', 'mobile_phone', 'linkedin_url', 'notes', 'role'],\n    boolean: ['is_primary_contact'],\n    array: ['preferred_principals']\n  },\n  organization: {\n    required: ['name', 'type', 'priority', 'segment'],\n    nullable: ['city', 'state_province', 'phone', 'website', 'account_manager', 'notes'],\n    boolean: ['is_principal', 'is_distributor'],\n    array: []\n  },\n  opportunity: {\n    required: ['name', 'organization_id', 'estimated_value', 'stage'],\n    nullable: ['contact_id', 'estimated_close_date', 'description', 'notes', 'product_id', 'opportunity_context', 'principal_id', 'probability', 'deal_owner'],\n    boolean: ['auto_generated_name'],\n    array: ['principals']\n  }\n} as const","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/types/forms/opportunity-form.types.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":115,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":115,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2949,2952],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2949,2952],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Opportunity Form Types and Default Values\n * \n * Provides type-safe default values that align with the opportunity schema expectations.\n * This ensures React Hook Form defaults match Yup schema validation rules.\n */\n\nimport type { OpportunityFormData } from '../opportunity.types'\n\n/**\n * Default values for opportunity form that align with schema expectations\n * All nullable fields default to null instead of empty strings\n * Required fields have appropriate default values\n */\nexport const defaultOpportunityFormValues: OpportunityFormData = {\n  // Required fields\n  name: '',\n  organization_id: '',\n  estimated_value: 0,\n  stage: 'qualified',\n\n  // Optional fields - using null for nullable schema fields\n  contact_id: null,\n  estimated_close_date: null,\n  description: null,\n  notes: null,\n\n  // Principal CRM fields (optional for compatibility)\n  principals: [],\n  product_id: null,\n  opportunity_context: null,\n  auto_generated_name: false,\n  principal_id: null,\n  probability: null,\n  deal_owner: null\n}\n\n/**\n * Creates default values with optional overrides\n * Ensures type safety while allowing partial customization\n */\nexport const createOpportunityFormDefaults = (\n  overrides: Partial<OpportunityFormData> = {}\n): OpportunityFormData => {\n  return {\n    ...defaultOpportunityFormValues,\n    ...overrides\n  }\n}\n\n/**\n * Helper to create defaults with preselected organization\n */\nexport const createOpportunityFormDefaultsWithOrganization = (\n  organizationId: string,\n  overrides: Partial<OpportunityFormData> = {}\n): OpportunityFormData => {\n  return createOpportunityFormDefaults({\n    organization_id: organizationId,\n    ...overrides\n  })\n}\n\n/**\n * Helper to create defaults with preselected organization and contact\n */\nexport const createOpportunityFormDefaultsWithContact = (\n  organizationId: string,\n  contactId: string,\n  overrides: Partial<OpportunityFormData> = {}\n): OpportunityFormData => {\n  return createOpportunityFormDefaults({\n    organization_id: organizationId,\n    contact_id: contactId,\n    ...overrides\n  })\n}\n\n/**\n * Helper to create defaults for different opportunity stages\n */\nexport const createDiscoveryOpportunityDefaults = (\n  overrides: Partial<OpportunityFormData> = {}\n): OpportunityFormData => {\n  return createOpportunityFormDefaults({\n    stage: 'qualified',\n    probability: null,\n    ...overrides\n  })\n}\n\nexport const createProposalOpportunityDefaults = (\n  overrides: Partial<OpportunityFormData> = {}\n): OpportunityFormData => {\n  return createOpportunityFormDefaults({\n    stage: 'proposal',\n    probability: 25,\n    ...overrides\n  })\n}\n\nexport const createNegotiationOpportunityDefaults = (\n  overrides: Partial<OpportunityFormData> = {}\n): OpportunityFormData => {\n  return createOpportunityFormDefaults({\n    stage: 'negotiation',\n    probability: 75,\n    ...overrides\n  })\n}\n\n/**\n * Type guard to validate opportunity form data shape\n */\nexport const isOpportunityFormData = (data: any): data is OpportunityFormData => {\n  return (\n    data &&\n    typeof data === 'object' &&\n    typeof data.name === 'string' &&\n    typeof data.organization_id === 'string' &&\n    typeof data.stage === 'string' &&\n    (typeof data.estimated_value === 'number' || data.estimated_value === null)\n  )\n}\n\nexport type { OpportunityFormData }","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/types/forms/organization-form.types.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":95,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":95,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2393,2396],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2393,2396],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Organization Form Types and Default Values\n * \n * Provides type-safe default values that align with the organization schema expectations.\n * This ensures React Hook Form defaults match Yup schema validation rules.\n */\n\nimport type { OrganizationFormData } from '../organization.types'\n\n/**\n * Default values for organization form that align with schema expectations\n * All nullable fields default to null instead of empty strings\n * Required fields have appropriate default values\n */\nexport const defaultOrganizationFormValues: OrganizationFormData = {\n  // Required fields\n  name: '',\n  type: 'customer', // Default to a valid type instead of empty string\n  priority: 'C',\n  segment: '',\n\n  // Boolean fields with defaults\n  is_principal: false,\n  is_distributor: false,\n\n  // Optional fields - using null for nullable schema fields\n  description: null,\n  email: null,\n  phone: null,\n  website: null,\n  address_line_1: null,\n  address_line_2: null,\n  city: null,\n  state_province: null,\n  postal_code: null,\n  country: null,\n  industry: null,\n  size: null,\n  annual_revenue: null,\n  employee_count: null,\n  notes: null\n}\n\n/**\n * Creates default values with optional overrides\n * Ensures type safety while allowing partial customization\n */\nexport const createOrganizationFormDefaults = (\n  overrides: Partial<OrganizationFormData> = {}\n): OrganizationFormData => {\n  return {\n    ...defaultOrganizationFormValues,\n    ...overrides\n  }\n}\n\n/**\n * Helper to create defaults for specific organization types\n */\nexport const createPrincipalOrganizationDefaults = (\n  overrides: Partial<OrganizationFormData> = {}\n): OrganizationFormData => {\n  return createOrganizationFormDefaults({\n    type: 'principal',\n    is_principal: true,\n    priority: 'A',\n    ...overrides\n  })\n}\n\nexport const createDistributorOrganizationDefaults = (\n  overrides: Partial<OrganizationFormData> = {}\n): OrganizationFormData => {\n  return createOrganizationFormDefaults({\n    type: 'distributor',\n    is_distributor: true,\n    priority: 'B',\n    ...overrides\n  })\n}\n\nexport const createCustomerOrganizationDefaults = (\n  overrides: Partial<OrganizationFormData> = {}\n): OrganizationFormData => {\n  return createOrganizationFormDefaults({\n    type: 'customer',\n    priority: 'C',\n    ...overrides\n  })\n}\n\n/**\n * Type guard to validate organization form data shape\n */\nexport const isOrganizationFormData = (data: any): data is OrganizationFormData => {\n  return (\n    data &&\n    typeof data === 'object' &&\n    typeof data.name === 'string' &&\n    typeof data.type === 'string' &&\n    typeof data.priority === 'string' &&\n    typeof data.segment === 'string'\n  )\n}\n\nexport type { OrganizationFormData }","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/types/interaction.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/types/opportunity.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/types/organization.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/types/supabase.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/types/validation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/utils/url-hash-recovery.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/src/vite-env.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/types-post-phase1-migration.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/vite.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/krwhynot/Projects/CRM/vitest.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]}]
